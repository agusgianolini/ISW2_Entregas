

----QUIT----(12 May 2023 17:49:00) CuisUniversity-5799.image priorSource: 4801971!

----STARTUP---- (12 May 2023 17:49:01) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5799.image!


----QUIT----(12 May 2023 17:49:01) CuisUniversity-5799.image priorSource: 9222569!

----STARTUP---- (15 May 2023 17:22:21) as /home/clinux01/Descargas/linux64/CuisUniversity-5799.image!


----End fileIn of /home/clinux01/Descargas/Portfolio-Ejercicio.st----!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'hola 5/15/2023 19:48:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'hola 5/15/2023 19:48:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'hola 5/15/2023 19:48:12'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'hola 5/15/2023 19:48:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'hola 5/15/2023 19:48:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'hola 5/15/2023 19:48:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'hola 5/15/2023 19:48:12'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'hola 5/15/2023 19:48:12'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'hola 5/15/2023 19:56:17' prior: 50620083!
balance

	^transactions sum: [ :aTransaction | aTransaction isDeposit ifTrue: [aTransaction value]
		-1 * (aTransaction value)
		 ] ifEmpty: [ 0 ]! !
!Deposit methodsFor: 'nil' stamp: 'hola 5/15/2023 19:56:37'!
isDeposit
	^true! !
!Withdraw methodsFor: 'nil' stamp: 'hola 5/15/2023 19:56:54'!
isDeposit
	^false! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'hola 5/15/2023 19:56:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'hola 5/15/2023 19:56:55'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'hola 5/15/2023 19:56:55'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'hola 5/15/2023 19:56:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'hola 5/15/2023 19:56:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'hola 5/15/2023 19:56:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'hola 5/15/2023 19:56:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'hola 5/15/2023 19:57:02'!
ERROR!
!ReceptiveAccount methodsFor: 'balance' stamp: 'hola 5/15/2023 19:57:39' prior: 50620127!
balance

	^transactions sum: [ :aTransaction | aTransaction isDeposit ifTrue: [aTransaction value]
		ifFalse:[-1 * (aTransaction value)]
		 ] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'hola 5/15/2023 19:57:40'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'hola 5/15/2023 19:57:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'hola 5/15/2023 19:57:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'hola 5/15/2023 19:57:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'hola 5/15/2023 19:57:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'hola 5/15/2023 19:57:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'hola 5/15/2023 19:57:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'hola 5/15/2023 19:57:45'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'hola 5/15/2023 19:58:44' prior: 50620171!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction isDeposit ifTrue: [aTransaction value].
		-1 * (aTransaction value)
		 ] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'hola 5/15/2023 19:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'hola 5/15/2023 19:58:45'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'hola 5/15/2023 19:58:45'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'hola 5/15/2023 19:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'hola 5/15/2023 19:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'hola 5/15/2023 19:58:45'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'hola 5/15/2023 19:58:45'!
PASSED!
!ReceptiveAccount methodsFor: 'balance' stamp: 'hola 5/15/2023 19:58:55' prior: 50620210!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction isDeposit ifTrue: [^aTransaction value].
		-1 * (aTransaction value)
		 ] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'hola 5/15/2023 19:58:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'hola 5/15/2023 19:58:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'hola 5/15/2023 19:58:55'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'hola 5/15/2023 19:58:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'hola 5/15/2023 19:58:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'hola 5/15/2023 19:58:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'hola 5/15/2023 19:58:55'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'hola 5/15/2023 19:58:55'!
FAILURE!
!ReceptiveAccount methodsFor: 'balance' stamp: 'hola 5/15/2023 19:59:09' prior: 50620245!
balance

	^transactions sum: [ :aTransaction | 
		aTransaction isDeposit ifTrue: [aTransaction value]
		ifFalse:[-1 * (aTransaction value)]
		 ] ifEmpty: [ 0 ]! !
!ReceptiveAccount methodsFor: 'balance' stamp: 'hola 5/15/2023 20:00:19' prior: 50620284!
balance

	^transactions sum: [ :aTransaction |  aTransaction balance] ifEmpty: [ 0 ]! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'hola 5/15/2023 20:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'hola 5/15/2023 20:00:26'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'hola 5/15/2023 20:00:26'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'hola 5/15/2023 20:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'hola 5/15/2023 20:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'hola 5/15/2023 20:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'hola 5/15/2023 20:00:26'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'hola 5/15/2023 20:00:28'!
ERROR!
!Deposit methodsFor: 'as yet unclassified' stamp: 'hola 5/15/2023 20:00:34'!
balance
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'nil' stamp: 'hola 5/15/2023 20:01:42'!
balance
! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'hola 5/15/2023 20:01:49' prior: 50620332!
balance
	^value! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'hola 5/15/2023 20:02:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'hola 5/15/2023 20:02:04'!
ERROR!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'hola 5/15/2023 20:02:04'!
ERROR!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'hola 5/15/2023 20:02:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'hola 5/15/2023 20:02:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'hola 5/15/2023 20:02:04'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'hola 5/15/2023 20:02:04'!
PASSED!

----STARTUP---- (22 May 2023 17:09:15) as /home/clinux01/Descargas/linux64/CuisUniversity-5799.image!


----End fileIn of /home/clinux01/Descargas/Portfolio-Ejercicio(1).st----!

!methodRemoval: Portfolio #parentsAndLeaf stamp: 'AG 5/22/2023 17:10:51'!
parentsAndLeaf

	|parentsAndLeaf|
	
	parentsAndLeaf := Set new.
	
	parents do:[:parent| parentsAndLeaf add: parent].
	
	parentsAndLeaf add: self.
	^parentsAndLeaf 
	
!

!testRun: #PortfolioTest #test01PorfolioHasZeroAsBalanceWhenCreated stamp: 'AG 5/22/2023 17:10:58'!
PASSED!

!testRun: #PortfolioTest #test02PortfolioBalanceWithOnlyOneAccountReturnAccountBalance stamp: 'AG 5/22/2023 17:10:58'!
PASSED!

!testRun: #PortfolioTest #test03PortfolioWithManyAccountsReturnTheSumOfTheManyAccountsBalance stamp: 'AG 5/22/2023 17:10:58'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithASecondPortfolioShouldReturnSecondPortfolioBalanceWhenAskBalance stamp: 'AG 5/22/2023 17:10:58'!
PASSED!

!testRun: #PortfolioTest #test05AssertPortfolioHasRegisteredATransaction stamp: 'AG 5/22/2023 17:10:58'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioRootHasRegisteredPortfolioLeafTransaction stamp: 'AG 5/22/2023 17:10:58'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasZeroTransactionsWhenIsCreated stamp: 'AG 5/22/2023 17:10:58'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioWithOneAccountWhenAskForTransactionsShouldReturnsTransactionsOfTheAccount stamp: 'AG 5/22/2023 17:10:58'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioWithManyPortfoliosAndAccountsWhenAskTransactionsShouldReturnsAllTransactionsOfChilds stamp: 'AG 5/22/2023 17:10:58'!
PASSED!

!testRun: #PortfolioTest #test10ShouldRaiseErrorAddAnAccountToPortfolioThatAlreadyHasTheAccount stamp: 'AG 5/22/2023 17:10:58'!
PASSED!

!testRun: #PortfolioTest #test11ShouldRaiseErrorAddAnAccountToPortfolioThatAlreadyHasAPortfolioWithTheAccount stamp: 'AG 5/22/2023 17:10:58'!
PASSED!

!testRun: #PortfolioTest #test12ShouldRaiseErrorAddAnAccountToPortfolioThatAlreadyIsIncludedOnThePortfolioFatherTree stamp: 'AG 5/22/2023 17:10:58'!
PASSED!

!testRun: #PortfolioTest #test13ShouldRaiseErrorAddAnAccountToPortfolioThatAlreadyIsIncludedOnADistantPortfolioFatherTree stamp: 'AG 5/22/2023 17:10:58'!
PASSED!

!testRun: #PortfolioTest #test14ShouldRaiseErrorAddAnEmptyPortfolioToAFatherPortfolioThatAlreadyHasTheEmptyPortfolio stamp: 'AG 5/22/2023 17:10:58'!
PASSED!

!testRun: #PortfolioTest #test15ShouldRaiseErrorAddAPortfolioThatHasAnAccountThatAlreadyIsIncludedOnADistantPortfolioFatherTree stamp: 'AG 5/22/2023 17:10:58'!
PASSED!

----STARTUP---- (22 May 2023 17:53:29) as /home/clinux01/Descargas/linux64/CuisUniversity-5799.image!


----SNAPSHOT----(22 May 2023 17:53:39) CuisUniversity-5799.image priorSource: 9222790!

----STARTUP---- (22 May 2023 21:26:17) as /home/clinux01/Descargas/linux64/CuisUniversity-5799.image!


----SNAPSHOT----(22 May 2023 21:26:28) CuisUniversity-5799.image priorSource: 9222978!

----End fileIn of /home/clinux01/Escritorio/2023-1c/06-Portfolio1/Portfolio-Solucion.st----!

Object subclass: #Transferencia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transferencia category: 'Portfolio-Solucion' stamp: 'AG 5/22/2023 21:27:32'!
Object subclass: #Transferencia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #Transferencia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transferencia category: 'Portfolio-Solucion' stamp: 'AG 5/22/2023 21:27:49'!
AccountTransaction subclass: #Transferencia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #TransferenciaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferenciaTest category: 'Portfolio-Solucion' stamp: 'AG 5/22/2023 21:29:23'!
TestCase subclass: #TransferenciaTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferenciaTest methodsFor: 'no messages' stamp: 'AG 5/22/2023 21:34:41'!
test01
	|transfer acc1 acc2|
	
	acc1 := ReceptiveAccount new register:(Deposit for: 100).
	acc2 := ReceptiveAccount new.
	transfer := Transferencia with: 50 from: acc1 to: acc2.
	
	self assert: acc2 balance equals: 50.

	! !
!TransferenciaTest methodsFor: 'as yet unclassified' stamp: 'AG 5/22/2023 21:35:16' prior: 50620633!
test01
	|transfer acc1 acc2|
	
	acc1 := ReceptiveAccount new register:(Deposit for: 100).
	acc2 := ReceptiveAccount new.
	transfer := Transferencia with: 50 from: acc1 to: acc2.
	
	self assert: transfer value equals: 50.
	self assert: acc2 balance equals: 50.

	! !

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 21:35:29'!
ERROR!
!Transferencia class methodsFor: 'instance creation' stamp: 'AG 5/22/2023 21:35:34'!
with: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: aSmallInteger from: aReceptiveAccount to: aReceptiveAccount3 ! !
!Transferencia class methodsFor: 'instance creation' stamp: 'AG 5/22/2023 21:38:20' prior: 50620658!
with: anAmount from: aCreditorAccount to: aBeneficiaryAccount 
	.
	^self new initializeWith: anAmount from: aCreditorAccount to: aBeneficiaryAccount .! !

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 21:38:21'!
ERROR!

!classDefinition: #Transferencia category: 'Portfolio-Solucion' stamp: 'AG 5/22/2023 21:38:28'!
AccountTransaction subclass: #Transferencia
	instanceVariableNames: 'amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transferencia category: 'Portfolio-Solucion' stamp: 'AG 5/22/2023 21:38:28'!
AccountTransaction subclass: #Transferencia
	instanceVariableNames: 'amount creditorAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transferencia category: 'Portfolio-Solucion' stamp: 'AG 5/22/2023 21:38:28'!
AccountTransaction subclass: #Transferencia
	instanceVariableNames: 'amount creditorAccount beneficiaryAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transferencia methodsFor: 'initialization' stamp: 'AG 5/22/2023 21:38:28'!
initializeWith: anAmount from: aCreditorAccount to: aBeneficiaryAccount 
	self shouldBeImplemented.
	amount := anAmount.
	creditorAccount := aCreditorAccount.
	beneficiaryAccount := aBeneficiaryAccount.! !

!classDefinition: #Transferencia category: 'Portfolio-Solucion' stamp: 'AG 5/22/2023 21:39:07'!
AccountTransaction subclass: #Transferencia
	instanceVariableNames: 'amount creditorAccount beneficiaryAccount value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transferencia methodsFor: 'initialization' stamp: 'AG 5/22/2023 21:39:06' prior: 50620705!
initializeWith: anAmount from: aCreditorAccount to: aBeneficiaryAccount 
	
	value := anAmount.
	creditorAccount := aCreditorAccount.
	beneficiaryAccount := aBeneficiaryAccount.! !

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 21:39:09'!
ERROR!
!AccountTransaction methodsFor: 'value' stamp: 'AG 5/22/2023 21:39:21' prior: 50620493 overrides: 16902254!
value 

	^50! !

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 21:39:24'!
FAILURE!
!TransferenciaTest methodsFor: 'as yet unclassified' stamp: 'AG 5/22/2023 21:39:32' prior: 50620644!
test01
	|transfer acc1 acc2|
	
	acc1 := ReceptiveAccount new register:(Deposit for: 100).
	acc2 := ReceptiveAccount new.
	transfer := Transferencia with: 50 from: acc1 to: acc2.
	
	self assert: transfer value equals: 50.
	! !

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 21:39:33'!
PASSED!

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 21:39:33'!
PASSED!
!TransferenciaTest methodsFor: 'as yet unclassified' stamp: 'AG 5/22/2023 21:41:23'!
test02
	|transfer acc1 acc2|
	
	acc1 := ReceptiveAccount new register:(Deposit for: 100).
	acc2 := ReceptiveAccount new.
	transfer := Transferencia with: 50 from: acc1 to: acc2.
	
	self assert: acc1 balance equals: 50.
	! !

!testRun: #TransferenciaTest #test02 stamp: 'AG 5/22/2023 21:41:31'!
FAILURE!
!Transferencia methodsFor: 'initialization' stamp: 'AG 5/22/2023 21:43:48' prior: 50620724!
initializeWith: anAmount from: aCreditorAccount to: aBeneficiaryAccount 
	
	value := anAmount.
	aCreditorAccount transfer: 50.
	aBeneficiaryAccount getsTransfer: 50.! !

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 21:43:53'!
ERROR!

!testRun: #TransferenciaTest #test02 stamp: 'AG 5/22/2023 21:43:53'!
ERROR!

!testRun: #TransferenciaTest #test02 stamp: 'AG 5/22/2023 21:43:57'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'AG 5/22/2023 21:44:08'!
transfer: aRenameMe1 
	self shouldBeImplemented.! !

!testRun: #TransferenciaTest #test02 stamp: 'AG 5/22/2023 21:49:37'!
ERROR!

!methodRemoval: ReceptiveAccount #transfer: stamp: 'AG 5/22/2023 21:49:53'!
transfer: aRenameMe1 
	self shouldBeImplemented.!
!Transferencia methodsFor: 'initialization' stamp: 'AG 5/22/2023 21:50:50' prior: 50620771!
initializeWith: anAmount from: aCreditorAccount to: aBeneficiaryAccount 
	
	value := anAmount.
! !

!testRun: #TransferenciaTest #test02 stamp: 'AG 5/22/2023 21:51:12'!
FAILURE!

!classDefinition: #TransferCredit category: 'Portfolio-Solucion' stamp: 'AG 5/22/2023 21:54:00'!
Transferencia subclass: #TransferCredit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transferencia methodsFor: 'initialization' stamp: 'AG 5/22/2023 21:53:48' prior: 50620798!
initializeWith: anAmount from: aCreditorAccount to: aBeneficiaryAccount 
	
	value := anAmount.
	aCreditorAccount register: TransferCredit of: self.
! !
!Transferencia methodsFor: 'initialization' stamp: 'AG 5/22/2023 21:54:14' prior: 50620815!
initializeWith: anAmount from: aCreditorAccount to: aBeneficiaryAccount 
	
	value := anAmount.
	aCreditorAccount register: (TransferCredit of: self).
! !

!testRun: #TransferenciaTest #test02 stamp: 'AG 5/22/2023 21:54:23'!
PASSED!

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 21:54:23'!
ERROR!

!testRun: #TransferenciaTest #test02 stamp: 'AG 5/22/2023 21:54:23'!
ERROR!

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 21:54:25'!
ERROR!

!testRun: #TransferenciaTest #test02 stamp: 'AG 5/22/2023 21:54:25'!
ERROR!

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 21:54:27'!
ERROR!
!TransferCredit class methodsFor: 'instance creation' stamp: 'AG 5/22/2023 21:54:35'!
of: aTransferencia 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeOf: aTransferencia ! !
!TransferCredit class methodsFor: 'instance creation' stamp: 'AG 5/22/2023 21:55:14' prior: 50620845!
of: aFatherTransfer

	^self new initializeOf: aFatherTransfer .! !

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 21:55:16'!
ERROR!

!classDefinition: #TransferCredit category: 'Portfolio-Solucion' stamp: 'AG 5/22/2023 21:55:20'!
Transferencia subclass: #TransferCredit
	instanceVariableNames: 'fatherTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferCredit methodsFor: 'initialization' stamp: 'AG 5/22/2023 21:55:20'!
initializeOf: aFatherTransfer 
	self shouldBeImplemented.
	fatherTransfer := aFatherTransfer.! !
!TransferCredit methodsFor: 'initialization' stamp: 'AG 5/22/2023 21:55:27' prior: 50620869!
initializeOf: aFatherTransfer 
	
	fatherTransfer := aFatherTransfer.! !

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 21:55:29'!
PASSED!

!testRun: #TransferenciaTest #test02 stamp: 'AG 5/22/2023 21:56:00'!
ERROR!

!classRenamed: #Transferencia as: #Transfer stamp: 'AG 5/22/2023 21:56:37'!
Smalltalk renameClassNamed: #Transferencia as: #Transfer!
!TransferenciaTest methodsFor: 'as yet unclassified' stamp: 'AG 5/22/2023 21:56:37' prior: 50620758!
test02
	|transfer acc1 acc2|
	
	acc1 := ReceptiveAccount new register:(Deposit for: 100).
	acc2 := ReceptiveAccount new.
	transfer := Transfer with: 50 from: acc1 to: acc2.
	
	self assert: acc1 balance equals: 50.
	! !
!TransferenciaTest methodsFor: 'as yet unclassified' stamp: 'AG 5/22/2023 21:56:37' prior: 50620743!
test01
	|transfer acc1 acc2|
	
	acc1 := ReceptiveAccount new register:(Deposit for: 100).
	acc2 := ReceptiveAccount new.
	transfer := Transfer with: 50 from: acc1 to: acc2.
	
	self assert: transfer value equals: 50.
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AG 5/22/2023 21:58:05' prior: 50620447!
register: aTransaction

	transactions add: aTransaction 
! !

Object subclass: #Transfer
	instanceVariableNames: 'amount creditorAccount beneficiaryAccount value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'AG 5/22/2023 21:59:27'!
Object subclass: #Transfer
	instanceVariableNames: 'amount creditorAccount beneficiaryAccount value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 21:59:32'!
FAILURE!

!testRun: #TransferenciaTest #test02 stamp: 'AG 5/22/2023 21:59:32'!
ERROR!

!methodRemoval: TransferenciaTest #test02 stamp: 'AG 5/22/2023 21:59:38'!
test02
	|transfer acc1 acc2|
	
	acc1 := ReceptiveAccount new register:(Deposit for: 100).
	acc2 := ReceptiveAccount new.
	transfer := Transfer with: 50 from: acc1 to: acc2.
	
	self assert: acc1 balance equals: 50.
	!
!TransferenciaTest methodsFor: 'as yet unclassified' stamp: 'AG 5/22/2023 21:59:51' prior: 50620900!
test01
	|transfer acc1 acc2|
	
	acc1 := ReceptiveAccount new register:(Deposit for: 100).
	acc2 := ReceptiveAccount new.
	transfer := Transfer with: 50 from: acc1 to: acc2.
	
	self assert: acc1 balance equals: 50.
	! !

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 21:59:54'!
ERROR!
!TransferCredit methodsFor: 'initialization' stamp: 'AG 5/22/2023 22:01:10'!
affectBalance: aBalance

	^aBalance - fatherTransfer value.! !

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 22:01:16'!
ERROR!

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 22:01:16'!
ERROR!

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 22:01:22'!
ERROR!

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 22:01:22'!
ERROR!
!Transfer methodsFor: 'initialization' stamp: 'AG 5/22/2023 22:01:54' overrides: 16902254!
value

	^50.! !

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 22:01:58'!
PASSED!

!testRun: #TransferenciaTest #test01 stamp: 'AG 5/22/2023 22:02:04'!
PASSED!
!TransferenciaTest methodsFor: 'as yet unclassified' stamp: 'AG 5/22/2023 22:02:36'!
test01TransferToAccount
	|transfer acc1 acc2|
	
	acc1 := ReceptiveAccount new register:(Deposit for: 100).
	acc2 := ReceptiveAccount new.
	transfer := Transfer with: 50 from: acc1 to: acc2.
	
	self assert: acc1 balance equals: 50.
	! !

!methodRemoval: TransferenciaTest #test01 stamp: 'AG 5/22/2023 22:02:36'!
test01
	|transfer acc1 acc2|
	
	acc1 := ReceptiveAccount new register:(Deposit for: 100).
	acc2 := ReceptiveAccount new.
	transfer := Transfer with: 50 from: acc1 to: acc2.
	
	self assert: acc1 balance equals: 50.
	!
!TransferenciaTest methodsFor: 'as yet unclassified' stamp: 'AG 5/22/2023 22:02:39' prior: 50620980!
test01TransferToAccount

	|transfer acc1 acc2|
	
	acc1 := ReceptiveAccount new register:(Deposit for: 100).
	acc2 := ReceptiveAccount new.
	transfer := Transfer with: 50 from: acc1 to: acc2.
	
	self assert: acc1 balance equals: 50.
	! !
!TransferenciaTest methodsFor: 'as yet unclassified' stamp: 'AG 5/22/2023 22:03:02' prior: 50621000!
test01TransferToAccount

	|transfer acc1 acc2|
	
	acc1 := ReceptiveAccount new register:(Deposit for: 100).
	acc2 := ReceptiveAccount new.
	transfer := Transfer with: 50 from: acc1 to: acc2.
	
	self assert: acc1 balance equals: 50.
	self assert: acc2 balance equals: 50.
	! !
!TransferenciaTest methodsFor: 'as yet unclassified' stamp: 'AG 5/22/2023 22:03:40' prior: 50621011!
test01TransferToAccount

	|transfer acc1 acc2|
	
	acc1 := ReceptiveAccount new register:(Deposit for: 150).
	acc2 := ReceptiveAccount new.
	transfer := Transfer with: 50 from: acc1 to: acc2.
	
	self assert: transfer value equals: 50.
	self assert: acc1 balance equals: 100.
	self assert: acc2 balance equals: 50.
	! !

!testRun: #TransferenciaTest #test01TransferToAccount stamp: 'AG 5/22/2023 22:03:41'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'AG 5/22/2023 22:06:08' prior: 50620670!
with: anAmount from: aCreditorAccount to: aBeneficiaryAccount 
	.
	
	aCreditorAccount register: (Deposit for : anAmount).
	aBeneficiaryAccount register: (Withdraw for: anAmount).
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'AG 5/22/2023 22:06:15' prior: 50621039!
with: anAmount from: aCreditorAccount to: aBeneficiaryAccount 
	.
	
	aCreditorAccount register: (Deposit for: anAmount).
	aBeneficiaryAccount register: (Withdraw for: anAmount).
	! !
!TransferenciaTest methodsFor: 'as yet unclassified' stamp: 'AG 5/22/2023 22:06:26' prior: 50621023!
test01TransferToAccount

	|transfer acc1 acc2|
	
	acc1 := ReceptiveAccount new register:(Deposit for: 150).
	acc2 := ReceptiveAccount new.
	transfer := Transfer with: 50 from: acc1 to: acc2.
	
	self assert: acc1 balance equals: 100.
	self assert: acc2 balance equals: 50.
	! !
!TransferenciaTest methodsFor: 'as yet unclassified' stamp: 'AG 5/22/2023 22:06:31' prior: 50621057!
test01TransferToAccount

	|transfer acc1 acc2|
	
	acc1 := ReceptiveAccount new register:(Deposit for: 150).
	acc2 := ReceptiveAccount new.
	transfer := Transfer with: 50 from: acc1 to: acc2.
	
	self assert: acc1 balance equals: 100.
	self assert: acc2 balance equals: 50.
	! !

!testRun: #TransferenciaTest #test01TransferToAccount stamp: 'AG 5/22/2023 22:06:36'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'AG 5/22/2023 22:07:08' prior: 50621048!
with: anAmount from: aCreditorAccount to: aBeneficiaryAccount 
	.
	
	aBeneficiaryAccount register: (Deposit for: anAmount).
	aCreditorAccount register: (Withdraw for: anAmount).
	! !

!testRun: #TransferenciaTest #test01TransferToAccount stamp: 'AG 5/22/2023 22:07:09'!
PASSED!

!testRun: #TransferenciaTest #test01TransferToAccount stamp: 'AG 5/22/2023 22:07:14'!
PASSED!
!Transfer methodsFor: 'initialization' stamp: 'AG 5/22/2023 22:08:48' prior: 50620823!
initializeWith: anAmount from: aCreditorAccount to: aBeneficiaryAccount 
	
	value := anAmount.
	! !

!classRemoval: #TransferCredit stamp: 'AG 5/22/2023 22:08:53'!
Transfer subclass: #TransferCredit
	instanceVariableNames: 'fatherTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classRenamed: #TransferenciaTest as: #TransferTest stamp: 'AG 5/22/2023 22:09:04'!
Smalltalk renameClassNamed: #TransferenciaTest as: #TransferTest!

!methodRemoval: Transfer #value stamp: 'AG 5/22/2023 22:10:25'!
value

	^50.!

!methodRemoval: Transfer #initializeWith:from:to: stamp: 'AG 5/22/2023 22:10:28'!
initializeWith: anAmount from: aCreditorAccount to: aBeneficiaryAccount 
	
	value := anAmount.
	!

----STARTUP---- (26 May 2023 16:33:25) as F:\Manuel\Trabajos\EXACTAS\Ingenieria de Software I\CuisUniversity 26-05-23\Portfolio 2\CuisUniversity-5799.image!


!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 16:48:31'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 16:48:31'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 16:53:07'!
test02

	|transfer acc1 acc2|
	
	acc1 := ReceptiveAccount new register:(Deposit for: 150).
	acc2 := ReceptiveAccount new.
	transfer := Transfer with: 50 from: acc1 to: acc2.
	
	self assert: transfer value.
	! !

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 16:53:19'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 16:53:37' prior: 50620653!
test02

	|transfer acc1 acc2|
	
	acc1 := ReceptiveAccount new register:(Deposit for: 150).
	acc2 := ReceptiveAccount new.
	transfer := Transfer with: 50 from: acc1 to: acc2.
	
	self assert: transfer value equals: 50.
	! !

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 16:53:38'!
FAILURE!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 16:54:01'!
FAILURE!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 16:54:27'!
FAILURE!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 16:54:27'!
FAILURE!
!Transfer methodsFor: 'nil' stamp: 'mp 5/26/2023 16:55:36' overrides: 16902254!
value
	^50! !

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 16:55:46'!
FAILURE!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 16:55:47'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 16:56:40' prior: 50620665!
test02

	|transfer acc1 acc2|
	
	acc1 := ReceptiveAccount new register:(Deposit for: 150).
	acc2 := ReceptiveAccount new.
	transfer := Transfer with: 50 from: acc1 to: acc2.
	
	self assert: (transfer value = 50).
	! !

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 16:56:40'!
FAILURE!
!Transfer class methodsFor: 'instance creation' stamp: 'mp 5/26/2023 16:57:38' prior: 50620629!
with: anAmount from: aCreditorAccount to: aBeneficiaryAccount 
	
	aBeneficiaryAccount register: (Deposit for: anAmount).
	aCreditorAccount register: (Withdraw for: anAmount).
	^self new.
	! !

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 16:57:40'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 16:57:40'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 16:57:48'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 16:57:48'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 16:59:22' prior: 50620693!
test02

	|transfer acc1 acc2|
	
	acc1 := ReceptiveAccount new register:(Deposit for: 150).
	acc2 := ReceptiveAccount new.
	transfer := Transfer with: 50 from: acc1 to: acc2.
	
	self assert: transfer value equals: 50.
	! !

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 16:59:23'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 16:59:23'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 16:59:23'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 17:23:06'!
test03

	|transfer transactionDebit transactionCredit acc1 acc2|
	
	acc1 := ReceptiveAccount new.
	acc2 := ReceptiveAccount new.
	transfer := Transfer with: 50 from: acc1 to: acc2.
		
	transactionDebit := acc1 transactions first. 
	transactionCredit := acc2 transactions first.
	
	self assert: transactionDebit counterPart equals: transactionCredit.
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 17:23:24' prior: 50620743!
test03

	|transactionDebit transactionCredit acc1 acc2|
	
	acc1 := ReceptiveAccount new.
	acc2 := ReceptiveAccount new.
	Transfer with: 50 from: acc1 to: acc2.
		
	transactionDebit := acc1 transactions first. 
	transactionCredit := acc2 transactions first.
	
	self assert: transactionDebit counterPart equals: transactionCredit.
	! !

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 17:23:29'!
ERROR!

AccountTransaction subclass: #TransferOut
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferOut category: 'Portfolio-Solucion' stamp: 'mp 5/26/2023 17:27:51'!
AccountTransaction subclass: #TransferOut
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 17:28:21' prior: 50620758!
test03

	|transactionOut transactionCredit acc1 acc2|
	
	acc1 := ReceptiveAccount new.
	acc2 := ReceptiveAccount new.
	Transfer with: 50 from: acc1 to: acc2.
		
	transactionOut := acc1 transactions first. 
	transactionCredit := acc2 transactions first.
	
	self assert: transactionOut counterPart equals: transactionCredit.
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 17:28:41' prior: 50620787!
test03

	|transactionOut transactionIn acc1 acc2|
	
	acc1 := ReceptiveAccount new.
	acc2 := ReceptiveAccount new.
	Transfer with: 50 from: acc1 to: acc2.
		
	transactionOut := acc1 transactions first. 
	transactionIn := acc2 transactions first.
	
	self assert: transactionOut counterPart equals: transactionIn.
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'mp 5/26/2023 17:31:57' prior: 50620706!
with: anAmount from: aCreditorAccount to: aBeneficiaryAccount 
	
	aCreditorAccount register: (TransferOut for: anAmount).
	aBeneficiaryAccount register: (Deposit for: anAmount).	
	^self new.
	! !
!TransferOut class methodsFor: 'nil' stamp: 'mp 5/26/2023 17:32:44'!
for: aValue

	^ self new initializeFor: aValue ! !
!TransferOut methodsFor: 'nil' stamp: 'mp 5/26/2023 17:32:56'!
initializeFor: aValue

	value := aValue ! !
!TransferOut class methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 17:36:29'!
for: aValue andCounterPart: aTransaction

	^ self new initializeFor: aValue andCounterpart: aTransaction .! !

!classDefinition: #TransferOut category: 'Portfolio-Solucion' stamp: 'mp 5/26/2023 17:36:57'!
AccountTransaction subclass: #TransferOut
	instanceVariableNames: 'value counterPart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 17:36:56'!
initializeFor: aValue andCounterpart: aTransaction 

	value := aValue .
	counterPart := aTransaction.! !

!methodRemoval: TransferOut #initializeFor: stamp: 'mp 5/26/2023 17:37:10'!
initializeFor: aValue

	value := aValue !
!Transfer class methodsFor: 'instance creation' stamp: 'mp 5/26/2023 17:39:45' prior: 50620814!
with: anAmount from: aCreditorAccount to: aBeneficiaryAccount 

	|aTransferBenefits|
	
	aTransferBenefits := Deposit for: anAmount.
	
	aCreditorAccount register: (TransferOut for: anAmount andCounterPart: aTransferBenefits).
	aBeneficiaryAccount register: aTransferBenefits.	
	^self new.
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'mp 5/26/2023 17:39:49' prior: 50620857!
with: anAmount from: aCreditorAccount to: aBeneficiaryAccount 

	|aTransferBenefits|
	
	aTransferBenefits := Deposit for: anAmount.
	
	aCreditorAccount register: (TransferOut for: anAmount andCounterPart: aTransferBenefits).
	aBeneficiaryAccount register: aTransferBenefits.	
	
	^self new.
	! !

!methodRemoval: TransferOut class #for: stamp: 'mp 5/26/2023 17:40:08'!
for: aValue

	^ self new initializeFor: aValue !

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 17:40:15'!
ERROR!

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 17:40:15'!
ERROR!
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 17:40:38'!
counterpart

	^counterPart ! !

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 17:40:40'!
ERROR!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 17:40:40'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 17:40:40'!
ERROR!

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 17:40:44'!
ERROR!
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 17:41:18' overrides: 50620511!
affectBalance: aBalance

	^aBalance + value ! !
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 17:41:35' overrides: 50620508!
value

	^ value! !

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 17:42:03'!
ERROR!

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 17:42:03'!
ERROR!
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 17:42:51'!
counterPart

	^counterPart ! !

!methodRemoval: TransferOut #counterpart stamp: 'mp 5/26/2023 17:42:51'!
counterpart

	^counterPart !

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 17:42:56'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 17:42:59'!
FAILURE!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 17:42:59'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 17:42:59'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 17:42:59'!
FAILURE!
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 17:43:16' prior: 50620905 overrides: 50620511!
affectBalance: aBalance

	^aBalance - value ! !

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 17:43:20'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 17:43:20'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 17:43:20'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 17:44:17'!
test04

	|transactionOut transactionIn acc1 acc2|
	
	acc1 := ReceptiveAccount new.
	acc2 := ReceptiveAccount new.
	Transfer with: 50 from: acc1 to: acc2.
		
	transactionOut := acc1 transactions first. 
	transactionIn := acc2 transactions first.
	
	self assert: transactionIn counterPart equals: transactionOut.
	! !

!testRun: #TransferTest #test04 stamp: 'mp 5/26/2023 17:44:19'!
ERROR!

AccountTransaction subclass: #TransferIn
	instanceVariableNames: 'value counterPart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferIn category: 'Portfolio-Solucion' stamp: 'mp 5/26/2023 17:44:46'!
AccountTransaction subclass: #TransferIn
	instanceVariableNames: 'value counterPart'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferIn methodsFor: 'nil' stamp: 'mp 5/26/2023 17:45:01' overrides: 50620511!
affectBalance: aBalance

	^aBalance + value ! !
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 17:45:09'!
counterPart

	^counterPart ! !
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 17:45:31' overrides: 50620508!
value

	^ value! !

!testRun: #TransferTest #test04 stamp: 'mp 5/26/2023 18:18:06'!
ERROR!
!Transfer class methodsFor: 'instance creation' stamp: 'mp 5/26/2023 18:20:47' prior: 50620870!
with: anAmount from: aCreditorAccount to: aBeneficiaryAccount 

	|aTransferBenefits|
	
	aTransferBenefits := TransferIn for: anAmount.
	
	aCreditorAccount register: (TransferOut for: anAmount andCounterPart: aTransferBenefits).
	aBeneficiaryAccount register: aTransferBenefits.	
	
	^self new.
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'mp 5/26/2023 18:23:15' prior: 50620994!
with: anAmount from: aCreditorAccount to: aBeneficiaryAccount 
	
	^self new initializeWith: anAmount from: aCreditorAccount to: aBeneficiaryAccount .
	! !
!Transfer class methodsFor: 'instance creation' stamp: 'mp 5/26/2023 18:23:50' prior: 50621007!
with: anAmount from: aCreditorAccount to: aBeneficiaryAccount 
	
	^self new initializeWith: anAmount from: aCreditorAccount to: aBeneficiaryAccount .
	! !

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'mp 5/26/2023 18:26:09'!
Object subclass: #Transfer
	instanceVariableNames: 'amount creditorAccount beneficiaryAccount value transferIn'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'mp 5/26/2023 18:26:10'!
Object subclass: #Transfer
	instanceVariableNames: 'amount creditorAccount beneficiaryAccount value transferIn transferOut'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:26:08'!
initializeWith: anAmount from: aCreditorAccount to: aBeneficiaryAccount 
	value := anAmount.
	transferIn := TransferIn of: self.
	transferOut := TransferOut of: self.! !

!testRun: #TransferTest #test04 stamp: 'mp 5/26/2023 18:26:24'!
ERROR!

!testRun: #TransferTest #test04 stamp: 'mp 5/26/2023 18:26:24'!
ERROR!
!TransferOut class methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:27:57'!
of: aTransfer

	^ self new initializeFor: aTransfer .! !
!TransferIn class methodsFor: 'nil' stamp: 'mp 5/26/2023 18:28:04'!
of: aTransfer

	^ self new initializeFor: aTransfer .! !

!methodRemoval: TransferOut class #for:andCounterPart: stamp: 'mp 5/26/2023 18:28:10'!
for: aValue andCounterPart: aTransaction

	^ self new initializeFor: aValue andCounterpart: aTransaction .!

!classDefinition: #TransferOut category: 'Portfolio-Solucion' stamp: 'mp 5/26/2023 18:28:43'!
AccountTransaction subclass: #TransferOut
	instanceVariableNames: 'value counterPart transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:28:42'!
of: aTransfer

	transfer := aTransfer .! !
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:31:44' prior: 50620918!
counterPart

	^transfer counterPartOfTransferOut.! !

!classDefinition: #TransferIn category: 'Portfolio-Solucion' stamp: 'mp 5/26/2023 18:32:03'!
AccountTransaction subclass: #TransferIn
	instanceVariableNames: 'value counterPart transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:32:02' prior: 50620983!
counterPart

	^transfer counterPartOfTransferOut.! !
!TransferOut class methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:33:04'!
initializeFor: aTransfer

	^ self new initializeFor: aTransfer .! !
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:33:04'!
initializeFor: aTransfer

	transfer := aTransfer .! !

!methodRemoval: TransferOut class #of: stamp: 'mp 5/26/2023 18:33:04'!
of: aTransfer

	^ self new initializeFor: aTransfer .!

!methodRemoval: TransferOut #of: stamp: 'mp 5/26/2023 18:33:04'!
of: aTransfer

	transfer := aTransfer .!
!TransferOut class methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:33:24'!
of: aTransfer

	^ self new initializeFor: aTransfer .! !

!methodRemoval: TransferOut class #initializeFor: stamp: 'mp 5/26/2023 18:33:29'!
initializeFor: aTransfer

	^ self new initializeFor: aTransfer .!

!methodRemoval: TransferOut #initializeFor:andCounterpart: stamp: 'mp 5/26/2023 18:33:47'!
initializeFor: aValue andCounterpart: aTransaction 

	value := aValue .
	counterPart := aTransaction.!
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:33:57' prior: 50620910 overrides: 50620508!
value

	^ transfer value! !
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:34:16' prior: 50620939 overrides: 50620511!
affectBalance: aBalance

	^aBalance - self value .! !
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:34:39'!
initializeFor: aTransfer

	transfer := aTransfer .! !
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:34:48' prior: 50621095!
counterPart

	^transfer counterPartOfTransferIn.! !
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:34:59' prior: 50620988 overrides: 50620508!
value

	^ transfer value! !
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:35:07' prior: 50620979 overrides: 50620511!
affectBalance: aBalance

	^aBalance + self value ! !
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:35:15' prior: 50621160 overrides: 50620511!
affectBalance: aBalance

	^aBalance + (self value) ! !
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:35:34' prior: 50621139 overrides: 50620511!
affectBalance: aBalance

	^aBalance - (self value) .! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:36:13' prior: 50620684 overrides: 16902254!
value
	^value! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:36:34'!
counterPartOfTransferOut
	^transferIn ! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:36:43'!
counterPartOfTransferIn
	^transferOut! !

!testRun: #TransferTest #test04 stamp: 'mp 5/26/2023 18:36:48'!
ERROR!

!testRun: #TransferTest #test04 stamp: 'mp 5/26/2023 18:36:48'!
ERROR!

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 18:36:57'!
FAILURE!

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 18:37:23'!
FAILURE!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 18:37:23'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 18:37:23'!
ERROR!

!testRun: #TransferTest #test04 stamp: 'mp 5/26/2023 18:37:23'!
ERROR!

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 18:37:29'!
FAILURE!

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 18:38:32'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:41:56' prior: 50621041!
initializeWith: anAmount from: aCreditorAccount to: aBeneficiaryAccount 

	value := anAmount.
	transferIn := TransferIn of: self.
	transferOut := TransferOut of: self.
	
	aCreditorAccount register: transferOut .
	aBeneficiaryAccount register: transferIn.! !

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 18:41:59'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 18:42:00'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 18:42:00'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'mp 5/26/2023 18:42:00'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 18:42:07'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 18:42:07'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 18:42:07'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'mp 5/26/2023 18:42:08'!
PASSED!

!classDefinition: #TransferIn category: 'Portfolio-Solucion' stamp: 'mp 5/26/2023 18:45:00'!
AccountTransaction subclass: #TransferIn
	instanceVariableNames: 'counterPart transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferIn category: 'Portfolio-Solucion' stamp: 'mp 5/26/2023 18:45:00'!
AccountTransaction subclass: #TransferIn
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferOut category: 'Portfolio-Solucion' stamp: 'mp 5/26/2023 18:45:07'!
AccountTransaction subclass: #TransferOut
	instanceVariableNames: 'counterPart transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferOut category: 'Portfolio-Solucion' stamp: 'mp 5/26/2023 18:45:07'!
AccountTransaction subclass: #TransferOut
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 18:45:11'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 18:45:12'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 18:45:12'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'mp 5/26/2023 18:45:12'!
PASSED!

AccountTransaction subclass: #TransferPart
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferPart category: 'Portfolio-Solucion' stamp: 'mp 5/26/2023 18:47:26'!
AccountTransaction subclass: #TransferPart
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferPart subclass: #TransferIn
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferPart subclass: #TransferIn
	instanceVariableNames: 'transfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferIn category: 'Portfolio-Solucion' stamp: 'mp 5/26/2023 18:48:49'!
AccountTransaction subclass: #TransferIn
	instanceVariableNames: 'transfer2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:48:49' prior: 50621155 overrides: 50620508!
value

	^ transfer2 value! !
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:48:49' prior: 50621144!
initializeFor: aTransfer

	transfer2 := aTransfer .! !
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:48:49' prior: 50621149!
counterPart

	^transfer2 counterPartOfTransferIn.! !

!classDefinition: #TransferOut category: 'Portfolio-Solucion' stamp: 'mp 5/26/2023 18:49:02'!
AccountTransaction subclass: #TransferOut
	instanceVariableNames: 'transfer2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:49:02' prior: 50621134 overrides: 50620508!
value

	^ transfer2 value! !
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:49:02' prior: 50621105!
initializeFor: aTransfer

	transfer2 := aTransfer .! !
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:49:02' prior: 50621082!
counterPart

	^transfer2 counterPartOfTransferOut.! !

TransferPart subclass: #TransferOut
	instanceVariableNames: 'transfer2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferOut category: 'Portfolio-Solucion' stamp: 'mp 5/26/2023 18:49:15'!
TransferPart subclass: #TransferOut
	instanceVariableNames: 'transfer2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TransferPart subclass: #TransferIn
	instanceVariableNames: 'transfer2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferIn category: 'Portfolio-Solucion' stamp: 'mp 5/26/2023 18:49:22'!
TransferPart subclass: #TransferIn
	instanceVariableNames: 'transfer2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferPart methodsFor: 'nil' stamp: 'mp 5/26/2023 18:49:37' overrides: 50620511!
affectBalance: aBalance

	self subclassResponsibility ! !
!TransferPart methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:49:53'!
counterPart

	self subclassResponsibility ! !
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:53:10' prior: 50621319!
initializeFor: aTransfer

	transfer := aTransfer .! !
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:53:19' prior: 50621315 overrides: 50620508!
value

	^ transfer value! !

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 18:54:45'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 18:54:45'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 18:54:45'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'mp 5/26/2023 18:54:46'!
ERROR!

!testRun: #TransferTest #test04 stamp: 'mp 5/26/2023 18:54:46'!
ERROR!
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:55:01' prior: 50621324 overrides: 50621382!
counterPart

	^transfer counterPartOfTransferIn.! !

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 18:55:08'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 18:55:08'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 18:55:08'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'mp 5/26/2023 18:55:08'!
PASSED!
!TransferPart methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:55:23'!
initializeFor: aTransfer

	transfer := aTransfer .! !

!methodRemoval: TransferIn #initializeFor: stamp: 'mp 5/26/2023 18:55:23'!
initializeFor: aTransfer

	transfer := aTransfer .!
!TransferPart methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:55:27' overrides: 50620508!
value

	^ transfer value! !

!methodRemoval: TransferIn #value stamp: 'mp 5/26/2023 18:55:27'!
value

	^ transfer value!

!methodRemoval: TransferOut #initializeFor: stamp: 'mp 5/26/2023 18:55:45'!
initializeFor: aTransfer

	transfer2 := aTransfer .!

!methodRemoval: TransferOut #value stamp: 'mp 5/26/2023 18:55:51'!
value

	^ transfer2 value!
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 18:55:58' prior: 50621347 overrides: 50621382!
counterPart

	^transfer counterPartOfTransferOut.! !

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 18:56:02'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 18:56:02'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 18:56:02'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'mp 5/26/2023 18:56:02'!
PASSED!

!classDefinition: #TransferIn category: 'Portfolio-Solucion' stamp: 'mp 5/26/2023 18:56:08'!
TransferPart subclass: #TransferIn
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferOut category: 'Portfolio-Solucion' stamp: 'mp 5/26/2023 18:56:13'!
TransferPart subclass: #TransferOut
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 18:56:23'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 18:56:23'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 18:56:23'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'mp 5/26/2023 18:56:23'!
PASSED!
!AccountTransaction methodsFor: 'value' stamp: 'mp 5/26/2023 18:57:07' prior: 50620508 overrides: 16902254!
value 

	self subclassResponsibility ! !

!methodRemoval: TransferPart #affectBalance: stamp: 'mp 5/26/2023 18:58:39'!
affectBalance: aBalance

	self subclassResponsibility !

!testRun: #TransferTest #test04 stamp: 'mp 5/26/2023 18:58:51'!
PASSED!
!Transfer class methodsFor: 'instance creation' stamp: 'mp 5/26/2023 19:03:06' prior: 50621015!
with: anAmount from: aCreditorAccount to: aBeneficiaryAccount 
	
	^self new initializeWith: anAmount from: aCreditorAccount to: aBeneficiaryAccount .
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 19:05:59'!
test05

	|transactionOut acc1 acc2|
	
	acc1 := ReceptiveAccount new.
	acc2 := ReceptiveAccount new.
	
	
	
	self 
		should: [Transfer with: -50 from: acc1 to: acc2.]
		rise: Error
		withExceptionDo: [:error | 
			self assert: Transfer invalidAmmountErrorDescription equals: error messageText.].
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 19:06:28' prior: 50621507!
test05

	|acc1 acc2|
	
	acc1 := ReceptiveAccount new.
	acc2 := ReceptiveAccount new.
	
	
	
	self 
		should: [Transfer with: -50 from: acc1 to: acc2.]
		raise: Error
		withExceptionDo: [:error | 
			self assert: Transfer invalidAmmountErrorDescription equals: error messageText.].
	
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 19:06:40' prior: 50621520!
test05

	|acc1 acc2|
	
	acc1 := ReceptiveAccount new.
	acc2 := ReceptiveAccount new.
	
	self 
		should: [Transfer with: -50 from: acc1 to: acc2.]
		raise: Error
		withExceptionDo: [:error | 
			self assert: Transfer invalidAmmountErrorDescription equals: error messageText.].
	
	! !

!testRun: #TransferTest #test05 stamp: 'mp 5/26/2023 19:06:41'!
FAILURE!
!Transfer class methodsFor: 'nil' stamp: 'mp 5/26/2023 19:07:37'!
invalidAmmountErrorDescription
	
	^'Ammount have to be positive'! !
!Transfer class methodsFor: 'instance creation' stamp: 'mp 5/26/2023 19:08:58' prior: 50621499!
with: anAmount from: aCreditorAccount to: aBeneficiaryAccount 

	(anAmount <= 0) ifTrue: [self error: self invalidAmmountErrorDescription ].
	
	^self new initializeWith: anAmount from: aCreditorAccount to: aBeneficiaryAccount .
	! !
!Transfer class methodsFor: 'error description' stamp: 'mp 5/26/2023 19:09:13'!
invalidAmountErrorDescription
	
	^'Ammount have to be positive'! !
!Transfer class methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 19:09:13' prior: 50621552!
with: anAmount from: aCreditorAccount to: aBeneficiaryAccount 

	(anAmount <= 0) ifTrue: [self error: self invalidAmountErrorDescription ].
	
	^self new initializeWith: anAmount from: aCreditorAccount to: aBeneficiaryAccount .
	! !

!methodRemoval: Transfer class #invalidAmmountErrorDescription stamp: 'mp 5/26/2023 19:09:13'!
invalidAmmountErrorDescription
	
	^'Ammount have to be positive'!
!Transfer class methodsFor: 'error description' stamp: 'mp 5/26/2023 19:09:21' prior: 50621562!
invalidAmountErrorDescription
	
	^'Amount have to be positive'! !

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 19:09:23'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 19:09:24'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 19:09:24'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'mp 5/26/2023 19:09:24'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'mp 5/26/2023 19:09:24'!
ERROR!

!testRun: #TransferTest #test05 stamp: 'mp 5/26/2023 19:09:24'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 19:09:34' prior: 50621532!
test05

	|acc1 acc2|
	
	acc1 := ReceptiveAccount new.
	acc2 := ReceptiveAccount new.
	
	self 
		should: [Transfer with: -50 from: acc1 to: acc2.]
		raise: Error
		withExceptionDo: [:error | 
			self assert: Transfer invalidAmountErrorDescription equals: error messageText.].
	
	! !

!testRun: #TransferTest #test05 stamp: 'mp 5/26/2023 19:09:35'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 19:09:35'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 19:09:35'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 19:09:36'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'mp 5/26/2023 19:09:36'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'mp 5/26/2023 19:09:36'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'mp 5/26/2023 19:09:52' prior: 50621604!
test05

	|acc1 acc2|
	
	acc1 := ReceptiveAccount new.
	acc2 := ReceptiveAccount new.
	
	self 
		should: [Transfer with: 0 from: acc1 to: acc2.]
		raise: Error
		withExceptionDo: [:error | 
			self assert: Transfer invalidAmountErrorDescription equals: error messageText.].
	
	! !

!testRun: #TransferTest #test05 stamp: 'mp 5/26/2023 19:09:54'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/26/2023 19:09:54'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'mp 5/26/2023 19:09:54'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'mp 5/26/2023 19:09:54'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'mp 5/26/2023 19:09:54'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'mp 5/26/2023 19:09:54'!
PASSED!

----SNAPSHOT----(26 May 2023 19:14:53) CuisUniversity-5799.image priorSource: 9247644!

----QUIT----(26 May 2023 19:16:15) CuisUniversity-5799.image priorSource: 9280190!

----STARTUP---- (28 May 2023 18:30:26) as F:\Manuel\Trabajos\EXACTAS\Ingenieria de Software I\CuisUniversity 26-05-23\Portfolio 2\CuisUniversity-5799.image!


TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'mp 5/28/2023 18:40:20'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

#('deposito' 'retiro')!

#()!
!ReportTest methodsFor: 'nil' stamp: 'mp 5/28/2023 18:45:15'!
test01

	|acc1|
	
	acc1 := ReceptiveAccount new.	
	
	self assert: acc1 accountSummary equals: #('Balance = 0').! !

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 18:46:04'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 18:46:12'!
accountSummary
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 18:46:30' prior: 50621688!
accountSummary
	^#('Balance = 0')! !

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 18:46:32'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 18:46:33'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 18:46:35'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 18:47:17'!
test02

	|acc1|
	
	acc1 := ReceptiveAccount new register: (Deposit for: 50).	
	
	self assert: acc1 accountSummary equals: #('Balance = 0').! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 18:48:24' prior: 50621704!
test02

	|acc1 reporte|
	
	acc1 := ReceptiveAccount new register: (Deposit for: 50).	
	reporte := #('Deposito por 50.' 'Balance = 50').
	
	self assert: acc1 accountSummary equals: reporte.! !

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 18:48:28'!
FAILURE!

'ar ' + 2!

'ar ' + 2!

'ar ' , 2!

'asd', (50 asString )!

'asd ', (50 asString )!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:02:11' prior: 50621693!
accountSummary
	transactions ifEmpty: [	^#('Balance = 0')].! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:02:29' prior: 50621727!
accountSummary
	transactions ifEmpty: [	^#('Balance = 0')].
	^#('Deposito por 50.' 'Balance = 50').! !

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 19:02:35'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 19:02:35'!
PASSED!

	acc1 := ReceptiveAccount new register: (Deposit for: 50).	!

	acc1 register: (Withdraw for: 100).!

	acc1 balance!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:10:54'!
test03

	|acc1 reporte|
	
	acc1 := ReceptiveAccount new register: (Withdraw for: 100).	
	reporte := #('Extracción por 100.' 'Balance = -100').
	
	self assert: acc1 accountSummary equals: reporte.! !

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 19:10:57'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:16:51' prior: 50621733!
accountSummary
	|firstTransaction summary|

	transactions ifEmpty: [	^#('Balance = 0')].
	
	summary := #().
	firstTransaction := transactions first.
	
	(firstTransaction isKindOf: Deposit) 		ifTrue: [summary add: 'Depósito por 50.'].
		
	(firstTransaction isKindOf: Withdraw ) 		ifTrue: [summary add: 'Extracción por 100.'].
	
	summary add: ('Balance = ', self balance asString ).
	^summary.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:16:54' prior: 50621759!
accountSummary
	|firstTransaction summary|

	transactions ifEmpty: [	^#('Balance = 0')].
	
	summary := #().
	firstTransaction := transactions first.
	
	(firstTransaction isKindOf: Deposit) 		ifTrue: [summary add: 'Depósito por 50.'].
		
	(firstTransaction isKindOf: Withdraw ) 		ifTrue: [summary add: 'Extracción por 100.'].
	
	summary add: ('Balance = ', self balance asString ).
	
	^summary.! !

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 19:17:01'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:18:42' prior: 50621775!
accountSummary
	|firstTransaction summary|

	transactions ifEmpty: [	^#('Balance = 0')].
	
	summary := OrderedCollection new.
	firstTransaction := transactions first.
	
	(firstTransaction isKindOf: Deposit) 		ifTrue: [summary add: 'Depósito por 50.'].
		
	(firstTransaction isKindOf: Withdraw ) 		ifTrue: [summary add: 'Extracción por 100.'].
	
	summary add: ('Balance = ', self balance asString ).
	
	^summary asArray .! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mp 5/28/2023 19:18:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mp 5/28/2023 19:18:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mp 5/28/2023 19:18:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mp 5/28/2023 19:18:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mp 5/28/2023 19:18:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mp 5/28/2023 19:18:43'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mp 5/28/2023 19:18:43'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 19:18:50'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 19:18:50'!
FAILURE!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 19:18:50'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 19:18:51'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:19:27' prior: 50621712!
test02

	|acc1 reporte|
	
	acc1 := ReceptiveAccount new register: (Deposit for: 50).	
	reporte := #('Depósito por 50.' 'Balance = 50').
	
	self assert: acc1 accountSummary equals: reporte.! !

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 19:19:29'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 19:19:29'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 19:19:29'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:21:28'!
test04

	|acc1 acc2 reporte|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	Transfer with: 20 from: acc1 to: acc2.
	
	reporte := #('Salida por transferencia de 20.' 'Balance = -20').
	
	self assert: acc1 accountSummary equals: reporte.! !

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 19:21:30'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:22:16' prior: 50621793!
accountSummary
	|firstTransaction summary|

	transactions ifEmpty: [	^#('Balance = 0')].
	
	summary := OrderedCollection new.
	firstTransaction := transactions first.
	
	(firstTransaction isKindOf: Deposit) 		ifTrue: [summary add: 'Depósito por 50.'].
		
	(firstTransaction isKindOf: Withdraw ) 		ifTrue: [summary add: 'Extracción por 100.'].
	
	(firstTransaction isKindOf: TransferIn ) 		ifTrue: [summary add: 'Salida por transferencia de 20.'].
	
	summary add: ('Balance = ', self balance asString ).
	
	^summary asArray .! !

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 19:22:35'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:23:14' prior: 50621875!
accountSummary
	|firstTransaction summary|

	transactions ifEmpty: [	^#('Balance = 0')].
	
	summary := OrderedCollection new.
	firstTransaction := transactions first.
	
	(firstTransaction isKindOf: Deposit) 		ifTrue: [summary add: 'Depósito por 50.'].
		
	(firstTransaction isKindOf: Withdraw ) 		ifTrue: [summary add: 'Extracción por 100.'].
	
	(firstTransaction isKindOf: TransferOut ) 		ifTrue: [summary add: 'Salida por transferencia de 20.'].
	
	summary add: ('Balance = ', self balance asString ).
	
	^summary asArray .! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mp 5/28/2023 19:23:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mp 5/28/2023 19:23:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mp 5/28/2023 19:23:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mp 5/28/2023 19:23:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mp 5/28/2023 19:23:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mp 5/28/2023 19:23:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mp 5/28/2023 19:23:15'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 19:23:20'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 19:23:20'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 19:23:20'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 19:23:20'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 19:23:20'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:24:11'!
test05

	|acc1 acc2 reporte|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	Transfer with: 30 from: acc2 to: acc1.
	
	reporte := #('Entrada por transferencia de 30.' 'Balance = 30').
	
	self assert: acc1 accountSummary equals: reporte.! !

!testRun: #ReportTest #test05 stamp: 'mp 5/28/2023 19:24:12'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:24:33' prior: 50621897!
accountSummary
	|firstTransaction summary|

	transactions ifEmpty: [	^#('Balance = 0')].
	
	summary := OrderedCollection new.
	firstTransaction := transactions first.
	
	(firstTransaction isKindOf: Deposit) 		ifTrue: [summary add: 'Depósito por 50.'].
		
	(firstTransaction isKindOf: Withdraw ) 		ifTrue: [summary add: 'Extracción por 100.'].
	
	(firstTransaction isKindOf: TransferOut ) 		ifTrue: [summary add: 'Salida por transferencia de 20.'].
	
	(firstTransaction isKindOf: TransferIn ) 		ifTrue: [summary add: 'Entrada por transferencia de 30.'].
	
	summary add: ('Balance = ', self balance asString ).
	
	^summary asArray .! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mp 5/28/2023 19:24:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mp 5/28/2023 19:24:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mp 5/28/2023 19:24:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mp 5/28/2023 19:24:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mp 5/28/2023 19:24:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mp 5/28/2023 19:24:37'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mp 5/28/2023 19:24:37'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/28/2023 19:24:41'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 19:24:41'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 19:24:41'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 19:24:41'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 19:24:41'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/28/2023 19:24:41'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:28:37'!
test06

	|acc1 acc2 reporte|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	
	acc1 register: (Deposit for: 100).
	acc1 register: (Withdraw for: 50).
	
	Transfer with: 20 from: acc1 to: acc2.
	Transfer with: 30 from: acc2 to: acc1.
	
	reporte := #(
		'Depósito por 100.'
		'Extracción por 50.'
		'Salida por transferencia de 20.'
		'Entrada por transferencia de 30.'
		'Balance = 60'
		).
	
	self assert: acc1 accountSummary equals: reporte.! !

!testRun: #ReportTest #test06 stamp: 'mp 5/28/2023 19:28:39'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:29:59' prior: 50621968!
accountSummary
	|summary|

	transactions ifEmpty: [	^#('Balance = 0')].
	
	summary := OrderedCollection new.
	transactions do: [:transaction |	
			(transaction isKindOf: Deposit) 		ifTrue: [summary add: 'Depósito por 50.'].			
			(transaction isKindOf: Withdraw ) 		ifTrue: [summary add: 'Extracción por 100.'].		
			(transaction isKindOf: TransferOut ) 		ifTrue: [summary add: 'Salida por transferencia de 20.'].		
			(transaction isKindOf: TransferIn ) 		ifTrue: [summary add: 'Entrada por transferencia de 30.'].
		].
	
	summary add: ('Balance = ', self balance asString ).
	
	^summary asArray .! !

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 19:30:06'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 19:30:06'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 19:30:06'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 19:30:06'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/28/2023 19:30:06'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/28/2023 19:30:06'!
FAILURE!

!testRun: #ReportTest #test06 stamp: 'mp 5/28/2023 19:30:06'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:33:07' prior: 50622050!
accountSummary
	|summary|

	transactions ifEmpty: [	^#('Balance = 0')].
	
	summary := OrderedCollection new.
	transactions do: [:transaction |	
			(transaction isKindOf: Deposit) 		ifTrue: [summary add: ('Depósito por ', transaction value asString , '.')].			
			(transaction isKindOf: Withdraw ) 		ifTrue: [summary add: 'Extracción por ', transaction value asString , '.'].		
			(transaction isKindOf: TransferOut ) 		ifTrue: [summary add: 'Salida por transferencia de ', transaction value asString , '.'].		
			(transaction isKindOf: TransferIn ) 		ifTrue: [summary add: 'Entrada por transferencia de ', transaction value asString , '.'].
		].
	
	summary add: ('Balance = ', self balance asString ).
	
	^summary asArray .! !

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 19:33:15'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 19:33:16'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 19:33:16'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 19:33:16'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/28/2023 19:33:16'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/28/2023 19:33:16'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:33:52' prior: 50622088!
accountSummary
	|summary|
	
	summary := OrderedCollection new.
	transactions do: [:transaction |	
			(transaction isKindOf: Deposit) 		ifTrue: [summary add: ('Depósito por ', transaction value asString , '.')].			
			(transaction isKindOf: Withdraw ) 		ifTrue: [summary add: 'Extracción por ', transaction value asString , '.'].		
			(transaction isKindOf: TransferOut ) 		ifTrue: [summary add: 'Salida por transferencia de ', transaction value asString , '.'].		
			(transaction isKindOf: TransferIn ) 		ifTrue: [summary add: 'Entrada por transferencia de ', transaction value asString , '.'].
		].
	
	summary add: ('Balance = ', self balance asString ).
	
	^summary asArray .! !

!testRun: #ReportTest #test06 stamp: 'mp 5/28/2023 19:33:56'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 19:33:58'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 19:33:58'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 19:33:58'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 19:33:58'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/28/2023 19:33:58'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/28/2023 19:33:58'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:47:32'!
test07

	|acc1|
	
	acc1 := ReceptiveAccount new.	
	
	self assert: acc1 transferNet equals: 0.! !

!testRun: #ReportTest #test07 stamp: 'mp 5/28/2023 19:47:33'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:47:38'!
transferNet
	self shouldBeImplemented.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:47:48' prior: 50622176!
transferNet
	^0! !

!testRun: #ReportTest #test07 stamp: 'mp 5/28/2023 19:47:50'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 19:47:50'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 19:47:50'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 19:47:50'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 19:47:50'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/28/2023 19:47:50'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/28/2023 19:47:50'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/28/2023 19:47:50'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:48:31'!
test08

	|acc1 acc2|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	Transfer with: 30 from: acc2 to: acc1.
	
	
	self assert: acc1 transferNet equals: 30.! !

!testRun: #ReportTest #test08 stamp: 'mp 5/28/2023 19:48:35'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:49:26' prior: 50622181!
transferNet
	transactions ifEmpty: [^0].
	^30! !

!testRun: #ReportTest #test08 stamp: 'mp 5/28/2023 19:49:30'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 19:49:30'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 19:49:30'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 19:49:30'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 19:49:30'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/28/2023 19:49:30'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/28/2023 19:49:30'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/28/2023 19:49:30'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/28/2023 19:49:30'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:50:26'!
test09

	|acc1 acc2|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	Transfer with: 30 from: acc1 to: acc2.
	
	
	
	self assert: acc1 transferNet equals: -30.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:50:31' prior: 50622237!
test09

	|acc1 acc2|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	Transfer with: 30 from: acc1 to: acc2.
	
	self assert: acc1 transferNet equals: -30.! !

!testRun: #ReportTest #test09 stamp: 'mp 5/28/2023 19:50:33'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:52:49' prior: 50622213!
transferNet
	transactions ifEmpty: [^0].
	(transactions first isKindOf: TransferIn) ifTrue: [^30].
	(transactions first isKindOf: TransferOut) ifTrue: [^-30]! !

!testRun: #ReportTest #test09 stamp: 'mp 5/28/2023 19:53:30'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 19:53:30'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 19:53:30'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 19:53:30'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 19:53:30'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/28/2023 19:53:30'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/28/2023 19:53:30'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/28/2023 19:53:30'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/28/2023 19:53:30'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/28/2023 19:53:30'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:54:14'!
test10

	|acc1 |
	
	acc1 := ReceptiveAccount new.	
	acc1 register: (Deposit for: 50).
	acc1 register: (Withdraw for: 100).
	
	self assert: acc1 transferNet equals: 0.! !

!testRun: #ReportTest #test10 stamp: 'mp 5/28/2023 19:54:17'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:55:00' prior: 50622257!
transferNet
	transactions ifEmpty: [^0].
	(transactions first isKindOf: TransferIn) ifTrue: [^30].
	(transactions first isKindOf: TransferOut) ifTrue: [^-30].
	^0! !

!testRun: #ReportTest #test10 stamp: 'mp 5/28/2023 19:55:02'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 19:55:02'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 19:55:02'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 19:55:02'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 19:55:02'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/28/2023 19:55:02'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/28/2023 19:55:02'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/28/2023 19:55:02'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/28/2023 19:55:02'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/28/2023 19:55:02'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/28/2023 19:55:02'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 19:56:10'!
test11

	|acc1 acc2|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	Transfer with: 30 from: acc1 to: acc2.
	Transfer with: 50 from: acc1 to: acc2.
	Transfer with: 20 from: acc2 to: acc1.
	
	self assert: acc1 transferNet equals: -60.! !

!testRun: #ReportTest #test11 stamp: 'mp 5/28/2023 19:56:12'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 20:00:05' prior: 50622298!
transferNet
	^transactions inject: 0 into: [:acum :transaction | 
		(transaction isKindOf: TransferIn) ifTrue: [acum + transaction value].
		(transaction isKindOf: TransferOut) ifTrue: [acum - transaction value].].
	! !

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 20:00:14'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 20:00:14'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 20:00:14'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 20:00:14'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/28/2023 20:00:14'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/28/2023 20:00:14'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/28/2023 20:00:14'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/28/2023 20:00:14'!
FAILURE!

!testRun: #ReportTest #test09 stamp: 'mp 5/28/2023 20:00:14'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/28/2023 20:00:14'!
FAILURE!

!testRun: #ReportTest #test11 stamp: 'mp 5/28/2023 20:00:14'!
FAILURE!

!testRun: #ReportTest #test08 stamp: 'mp 5/28/2023 20:00:20'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 20:02:39' prior: 50622345!
transferNet
	^transactions inject: 0 into: [:acum :transaction | 
		(transaction isKindOf: TransferIn) 
			ifTrue: [acum + transaction value] 
			ifFalse:[(transaction isKindOf: TransferOut) 
						ifTrue: [acum - transaction value]
						ifFalse: [acum]]
		].
	! !

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 20:02:43'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 20:02:43'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 20:02:43'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 20:02:43'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/28/2023 20:02:43'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/28/2023 20:02:43'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/28/2023 20:02:43'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/28/2023 20:02:43'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/28/2023 20:02:43'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/28/2023 20:02:43'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/28/2023 20:02:43'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 20:02:59' prior: 50622382!
transferNet
	^transactions inject: 0 into: [:acum :transaction | 
		(transaction isKindOf: TransferIn) 
			ifTrue: [acum + transaction value] 
			ifFalse:[(transaction isKindOf: TransferOut) 
						ifTrue: [acum - transaction value]]
		].
	! !

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 20:03:04'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 20:03:04'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 20:03:04'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 20:03:04'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/28/2023 20:03:04'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/28/2023 20:03:04'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/28/2023 20:03:04'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/28/2023 20:03:04'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/28/2023 20:03:04'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/28/2023 20:03:04'!
FAILURE!

!testRun: #ReportTest #test11 stamp: 'mp 5/28/2023 20:03:04'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/28/2023 20:03:04'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 20:03:12' prior: 50622418!
transferNet
	^transactions inject: 0 into: [:acum :transaction | 
		(transaction isKindOf: TransferIn) 
			ifTrue: [acum + transaction value] 
			ifFalse:[(transaction isKindOf: TransferOut) 
						ifTrue: [acum - transaction value]
						ifFalse: [acum]]
		].
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mp 5/28/2023 20:03:13'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mp 5/28/2023 20:03:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mp 5/28/2023 20:03:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mp 5/28/2023 20:03:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mp 5/28/2023 20:03:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mp 5/28/2023 20:03:14'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mp 5/28/2023 20:03:14'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 20:03:17'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 20:03:17'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 20:03:17'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 20:03:18'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/28/2023 20:03:18'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/28/2023 20:03:18'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/28/2023 20:03:18'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/28/2023 20:03:18'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/28/2023 20:03:18'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/28/2023 20:03:18'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/28/2023 20:03:18'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 20:06:20' prior: 50622456!
transferNet

	^transactions inject: 0 into: [:currentTransferNet :transaction | 
			transaction affectTransferNet: currentTransferNet].


	"^transactions inject: 0 into: [:acum :transaction | 
		(transaction isKindOf: TransferIn) 
			ifTrue: [acum + transaction value] 
			ifFalse:[(transaction isKindOf: TransferOut) 
						ifTrue: [acum - transaction value]
						ifFalse: [acum]]
		]."
	! !

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 20:06:26'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 20:06:26'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 20:06:26'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 20:06:26'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/28/2023 20:06:27'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/28/2023 20:06:27'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/28/2023 20:06:27'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/28/2023 20:06:27'!
ERROR!

!testRun: #ReportTest #test09 stamp: 'mp 5/28/2023 20:06:27'!
ERROR!

!testRun: #ReportTest #test10 stamp: 'mp 5/28/2023 20:06:27'!
ERROR!

!testRun: #ReportTest #test11 stamp: 'mp 5/28/2023 20:06:27'!
ERROR!

!testRun: #ReportTest #test08 stamp: 'mp 5/28/2023 20:06:33'!
ERROR!
!TransferPart methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 20:06:42'!
affectTransferNet: currentTransferNet 
	self shouldBeImplemented.! !
!TransferPart methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 20:07:15' prior: 50622561!
affectTransferNet: currentTransferNet 
	self affectBalance: currentTransferNet .! !

!testRun: #ReportTest #test08 stamp: 'mp 5/28/2023 20:07:20'!
FAILURE!

!testRun: #ReportTest #test08 stamp: 'mp 5/28/2023 20:07:30'!
FAILURE!
!TransferPart methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 20:08:06' prior: 50622567!
affectTransferNet: currentTransferNet 
	^self affectBalance: currentTransferNet .! !

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 20:08:08'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 20:08:08'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 20:08:08'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 20:08:08'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/28/2023 20:08:08'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/28/2023 20:08:09'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/28/2023 20:08:09'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/28/2023 20:08:09'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/28/2023 20:08:09'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/28/2023 20:08:09'!
ERROR!

!testRun: #ReportTest #test11 stamp: 'mp 5/28/2023 20:08:09'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/28/2023 20:08:09'!
ERROR!
!Deposit methodsFor: 'balance' stamp: 'mp 5/28/2023 20:08:50'!
affectTransferNet: currentTransferNet 

	^currentTransferNet ! !
!Withdraw methodsFor: 'balance' stamp: 'mp 5/28/2023 20:08:59'!
affectTransferNet: currentTransferNet 

	^currentTransferNet ! !

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 20:09:05'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 20:09:05'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 20:09:05'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 20:09:05'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/28/2023 20:09:05'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/28/2023 20:09:05'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/28/2023 20:09:05'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/28/2023 20:09:05'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/28/2023 20:09:06'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/28/2023 20:09:06'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/28/2023 20:09:06'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/28/2023 20:09:21' prior: 50622519!
transferNet

	^transactions inject: 0 into: [:currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet].
! !

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 20:09:33'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 20:09:34'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 20:09:34'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 20:09:34'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/28/2023 20:09:34'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/28/2023 20:09:34'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/28/2023 20:09:34'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/28/2023 20:09:34'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/28/2023 20:09:34'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/28/2023 20:09:34'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/28/2023 20:09:34'!
PASSED!

----SNAPSHOT----(28 May 2023 20:13:15) CuisUniversity-5799.image priorSource: 9280278!

!testRun: #ReportTest #test01 stamp: 'mp 5/28/2023 20:13:34'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/28/2023 20:13:34'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/28/2023 20:13:34'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/28/2023 20:13:34'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/28/2023 20:13:34'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/28/2023 20:13:34'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/28/2023 20:13:34'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/28/2023 20:13:34'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/28/2023 20:13:34'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/28/2023 20:13:34'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/28/2023 20:13:34'!
PASSED!

----SNAPSHOT----(28 May 2023 20:14:55) CuisUniversity-5799.image priorSource: 9312820!

----QUIT----(28 May 2023 20:15:03) CuisUniversity-5799.image priorSource: 9313689!

----STARTUP---- (30 May 2023 16:41:35) as F:\Manuel\Trabajos\EXACTAS\Ingenieria de Software I\CuisUniversity 26-05-23\Portfolio 2\CuisUniversity-5799.image!

!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 16:46:20' prior: 50621679!
test01

	|acc1|
	
	acc1 := ReceptiveAccount new.	
	
	self assert: acc1 accountSummary equals: (OrderedCollection new add: 'Balance = 0').! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 16:47:13' prior: 50621845!
test02

	|acc1 reporte|
	
	acc1 := ReceptiveAccount new register: (Deposit for: 50).	
	reporte := OrderedCollection new.
	reporte add: 'Depósito por 50.'.
	reporte add: 'Balance = 50'.
	
	self assert: acc1 accountSummary equals: reporte.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 16:47:39' prior: 50621747!
test03

	|acc1 reporte|
	
	acc1 := ReceptiveAccount new register: (Withdraw for: 100).	
	reporte := OrderedCollection new.
	reporte add: 'Extracción por 100.'.
	reporte add: 'Balance = -100'.
	
	self assert: acc1 accountSummary equals: reporte.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 16:48:02' prior: 50621861!
test04

	|acc1 acc2 reporte|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	Transfer with: 20 from: acc1 to: acc2.
	
	reporte := OrderedCollection new.
	reporte add: 'Salida por transferencia de 20.'.
	reporte add: 'Balance = -20'.
	
	self assert: acc1 accountSummary equals: reporte.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 16:48:29' prior: 50621954!
test05

	|acc1 acc2 reporte|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	Transfer with: 30 from: acc2 to: acc1.
	
	reporte := OrderedCollection new.
	reporte add: 'Entrada por transferencia de 30.'.
	reporte add: 'Balance = 30'.
	
	self assert: acc1 accountSummary equals: reporte.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 16:49:29' prior: 50622030!
test06

	|acc1 acc2 reporte|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	
	acc1 register: (Deposit for: 100).
	acc1 register: (Withdraw for: 50).
	
	Transfer with: 20 from: acc1 to: acc2.
	Transfer with: 30 from: acc2 to: acc1.
	
	reporte := OrderedCollection new.
	reporte add: 'Depósito por 100.'.
	reporte add: 'Extracción por 50.'.
	reporte add: 'Salida por transferencia de 20.'.
	reporte add: 'Entrada por transferencia de 30.'.
	reporte add: 'Balance = 60'.
	
	self assert: acc1 accountSummary equals: reporte.! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 16:49:45'!
FAILURE!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 16:49:45'!
FAILURE!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 16:49:45'!
FAILURE!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 16:49:46'!
FAILURE!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 16:49:46'!
FAILURE!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 16:49:46'!
FAILURE!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 16:49:46'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 16:49:46'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 16:49:46'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 16:49:46'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 16:49:46'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 16:49:48'!
FAILURE!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 16:50:02' prior: 50622128!
accountSummary
	|summary|
	
	summary := OrderedCollection new.
	transactions do: [:transaction |	
			(transaction isKindOf: Deposit) 		ifTrue: [summary add: ('Depósito por ', transaction value asString , '.')].			
			(transaction isKindOf: Withdraw ) 		ifTrue: [summary add: 'Extracción por ', transaction value asString , '.'].		
			(transaction isKindOf: TransferOut ) 		ifTrue: [summary add: 'Salida por transferencia de ', transaction value asString , '.'].		
			(transaction isKindOf: TransferIn ) 		ifTrue: [summary add: 'Entrada por transferencia de ', transaction value asString , '.'].
		].
	
	summary add: ('Balance = ', self balance asString ).
	
	^summary .! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 16:50:06'!
FAILURE!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 16:50:48'!
FAILURE!

self accountSummary !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 16:52:06'!
FAILURE!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 16:52:06'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 16:52:06'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 16:52:06'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 16:52:06'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 16:52:06'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 16:52:06'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 16:52:06'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 16:52:06'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 16:52:06'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 16:52:06'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 16:52:06'!
FAILURE!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 16:52:17'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 16:53:10' prior: 50622715!
test01

	|acc1 reporte|
	
	acc1 := ReceptiveAccount new.	
	
	reporte := OrderedCollection new.
	reporte add: 'Balance = 0'.
	
	self assert: acc1 accountSummary equals: reporte.! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 16:53:11'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 16:53:11'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 16:53:11'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 16:53:11'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 16:53:11'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 16:53:11'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 16:53:11'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 16:53:12'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 16:53:12'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 16:53:12'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 16:53:12'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 16:53:12'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 16:53:14'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 16:53:14'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 16:53:14'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 16:53:14'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 16:53:14'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 16:53:14'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 16:53:14'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 16:53:14'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 16:53:14'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 16:53:15'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 16:53:15'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 16:59:05' prior: 50622818!
accountSummary
	|summaryCollection|
	
	summaryCollection := OrderedCollection new.
	transactions do: [:transaction |	 transaction addSummaryTo: summaryCollection		].
	
	summaryCollection add: ('Balance = ', self balance asString ).
	
	^summaryCollection .! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 16:59:31'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 16:59:32'!
ERROR!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 16:59:32'!
ERROR!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 16:59:32'!
ERROR!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 16:59:32'!
ERROR!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 16:59:32'!
ERROR!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 16:59:32'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 16:59:32'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 16:59:32'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 16:59:32'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 16:59:32'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 16:59:34'!
ERROR!
!Deposit methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 16:59:47'!
addSummaryTo: summaryCollection 
	self shouldBeImplemented.! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:00:39' prior: 50622974!
addSummaryTo: aSummaryCollection 
	aSummaryCollection add: ('Depósito por ', self value asString , '.')! !

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 17:00:40'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 17:00:43'!
ERROR!
!Withdraw methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:00:48'!
addSummaryTo: summaryCollection 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:01:26' prior: 50622990!
addSummaryTo: aSummaryCollection 
	aSummaryCollection add: 'Extracción por ', self value asString , '.'! !

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 17:01:28'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 17:01:40'!
ERROR!
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:01:47'!
addSummaryTo: summaryCollection 
	self shouldBeImplemented.! !
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:02:16' prior: 50623006!
addSummaryTo: aSummaryCollection 
	aSummaryCollection add: 'Salida por transferencia de ', self value asString , '.'! !

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 17:03:11'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 17:03:13'!
ERROR!
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:03:17'!
addSummaryTo: summaryCollection 
	self shouldBeImplemented.! !
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:03:42' prior: 50623022!
addSummaryTo: aSummaryCollection 
	aSummaryCollection add: 'Entrada por transferencia de ', self value asString , '.'! !

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 17:03:44'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 17:03:47'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 17:03:47'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 17:03:47'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 17:03:47'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 17:03:47'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 17:03:47'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 17:03:47'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 17:03:47'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 17:03:47'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 17:03:47'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 17:03:47'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 17:03:53'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 17:03:53'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 17:03:53'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 17:03:53'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 17:03:53'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 17:03:53'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 17:03:53'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 17:03:53'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 17:03:54'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 17:03:54'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 17:03:54'!
PASSED!

Object subclass: #SummaryReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #SummaryReporter category: 'Portfolio-Solucion' stamp: 'mp 5/30/2023 17:07:43'!
Object subclass: #SummaryReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!SummaryReporter class methodsFor: 'nil' stamp: 'mp 5/30/2023 17:09:12'!
for: anAccount
	^self new initializeWith: anAccount! !

!classDefinition: #SummaryReporter category: 'Portfolio-Solucion' stamp: 'mp 5/30/2023 17:09:37'!
Object subclass: #SummaryReporter
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!SummaryReporter methodsFor: 'nil' stamp: 'mp 5/30/2023 17:09:35'!
initializeWith: anAccount
	account := anAccount .! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:16:07'!
summaryAccount
	^account accountSummary! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:16:13' prior: 50623113!
summaryAccount

	^account accountSummary! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:20:19' prior: 50622877!
test01

	|acc1 reporte|
	
	acc1 := ReceptiveAccount new.	
	
	reporte := OrderedCollection new.
	reporte add: 'Balance = 0'.
	
	self assert: (SummaryReporter for: acc1) accountSummary equals: reporte.! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:20:54'!
accountSummary

	^account accountSummary! !

!methodRemoval: SummaryReporter #summaryAccount stamp: 'mp 5/30/2023 17:20:54'!
summaryAccount

	^account accountSummary!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 17:21:04'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 17:21:04'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 17:21:04'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 17:21:04'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 17:21:04'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 17:21:04'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 17:21:05'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 17:21:05'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 17:21:05'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 17:21:05'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 17:21:05'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:21:21' prior: 50622723!
test02

	|acc1 reporte|
	
	acc1 := ReceptiveAccount new register: (Deposit for: 50).	
	reporte := OrderedCollection new.
	reporte add: 'Depósito por 50.'.
	reporte add: 'Balance = 50'.
	
	self assert: (SummaryReporter for: acc1) accountSummary equals: reporte.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:21:25' prior: 50622734!
test03

	|acc1 reporte|
	
	acc1 := ReceptiveAccount new register: (Withdraw for: 100).	
	reporte := OrderedCollection new.
	reporte add: 'Extracción por 100.'.
	reporte add: 'Balance = -100'.
	
	self assert: (SummaryReporter for: acc1) accountSummary equals: reporte.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:21:29' prior: 50622745!
test04

	|acc1 acc2 reporte|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	Transfer with: 20 from: acc1 to: acc2.
	
	reporte := OrderedCollection new.
	reporte add: 'Salida por transferencia de 20.'.
	reporte add: 'Balance = -20'.
	
	self assert: (SummaryReporter for: acc1) accountSummary equals: reporte.! !

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 17:21:30'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 17:21:30'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 17:21:31'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 17:21:31'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 17:21:31'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 17:21:31'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 17:21:31'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 17:21:31'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 17:21:31'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 17:21:31'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 17:21:31'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 17:21:31'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:21:35' prior: 50622758!
test05

	|acc1 acc2 reporte|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	Transfer with: 30 from: acc2 to: acc1.
	
	reporte := OrderedCollection new.
	reporte add: 'Entrada por transferencia de 30.'.
	reporte add: 'Balance = 30'.
	
	self assert: (SummaryReporter for: acc1) accountSummary equals: reporte.! !

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 17:21:37'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 17:21:37'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 17:21:37'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 17:21:37'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 17:21:37'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 17:21:37'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 17:21:37'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 17:21:37'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 17:21:37'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 17:21:37'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 17:21:37'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 17:21:37'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:21:44' prior: 50622771!
test06

	|acc1 acc2 reporte|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	
	acc1 register: (Deposit for: 100).
	acc1 register: (Withdraw for: 50).
	
	Transfer with: 20 from: acc1 to: acc2.
	Transfer with: 30 from: acc2 to: acc1.
	
	reporte := OrderedCollection new.
	reporte add: 'Depósito por 100.'.
	reporte add: 'Extracción por 50.'.
	reporte add: 'Salida por transferencia de 20.'.
	reporte add: 'Entrada por transferencia de 30.'.
	reporte add: 'Balance = 60'.
	
	self assert: (SummaryReporter for: acc1) accountSummary equals: reporte.! !

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 17:21:45'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 17:21:45'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 17:21:45'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 17:21:46'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 17:21:46'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 17:21:46'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 17:21:46'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 17:21:46'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 17:21:46'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 17:21:46'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 17:21:46'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 17:21:46'!
PASSED!
!Deposit methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:27:25'!
addSummaryTo: aSummaryCollection for: aSummaryReporter
	
	aSummaryReporter addDepositSummaryOf: self to: aSummaryCollection.! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:28:43'!
addDepositSummaryOf: aDeposit to: aSummaryCollection 

	aSummaryCollection add: ('Depósito por ', aDeposit value asString , '.').
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:30:55'!
accountSummary: aSummaryReporter
	|summaryCollection|
	
	summaryCollection := OrderedCollection new.
	transactions do: [:transaction |	 transaction addSummaryTo: summaryCollection		].
	
	summaryCollection add: ('Balance = ', self balance asString ).
	
	^summaryCollection .! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:31:12' prior: 50623330!
accountSummary: aSummaryReporter
	|summaryCollection|
	
	summaryCollection := OrderedCollection new.
	transactions do: [:transaction |	 transaction addSummaryTo: summaryCollection for: aSummaryReporter 		].
	
	summaryCollection add: ('Balance = ', self balance asString ).
	
	^summaryCollection .! !

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 17:31:20'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 17:31:20'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 17:31:20'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 17:31:20'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 17:31:20'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 17:31:20'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 17:31:20'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 17:31:20'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 17:31:20'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 17:31:20'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 17:31:21'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 17:31:21'!
PASSED!
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:31:44' prior: 50623132!
accountSummary

	^account accountSummary: self! !

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 17:31:49'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 17:31:51'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 17:31:51'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 17:31:51'!
ERROR!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 17:31:51'!
ERROR!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 17:31:51'!
ERROR!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 17:31:52'!
ERROR!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 17:31:52'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 17:31:52'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 17:31:52'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 17:31:52'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 17:31:52'!
PASSED!
!Withdraw methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:32:37'!
addSummaryTo: aSummaryCollection for: aSummaryReporter
	
	aSummaryReporter addWithdrawSummaryOf: self to: aSummaryCollection.
	! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:33:11'!
addWithdrawSummaryOf: aDeposit to: aSummaryCollection 

	aSummaryCollection add: 'Extracción por ', aDeposit value asString , '.'
! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:33:35' prior: 50623420!
addWithdrawSummaryOf: aWithdraw to: aSummaryCollection 

	aSummaryCollection add: 'Extracción por ', aWithdraw value asString , '.'
! !

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 17:33:46'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 17:33:50'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 17:33:50'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 17:33:50'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 17:33:50'!
ERROR!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 17:33:50'!
ERROR!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 17:33:50'!
ERROR!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 17:33:50'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 17:33:50'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 17:33:50'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 17:33:51'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 17:33:51'!
PASSED!
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:34:27'!
addSummaryTo: aSummaryCollection for: aSummaryReporter
	
	aSummaryReporter addTransferInSummaryOf: self to: aSummaryCollection.! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:34:56'!
addTransferInSummaryOf: aTransferIn to: aSummaryCollection 
	
	aSummaryCollection add: 'Entrada por transferencia de ', aTransferIn value asString , '.'
! !
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:35:24'!
addSummaryTo: aSummaryCollection for: aSummaryReporter
	
	aSummaryReporter addTransferOutSummaryOf: self to: aSummaryCollection.! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:35:53'!
addTransferOutSummaryOf: aTransferOut to: aSummaryCollection 
	
	aSummaryCollection add: 'Salida por transferencia de ', aTransferOut value asString , '.'
! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 17:35:57'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 17:35:57'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 17:35:57'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 17:35:57'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 17:35:57'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 17:35:57'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 17:35:57'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 17:35:57'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 17:35:57'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 17:35:57'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 17:35:57'!
PASSED!

----SNAPSHOT----(30 May 2023 17:50:44) CuisUniversity-5799.image priorSource: 9313777!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:54:06' prior: 50622645!
transferNet
	|acum|
	
	acum:= 0.
	transactions do: [:transaction | transaction transferNetTo: acum].
	
	^acum.

	"^transactions inject: 0 into: [:currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet]."
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 17:54:11' prior: 50623520!
transferNet
	|acum|
	
	acum:= 0.
	
	transactions do: [:transaction | transaction transferNetTo: acum].
	
	^acum.

	"^transactions inject: 0 into: [:currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet]."
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:03:56'!
accountSummary2: aSummaryReporter to: aSummaryCollection
	
	transactions do: [:transaction |	 transaction addSummaryTo: aSummaryCollection for: aSummaryReporter 		].
	
	aSummaryCollection add: ('Balance = ', self balance asString ).
	
	^aSummaryCollection .! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:04:37' prior: 50623542!
accountSummary2: aSummaryReporter to: aSummaryCollection
	
	transactions do: [:transaction |	 transaction addSummaryTo: aSummaryCollection for: aSummaryReporter 		].
	
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:05:19'!
transferNet2: aReporter acum: acum
		
	transactions do: [:transaction | transaction transferNetTo: acum].
	
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:05:32' prior: 50623563!
transferNet2: aReporter acum: acum
		
	transactions do: [:transaction | transaction transferNetTo: acum with: aReporter].
	
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:09:20' prior: 50623570!
transferNet2: aReporter acum: acum
		
	transactions do: [:transaction | transaction operacionTo: acum for: aReporter].
	
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:09:27' prior: 50623554!
accountSummary2: aSummaryReporter to: aSummaryCollection
	
	transactions do: [:transaction |	 transaction operacionTo: aSummaryCollection for: aSummaryReporter 		].
	
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:10:11'!
doOperation: aReporter to: aCollection
	
	transactions do: [:transaction |	 transaction operacionTo: aReporter for: aCollection 		].
	
	! !

!methodRemoval: ReceptiveAccount #transferNet2:acum: stamp: 'mp 5/30/2023 18:13:02'!
transferNet2: aReporter acum: acum
		
	transactions do: [:transaction | transaction operacionTo: acum for: aReporter].
	
!

!methodRemoval: ReceptiveAccount #doOperation:to: stamp: 'mp 5/30/2023 18:13:03'!
doOperation: aReporter to: aCollection
	
	transactions do: [:transaction |	 transaction operacionTo: aReporter for: aCollection 		].
	
	!

!methodRemoval: ReceptiveAccount #accountSummary2:to: stamp: 'mp 5/30/2023 18:13:06'!
accountSummary2: aSummaryReporter to: aSummaryCollection
	
	transactions do: [:transaction |	 transaction operacionTo: aSummaryCollection for: aSummaryReporter 		].
	
	!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 18:13:14'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 18:13:14'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 18:13:14'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 18:13:14'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 18:13:14'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 18:13:14'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 18:13:14'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 18:13:14'!
ERROR!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 18:13:14'!
ERROR!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 18:13:14'!
ERROR!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 18:13:14'!
ERROR!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:13:53' prior: 50623531!
transferNet

	^transactions inject: 0 into: [:currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet].
! !

Object subclass: #TransferNetReporter
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetReporter category: 'Portfolio-Solucion' stamp: 'mp 5/30/2023 18:15:07'!
Object subclass: #TransferNetReporter
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetReporter class methodsFor: 'nil' stamp: 'mp 5/30/2023 18:15:19'!
for: anAccount
	^self new initializeWith: anAccount! !
!TransferNetReporter methodsFor: 'nil' stamp: 'mp 5/30/2023 18:15:31'!
initializeWith: anAccount
	account := anAccount .! !
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:15:59'!
transferNet
	 account transferNet.! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 18:16:02'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 18:16:03'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 18:16:03'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 18:16:03'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 18:16:03'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 18:16:03'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 18:16:03'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 18:16:03'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 18:16:03'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 18:16:03'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 18:16:03'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:16:29' prior: 50622168!
test07

	|acc1|
	
	acc1 := ReceptiveAccount new.	
	
	self assert: (TransferNetReporter for: acc1) transferNet equals: 0.! !

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 18:16:30'!
FAILURE!
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:18:12' prior: 50623677!
transferNet
	^account transferNet.! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 18:18:17'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 18:18:17'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 18:18:17'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 18:18:17'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 18:18:17'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 18:18:17'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 18:18:18'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 18:18:18'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 18:18:18'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 18:18:18'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 18:18:18'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:18:34' prior: 50622202!
test08

	|acc1 acc2|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	Transfer with: 30 from: acc2 to: acc1.
	
	
	self assert: (TransferNetReporter for: acc1)  transferNet equals: 30.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:18:46' prior: 50623745!
test08

	|acc1 acc2|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	Transfer with: 30 from: acc2 to: acc1.
	
	
	self assert: (TransferNetReporter for: acc1) transferNet equals: 30.! !

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 18:18:49'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 18:18:49'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 18:18:49'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 18:18:49'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 18:18:49'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 18:18:49'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 18:18:49'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 18:18:50'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 18:18:50'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 18:18:50'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 18:18:50'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 18:18:50'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:18:54' prior: 50622246!
test09

	|acc1 acc2|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	Transfer with: 30 from: acc1 to: acc2.
	
	self assert: (TransferNetReporter for: acc1) transferNet equals: -30.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:18:57' prior: 50622287!
test10

	|acc1 |
	
	acc1 := ReceptiveAccount new.	
	acc1 register: (Deposit for: 50).
	acc1 register: (Withdraw for: 100).
	
	self assert: (TransferNetReporter for: acc1) transferNet equals: 0.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:19:00' prior: 50622331!
test11

	|acc1 acc2|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	Transfer with: 30 from: acc1 to: acc2.
	Transfer with: 50 from: acc1 to: acc2.
	Transfer with: 20 from: acc2 to: acc1.
	
	self assert: (TransferNetReporter for: acc1) transferNet equals: -60.! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 18:19:02'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 18:19:02'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 18:19:02'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 18:19:02'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 18:19:02'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 18:19:02'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 18:19:02'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 18:19:02'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 18:19:02'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 18:19:02'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 18:19:02'!
PASSED!
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:19:25' prior: 50623716!
transferNet
	^account transferNet: self.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:21:17'!
transferNet: aTransferNetReporter

	^transactions inject: 0 into: [:currentTransferNet :transaction | transaction affectTransferNetTo: currentTransferNet with: aTransferNetReporter].
! !
!Deposit methodsFor: 'balance' stamp: 'mp 5/30/2023 18:23:30'!
affectTransferNetTo: currentTransferNet with: aTransferNetReporter

	^aTransferNetReporter depositTransferNetOf: self to: currentTransferNet .! !

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 18:23:55'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 18:24:01'!
ERROR!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 18:24:01'!
ERROR!
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:24:09'!
depositTransferNetOf: aDeposit to: currentTransferNet 
	self shouldBeImplemented.! !
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:24:42' prior: 50623874!
depositTransferNetOf: aDeposit to: currentTransferNet 
	^currentTransferNet ! !

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 18:24:43'!
ERROR!
!Withdraw methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:24:53'!
affectTransferNetTo: currentTransferNet with: aTransferNetReporter 
	self shouldBeImplemented.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:25:17' prior: 50623888!
affectTransferNetTo: currentTransferNet with: aTransferNetReporter 
	^aTransferNetReporter withdrawTransferNetOf: self to: currentTransferNet .! !

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 18:25:19'!
ERROR!
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:25:24'!
withdrawTransferNetOf: aWithdraw to: currentTransferNet 
	self shouldBeImplemented.! !
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:25:37' prior: 50623904!
withdrawTransferNetOf: aWithdraw to: currentTransferNet 
	^currentTransferNet ! !

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 18:25:38'!
PASSED!
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:31:20'!
affectTransferNetTo: currentTransferNet with: aTransferNetReporter 
	^aTransferNetReporter transferInTransferNetOf: self to: currentTransferNet .! !
!TransferOut methodsFor: 'nil' stamp: 'mp 5/30/2023 18:31:35'!
affectTransferNetTo: currentTransferNet with: aTransferNetReporter 
	^aTransferNetReporter transferOutTransferNetOf: self to: currentTransferNet .! !
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:32:47'!
transferInTransferNetOf: aTransferIn to: currentTransferNet 
	^currentTransferNet + aTransferIn value! !
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:33:04'!
transferOutTransferNetOf: aTransferOut to: currentTransferNet 
	^currentTransferNet - aTransferOut value! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 18:33:24'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 18:33:24'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 18:33:24'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 18:33:24'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 18:33:24'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 18:33:24'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 18:33:24'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 18:33:24'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 18:33:24'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 18:33:24'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 18:33:24'!
PASSED!

!methodRemoval: ReceptiveAccount #transferNet stamp: 'mp 5/30/2023 18:33:54'!
transferNet

	^transactions inject: 0 into: [:currentTransferNet :transaction | transaction affectTransferNet: currentTransferNet].
!

!methodRemoval: ReceptiveAccount #accountSummary stamp: 'mp 5/30/2023 18:33:57'!
accountSummary
	|summaryCollection|
	
	summaryCollection := OrderedCollection new.
	transactions do: [:transaction |	 transaction addSummaryTo: summaryCollection		].
	
	summaryCollection add: ('Balance = ', self balance asString ).
	
	^summaryCollection .!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 18:34:00'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 18:34:00'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 18:34:00'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 18:34:00'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 18:34:00'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 18:34:00'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 18:34:00'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 18:34:00'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 18:34:00'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 18:34:00'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 18:34:00'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 18:34:05'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 18:34:05'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 18:34:06'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 18:34:06'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 18:34:06'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 18:34:06'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 18:34:06'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 18:34:06'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 18:34:06'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 18:34:06'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 18:34:06'!
PASSED!

!methodRemoval: Deposit #addSummaryTo: stamp: 'mp 5/30/2023 18:34:37'!
addSummaryTo: aSummaryCollection 
	aSummaryCollection add: ('Depósito por ', self value asString , '.')!

!methodRemoval: Deposit #affectTransferNet: stamp: 'mp 5/30/2023 18:34:41'!
affectTransferNet: currentTransferNet 

	^currentTransferNet !

!methodRemoval: TransferPart #affectTransferNet: stamp: 'mp 5/30/2023 18:34:49'!
affectTransferNet: currentTransferNet 
	^self affectBalance: currentTransferNet .!

!methodRemoval: TransferIn #addSummaryTo: stamp: 'mp 5/30/2023 18:34:56'!
addSummaryTo: aSummaryCollection 
	aSummaryCollection add: 'Entrada por transferencia de ', self value asString , '.'!

!methodRemoval: TransferOut #addSummaryTo: stamp: 'mp 5/30/2023 18:35:02'!
addSummaryTo: aSummaryCollection 
	aSummaryCollection add: 'Salida por transferencia de ', self value asString , '.'!

!methodRemoval: Withdraw #addSummaryTo: stamp: 'mp 5/30/2023 18:35:07'!
addSummaryTo: aSummaryCollection 
	aSummaryCollection add: 'Extracción por ', self value asString , '.'!

!methodRemoval: Withdraw #affectTransferNet: stamp: 'mp 5/30/2023 18:35:10'!
affectTransferNet: currentTransferNet 

	^currentTransferNet !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 18:35:14'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 18:35:14'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 18:35:14'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 18:35:14'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 18:35:14'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 18:35:14'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 18:35:14'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 18:35:14'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 18:35:14'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 18:35:15'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 18:35:15'!
PASSED!

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'mp 5/30/2023 18:35:19'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'mp 5/30/2023 18:35:19'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'mp 5/30/2023 18:35:19'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'mp 5/30/2023 18:35:19'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'mp 5/30/2023 18:35:19'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'mp 5/30/2023 18:35:19'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'mp 5/30/2023 18:35:19'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'mp 5/30/2023 18:35:19'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'mp 5/30/2023 18:35:19'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'mp 5/30/2023 18:35:19'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'mp 5/30/2023 18:35:20'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'mp 5/30/2023 18:35:20'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'mp 5/30/2023 18:35:20'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'mp 5/30/2023 18:35:20'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'mp 5/30/2023 18:35:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mp 5/30/2023 18:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mp 5/30/2023 18:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mp 5/30/2023 18:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mp 5/30/2023 18:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mp 5/30/2023 18:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mp 5/30/2023 18:35:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mp 5/30/2023 18:35:25'!
PASSED!

!testRun: #TransferTest #test01TransferToAccount stamp: 'mp 5/30/2023 18:35:28'!
PASSED!

!testRun: #TransferTest #test02 stamp: 'mp 5/30/2023 18:35:28'!
PASSED!

!testRun: #TransferTest #test03 stamp: 'mp 5/30/2023 18:35:28'!
PASSED!

!testRun: #TransferTest #test04 stamp: 'mp 5/30/2023 18:35:28'!
PASSED!

!testRun: #TransferTest #test05 stamp: 'mp 5/30/2023 18:35:29'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:38:45' prior: 50623342!
accountSummary: aSummaryReporter
	|summaryCollection|
	
	summaryCollection := OrderedCollection new.
	transactions do: [:transaction |	 transaction addSummaryTo: summaryCollection for: aSummaryReporter 		].
	
	^summaryCollection .! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:39:47' prior: 50623382!
accountSummary
	|report|
	report := account accountSummary: self.
	report add: ('Balance = ', account balance asString ).
	
	^report! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 18:39:50'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 18:39:50'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 18:39:50'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 18:39:50'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 18:39:50'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 18:39:50'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 18:39:50'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 18:39:50'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 18:39:50'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 18:39:51'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 18:39:51'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 18:46:04' prior: 50623852!
transferNet: aTransferNetReporter
	|acum|
	
	acum := 0.
	
	transactions do: [:transaction | transaction affectTransferNetTo: acum with: aTransferNetReporter].
	
	^acum
	
	"^transactions inject: 0 into: [:currentTransferNet :transaction | transaction affectTransferNetTo: currentTransferNet with: aTransferNetReporter]."
! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 18:46:08'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 18:46:08'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 18:46:08'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 18:46:08'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 18:46:08'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 18:46:08'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 18:46:09'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 18:46:09'!
FAILURE!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 18:46:09'!
FAILURE!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 18:46:09'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 18:46:09'!
FAILURE!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 18:49:27'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 18:49:31'!
FAILURE!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 18:49:31'!
FAILURE!

!classDefinition: #TransferNetReporter category: 'Portfolio-Solucion' stamp: 'mp 5/30/2023 19:01:20'!
Object subclass: #TransferNetReporter
	instanceVariableNames: 'account currentTransferNet2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:01:19' prior: 50623848!
transferNet
	currentTransferNet2 := 0.
	^account transferNet: self.! !
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:01:39' prior: 50624291!
transferNet
	currentTransferNet2 := 0.
	account transferNet: self.
	^currentTransferNet2.! !
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:02:06' prior: 50623880!
depositTransferNetOf: aDeposit to: currentTransferNet 
	! !
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:02:36' prior: 50623933!
transferInTransferNetOf: aTransferIn to: currentTransferNet 
	currentTransferNet2 := currentTransferNet2 + aTransferIn value.! !
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:02:41'!
transferInTransferNetOf: aTransferIn
	currentTransferNet2 := currentTransferNet2 + aTransferIn value.! !
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:02:55' prior: 50623939!
transferOutTransferNetOf: aTransferOut to: currentTransferNet 
	currentTransferNet2 := currentTransferNet2  - aTransferOut value! !
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:02:57' prior: 50624324!
transferOutTransferNetOf: aTransferOut to: currentTransferNet 
	currentTransferNet2 := currentTransferNet2 - aTransferOut value! !
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:03:01'!
transferOutTransferNetOf: aTransferOut
	currentTransferNet2 := currentTransferNet2 - aTransferOut value! !
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:03:09' prior: 50623910!
withdrawTransferNetOf: aWithdraw to: currentTransferNet 
	! !
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:03:12'!
withdrawTransferNetOf: aWithdraw 
	! !
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:03:16'!
depositTransferNetOf: aDeposit
	! !
!Deposit methodsFor: 'balance' stamp: 'mp 5/30/2023 19:04:03' prior: 50623860!
affectTransferNetTo: currentTransferNet with: aTransferNetReporter

	^aTransferNetReporter depositTransferNetOf: self.! !
!Deposit methodsFor: 'balance' stamp: 'mp 5/30/2023 19:04:16'!
affectTransferNetToWith: aTransferNetReporter

	^aTransferNetReporter depositTransferNetOf: self.! !
!Deposit methodsFor: 'balance' stamp: 'mp 5/30/2023 19:04:21'!
affectTransferNetWith: aTransferNetReporter

	^aTransferNetReporter depositTransferNetOf: self.! !

!methodRemoval: Deposit #affectTransferNetToWith: stamp: 'mp 5/30/2023 19:04:24'!
affectTransferNetToWith: aTransferNetReporter

	^aTransferNetReporter depositTransferNetOf: self.!
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:04:43'!
affectTransferNetWith: aTransferNetReporter 
	^aTransferNetReporter transferInTransferNetOf: self.! !
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:04:53'!
affectTransferNetWith: aTransferNetReporter 
	^aTransferNetReporter transferOutTransferNetOf: self .! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:05:03'!
affectTransferNetWith: aTransferNetReporter 
	^aTransferNetReporter withdrawTransferNetOf: self.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:05:26' prior: 50624237!
transferNet: aTransferNetReporter
	|acum|
	
	acum := 0.
	
	transactions do: [:transaction | transaction affectTransferNetWith: aTransferNetReporter].
	
	^acum
	
	"^transactions inject: 0 into: [:currentTransferNet :transaction | transaction affectTransferNetTo: currentTransferNet with: aTransferNetReporter]."
! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 19:05:32'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 19:05:32'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 19:05:32'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 19:05:32'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 19:05:32'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 19:05:32'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 19:05:32'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 19:05:32'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 19:05:32'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 19:05:32'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 19:05:32'!
PASSED!

!methodRemoval: TransferNetReporter #depositTransferNetOf:to: stamp: 'mp 5/30/2023 19:05:59'!
depositTransferNetOf: aDeposit to: currentTransferNet 
	!

!methodRemoval: TransferNetReporter #transferInTransferNetOf:to: stamp: 'mp 5/30/2023 19:06:10'!
transferInTransferNetOf: aTransferIn to: currentTransferNet 
	currentTransferNet2 := currentTransferNet2 + aTransferIn value.!

!methodRemoval: TransferNetReporter #transferOutTransferNetOf:to: stamp: 'mp 5/30/2023 19:06:24'!
transferOutTransferNetOf: aTransferOut to: currentTransferNet 
	currentTransferNet2 := currentTransferNet2 - aTransferOut value!

!methodRemoval: TransferNetReporter #withdrawTransferNetOf:to: stamp: 'mp 5/30/2023 19:06:33'!
withdrawTransferNetOf: aWithdraw to: currentTransferNet 
	!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 19:06:36'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 19:06:36'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 19:06:36'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 19:06:36'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 19:06:36'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 19:06:36'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 19:06:36'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 19:06:37'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 19:06:37'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 19:06:37'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 19:06:37'!
PASSED!

!methodRemoval: Deposit #affectTransferNetTo:with: stamp: 'mp 5/30/2023 19:06:54'!
affectTransferNetTo: currentTransferNet with: aTransferNetReporter

	^aTransferNetReporter depositTransferNetOf: self.!

!methodRemoval: TransferIn #affectTransferNetTo:with: stamp: 'mp 5/30/2023 19:07:01'!
affectTransferNetTo: currentTransferNet with: aTransferNetReporter 
	^aTransferNetReporter transferInTransferNetOf: self to: currentTransferNet .!

!methodRemoval: TransferOut #affectTransferNetTo:with: stamp: 'mp 5/30/2023 19:07:05'!
affectTransferNetTo: currentTransferNet with: aTransferNetReporter 
	^aTransferNetReporter transferOutTransferNetOf: self to: currentTransferNet .!

!methodRemoval: Withdraw #affectTransferNetTo:with: stamp: 'mp 5/30/2023 19:07:08'!
affectTransferNetTo: currentTransferNet with: aTransferNetReporter 
	^aTransferNetReporter withdrawTransferNetOf: self to: currentTransferNet .!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 19:07:12'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 19:07:12'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 19:07:12'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 19:07:12'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 19:07:12'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 19:07:12'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 19:07:12'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 19:07:12'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 19:07:12'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 19:07:12'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 19:07:12'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:07:33' prior: 50624402!
transferNet: aTransferNetReporter
	
	transactions do: [:transaction | transaction affectTransferNetWith: aTransferNetReporter].
	
	
! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 19:07:36'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 19:07:36'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 19:07:36'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 19:07:36'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 19:07:36'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 19:07:37'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 19:07:37'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 19:07:37'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 19:07:37'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 19:07:37'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 19:07:37'!
PASSED!

!classDefinition: #SummaryReporter category: 'Portfolio-Solucion' stamp: 'mp 5/30/2023 19:09:17'!
Object subclass: #SummaryReporter
	instanceVariableNames: 'account currentReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:09:16' prior: 50624205!
accountSummary
	
	currentReport := OrderedCollection new.
	account accountSummary: self.
	currentReport add: ('Balance = ', account balance asString ).
	
	^currentReport! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:09:34' prior: 50623323!
addDepositSummaryOf: aDeposit to: aSummaryCollection 

	currentReport add: ('Depósito por ', aDeposit value asString , '.').
! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:09:42'!
addDepositSummaryOf: aDeposit

	currentReport add: ('Depósito por ', aDeposit value asString , '.').
! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:10:47' prior: 50623469!
addTransferInSummaryOf: aTransferIn to: aSummaryCollection 
	
	currentReport add: 'Entrada por transferencia de ', aTransferIn value asString , '.'
! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:11:09'!
addTransferInSummaryOf: aTransferIn  
	
	currentReport add: 'Entrada por transferencia de ', aTransferIn value asString , '.'
! !
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:11:09' prior: 50623462!
addSummaryTo: aSummaryCollection for: aSummaryReporter
	
	aSummaryReporter addTransferInSummaryOf: self .! !

!methodRemoval: SummaryReporter #addTransferInSummaryOf:to: stamp: 'mp 5/30/2023 19:11:09'!
addTransferInSummaryOf: aTransferIn to: aSummaryCollection 
	
	currentReport add: 'Entrada por transferencia de ', aTransferIn value asString , '.'
!
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:11:17' prior: 50623484!
addTransferOutSummaryOf: aTransferOut to: aSummaryCollection 
	
	currentReport add: 'Salida por transferencia de ', aTransferOut value asString , '.'
! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:11:26'!
addTransferOutSummaryOf: aTransferOut  
	
	currentReport add: 'Salida por transferencia de ', aTransferOut value asString , '.'
! !
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:11:26' prior: 50623477!
addSummaryTo: aSummaryCollection for: aSummaryReporter
	
	aSummaryReporter addTransferOutSummaryOf: self .! !

!methodRemoval: SummaryReporter #addTransferOutSummaryOf:to: stamp: 'mp 5/30/2023 19:11:26'!
addTransferOutSummaryOf: aTransferOut to: aSummaryCollection 
	
	currentReport add: 'Salida por transferencia de ', aTransferOut value asString , '.'
!

!methodRemoval: SummaryReporter #addDepositSummaryOf:to: stamp: 'mp 5/30/2023 19:11:37'!
addDepositSummaryOf: aDeposit to: aSummaryCollection 

	currentReport add: ('Depósito por ', aDeposit value asString , '.').
!
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:11:42' prior: 50623428!
addWithdrawSummaryOf: aWithdraw to: aSummaryCollection 

	currentReport add: 'Extracción por ', aWithdraw value asString , '.'
! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:11:50'!
addWithdrawSummaryOf: aWithdraw  

	currentReport add: 'Extracción por ', aWithdraw value asString , '.'
! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:11:50' prior: 50623413!
addSummaryTo: aSummaryCollection for: aSummaryReporter
	
	aSummaryReporter addWithdrawSummaryOf: self .
	! !

!methodRemoval: SummaryReporter #addWithdrawSummaryOf:to: stamp: 'mp 5/30/2023 19:11:50'!
addWithdrawSummaryOf: aWithdraw to: aSummaryCollection 

	currentReport add: 'Extracción por ', aWithdraw value asString , '.'
!
!Deposit methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:12:02' prior: 50623316!
addSummaryTo: aSummaryCollection for: aSummaryReporter
	
	aSummaryReporter addDepositSummaryOf: self.! !
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:12:51'!
addSummaryFor: aSummaryReporter
	
	aSummaryReporter addTransferOutSummaryOf: self .! !
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:13:04'!
addSummaryFor: aSummaryReporter
	
	aSummaryReporter addTransferInSummaryOf: self .! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:13:10'!
addSummaryFor: aSummaryReporter
	
	aSummaryReporter addDepositSummaryOf: self.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:13:16'!
addSummaryFor: aSummaryReporter
	
	aSummaryReporter addWithdrawSummaryOf: self .
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:13:26' prior: 50624194!
accountSummary: aSummaryReporter
	|summaryCollection|
	
	summaryCollection := OrderedCollection new.
	transactions do: [:transaction |	 transaction addSummaryFor: aSummaryReporter 		].
	
	^summaryCollection .! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 19:13:31'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 19:13:31'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 19:13:31'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 19:13:31'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 19:13:31'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 19:13:31'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 19:13:31'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 19:13:31'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 19:13:31'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 19:13:31'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 19:13:31'!
PASSED!

!methodRemoval: Deposit #addSummaryTo:for: stamp: 'mp 5/30/2023 19:13:36'!
addSummaryTo: aSummaryCollection for: aSummaryReporter
	
	aSummaryReporter addDepositSummaryOf: self.!

!methodRemoval: TransferIn #addSummaryTo:for: stamp: 'mp 5/30/2023 19:13:41'!
addSummaryTo: aSummaryCollection for: aSummaryReporter
	
	aSummaryReporter addTransferInSummaryOf: self .!

!methodRemoval: TransferOut #addSummaryTo:for: stamp: 'mp 5/30/2023 19:13:43'!
addSummaryTo: aSummaryCollection for: aSummaryReporter
	
	aSummaryReporter addTransferOutSummaryOf: self .!

!methodRemoval: Withdraw #addSummaryTo:for: stamp: 'mp 5/30/2023 19:13:45'!
addSummaryTo: aSummaryCollection for: aSummaryReporter
	
	aSummaryReporter addWithdrawSummaryOf: self .
	!

----SNAPSHOT----(30 May 2023 19:17:13) CuisUniversity-5799.image priorSource: 9339691!

!classDefinition: #TransferNetReporter category: 'Portfolio-Solucion' stamp: 'mp 5/30/2023 19:20:28'!
Object subclass: #TransferNetReporter
	instanceVariableNames: 'account currentTransferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:20:28' prior: 50624339!
transferOutTransferNetOf: aTransferOut
	currentTransferNet := currentTransferNet - aTransferOut value! !
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:20:28' prior: 50624297!
transferNet
	currentTransferNet := 0.
	account transferNet: self.
	^currentTransferNet.! !
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:20:28' prior: 50624317!
transferInTransferNetOf: aTransferIn
	currentTransferNet := currentTransferNet + aTransferIn value.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:21:06' prior: 50624729!
accountSummary: aSummaryReporter

	transactions do: [:transaction |	 transaction addSummaryFor: aSummaryReporter 		].
! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 19:21:10'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 19:21:10'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 19:21:10'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 19:21:10'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 19:21:10'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 19:21:10'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 19:21:10'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 19:21:10'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 19:21:10'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 19:21:10'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 19:21:10'!
PASSED!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:24:43'!
executeFor: aReporter
	
	transactions do: [:transaction | transaction executeFor: aReporter].
	
	
! !
!Deposit methodsFor: 'balance' stamp: 'mp 5/30/2023 19:27:16'!
executeFor: aReporter

	^aReporter executeForDepositOf: self.! !
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:27:38'!
executeFor: aReporter

	^aReporter executeForTransferInOf: self.! !
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:27:53'!
executeFor: aReporter

	^aReporter executeForTransferOutOf: self.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:28:06'!
executeFor: aReporter

	^aReporter executeForWithdrawOf: self.! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:29:29'!
executeForDepositOf: aDeposit

	currentReport add: ('Depósito por ', aDeposit value asString , '.').
! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:30:05'!
executeForTransferInOf: aTransferIn  
	
	currentReport add: 'Entrada por transferencia de ', aTransferIn value asString , '.'
! !
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:30:05' prior: 50624712!
addSummaryFor: aSummaryReporter
	
	aSummaryReporter executeForTransferInOf: self .! !

!methodRemoval: SummaryReporter #addTransferInSummaryOf: stamp: 'mp 5/30/2023 19:30:05'!
addTransferInSummaryOf: aTransferIn  
	
	currentReport add: 'Entrada por transferencia de ', aTransferIn value asString , '.'
!
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:30:21'!
executeForTransferOutOf: aTransferOut  
	
	currentReport add: 'Salida por transferencia de ', aTransferOut value asString , '.'
! !
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:30:21' prior: 50624706!
addSummaryFor: aSummaryReporter
	
	aSummaryReporter executeForTransferOutOf: self .! !

!methodRemoval: SummaryReporter #addTransferOutSummaryOf: stamp: 'mp 5/30/2023 19:30:21'!
addTransferOutSummaryOf: aTransferOut  
	
	currentReport add: 'Salida por transferencia de ', aTransferOut value asString , '.'
!
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:30:37'!
executeForWithdrawOf: aWithdraw  

	currentReport add: 'Extracción por ', aWithdraw value asString , '.'
! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:30:38' prior: 50624723!
addSummaryFor: aSummaryReporter
	
	aSummaryReporter executeForWithdrawOf: self .
	! !

!methodRemoval: SummaryReporter #addWithdrawSummaryOf: stamp: 'mp 5/30/2023 19:30:38'!
addWithdrawSummaryOf: aWithdraw  

	currentReport add: 'Extracción por ', aWithdraw value asString , '.'
!

!methodRemoval: SummaryReporter #addDepositSummaryOf: stamp: 'mp 5/30/2023 19:30:44'!
addDepositSummaryOf: aDeposit

	currentReport add: ('Depósito por ', aDeposit value asString , '.').
!
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:30:55' prior: 50624581!
accountSummary
	
	currentReport := OrderedCollection new.
	account executeFor: self.
	currentReport add: ('Balance = ', account balance asString ).
	
	^currentReport! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 19:31:02'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 19:31:02'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 19:31:02'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 19:31:02'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 19:31:03'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 19:31:03'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 19:31:03'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 19:31:03'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 19:31:03'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 19:31:03'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 19:31:03'!
PASSED!

!methodRemoval: Deposit #addSummaryFor: stamp: 'mp 5/30/2023 19:31:22'!
addSummaryFor: aSummaryReporter
	
	aSummaryReporter addDepositSummaryOf: self.!

!methodRemoval: TransferIn #addSummaryFor: stamp: 'mp 5/30/2023 19:31:32'!
addSummaryFor: aSummaryReporter
	
	aSummaryReporter executeForTransferInOf: self .!

!methodRemoval: TransferOut #addSummaryFor: stamp: 'mp 5/30/2023 19:31:35'!
addSummaryFor: aSummaryReporter
	
	aSummaryReporter executeForTransferOutOf: self .!

!methodRemoval: Withdraw #addSummaryFor: stamp: 'mp 5/30/2023 19:31:39'!
addSummaryFor: aSummaryReporter
	
	aSummaryReporter executeForWithdrawOf: self .
	!
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:32:20'!
executeForDepositOf: aDeposit
	! !
!Deposit methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:32:20' prior: 50624371!
affectTransferNetWith: aTransferNetReporter

	^aTransferNetReporter executeForDepositOf: self.! !

!methodRemoval: TransferNetReporter #depositTransferNetOf: stamp: 'mp 5/30/2023 19:32:20'!
depositTransferNetOf: aDeposit
	!
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:32:37'!
executeForTransferInOf: aTransferIn
	currentTransferNet := currentTransferNet + aTransferIn value.! !
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:32:37' prior: 50624383!
affectTransferNetWith: aTransferNetReporter 
	^aTransferNetReporter executeForTransferInOf: self.! !

!methodRemoval: TransferNetReporter #transferInTransferNetOf: stamp: 'mp 5/30/2023 19:32:37'!
transferInTransferNetOf: aTransferIn
	currentTransferNet := currentTransferNet + aTransferIn value.!
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:32:57'!
executeForTransferOutOf: aTransferOut
	currentTransferNet := currentTransferNet - aTransferOut value! !
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:32:58' prior: 50624389!
affectTransferNetWith: aTransferNetReporter 
	^aTransferNetReporter executeForTransferOutOf: self .! !

!methodRemoval: TransferNetReporter #transferOutTransferNetOf: stamp: 'mp 5/30/2023 19:32:58'!
transferOutTransferNetOf: aTransferOut
	currentTransferNet := currentTransferNet - aTransferOut value!
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:33:09'!
executeForWithdrawOf: aWithdraw 
	! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:33:09' prior: 50624395!
affectTransferNetWith: aTransferNetReporter 
	^aTransferNetReporter executeForWithdrawOf: self.! !

!methodRemoval: TransferNetReporter #withdrawTransferNetOf: stamp: 'mp 5/30/2023 19:33:09'!
withdrawTransferNetOf: aWithdraw 
	!
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:33:38' prior: 50624805!
transferNet
	currentTransferNet := 0.
	account executeFor: self.
	^currentTransferNet.! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 19:34:21'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 19:34:21'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 19:34:21'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 19:34:21'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 19:34:21'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 19:34:21'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 19:34:22'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 19:34:22'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 19:34:22'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 19:34:22'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 19:34:22'!
PASSED!

!methodRemoval: ReceptiveAccount #accountSummary: stamp: 'mp 5/30/2023 19:34:31'!
accountSummary: aSummaryReporter

	transactions do: [:transaction |	 transaction addSummaryFor: aSummaryReporter 		].
!

!methodRemoval: ReceptiveAccount #transferNet: stamp: 'mp 5/30/2023 19:34:33'!
transferNet: aTransferNetReporter
	
	transactions do: [:transaction | transaction affectTransferNetWith: aTransferNetReporter].
	
	
!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 19:34:36'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 19:34:36'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 19:34:36'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 19:34:36'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 19:34:36'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 19:34:36'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 19:34:36'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 19:34:36'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 19:34:36'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 19:34:36'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 19:34:37'!
PASSED!

!methodRemoval: Deposit #affectTransferNetWith: stamp: 'mp 5/30/2023 19:34:52'!
affectTransferNetWith: aTransferNetReporter

	^aTransferNetReporter executeForDepositOf: self.!

!methodRemoval: TransferIn #affectTransferNetWith: stamp: 'mp 5/30/2023 19:34:58'!
affectTransferNetWith: aTransferNetReporter 
	^aTransferNetReporter executeForTransferInOf: self.!

!methodRemoval: TransferOut #affectTransferNetWith: stamp: 'mp 5/30/2023 19:35:01'!
affectTransferNetWith: aTransferNetReporter 
	^aTransferNetReporter executeForTransferOutOf: self .!

!methodRemoval: Withdraw #affectTransferNetWith: stamp: 'mp 5/30/2023 19:35:04'!
affectTransferNetWith: aTransferNetReporter 
	^aTransferNetReporter executeForWithdrawOf: self.!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 19:35:07'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 19:35:08'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 19:35:08'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 19:35:08'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 19:35:08'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 19:35:08'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 19:35:08'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 19:35:08'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 19:35:08'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 19:35:08'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 19:35:08'!
PASSED!

Object subclass: #AccountReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReporter category: 'Portfolio-Solucion' stamp: 'mp 5/30/2023 19:37:07'!
Object subclass: #AccountReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountReporter subclass: #SummaryReporter
	instanceVariableNames: 'account currentReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #SummaryReporter category: 'Portfolio-Solucion' stamp: 'mp 5/30/2023 19:37:24'!
AccountReporter subclass: #SummaryReporter
	instanceVariableNames: 'account currentReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountReporter subclass: #TransferNetReporter
	instanceVariableNames: 'account currentTransferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetReporter category: 'Portfolio-Solucion' stamp: 'mp 5/30/2023 19:37:33'!
AccountReporter subclass: #TransferNetReporter
	instanceVariableNames: 'account currentTransferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Object subclass: #AccountReporter
	instanceVariableNames: 'account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReporter category: 'Portfolio-Solucion' stamp: 'mp 5/30/2023 19:38:29'!
Object subclass: #AccountReporter
	instanceVariableNames: 'account2'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReporter methodsFor: 'nil' stamp: 'mp 5/30/2023 19:40:10'!
initializeWith: anAccount
	account2 := anAccount .! !

!classDefinition: #SummaryReporter category: 'Portfolio-Solucion' stamp: 'mp 5/30/2023 19:41:21'!
AccountReporter subclass: #SummaryReporter
	instanceVariableNames: 'currentReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetReporter category: 'Portfolio-Solucion' stamp: 'mp 5/30/2023 19:41:21'!
AccountReporter subclass: #TransferNetReporter
	instanceVariableNames: 'currentTransferNet'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReporter category: 'Portfolio-Solucion' stamp: 'mp 5/30/2023 19:41:21'!
Object subclass: #AccountReporter
	instanceVariableNames: 'account2 account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:41:29' prior: 50625237!
initializeWith: anAccount
	account := anAccount .! !

Object subclass: #AccountReporter
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReporter category: 'Portfolio-Solucion' stamp: 'mp 5/30/2023 19:41:36'!
Object subclass: #AccountReporter
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!methodRemoval: TransferNetReporter #initializeWith: stamp: 'mp 5/30/2023 19:41:59'!
initializeWith: anAccount
	account := anAccount .!

!methodRemoval: SummaryReporter #initializeWith: stamp: 'mp 5/30/2023 19:42:02'!
initializeWith: anAccount
	account := anAccount .!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 19:42:05'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 19:42:05'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 19:42:05'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 19:42:05'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 19:42:05'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 19:42:05'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 19:42:05'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 19:42:05'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 19:42:06'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 19:42:06'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 19:42:06'!
PASSED!
!AccountReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:42:33'!
executeForDepositOf: aDeposit
	self subclassResponsibility ! !
!AccountReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:42:41'!
executeForWithdrawOf: aDeposit
	self subclassResponsibility ! !
!AccountReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:43:01'!
executeForTransferInOf: aTransferIn
	self subclassResponsibility ! !
!AccountReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:43:08' prior: 50625322!
executeForWithdrawOf: aWithdraw
	self subclassResponsibility ! !
!AccountReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:43:23'!
executeForTransferOutOf: aTransferOut
	self subclassResponsibility ! !

----SNAPSHOT----(30 May 2023 19:48:41) CuisUniversity-5799.image priorSource: 9380321!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:52:39'!
test12

	|portfolio acc1 acc2 reporte|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	
	acc1 register: (Deposit for: 100).
	acc1 register: (Withdraw for: 50).
	
	Transfer with: 20 from: acc1 to: acc2.
	Transfer with: 30 from: acc2 to: acc1.
	
	portfolio := Portfolio new.
	
	reporte := OrderedCollection new.
	reporte add: 'Depósito por 100.'.
	reporte add: 'Extracción por 50.'.
	reporte add: 'Salida por transferencia de 20.'.
	reporte add: 'Entrada por transferencia de 30.'.
	reporte add: 'Balance = 60'.
	
	self assert: (SummaryReporter for: acc1) accountSummary equals: reporte.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:54:01' prior: 50625346!
test12

	|portfolio acc1 acc2 reporte|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	
	acc1 register: (Deposit for: 100).
	acc1 register: (Withdraw for: 50).
	
	Transfer with: 20 from: acc1 to: acc2.
	Transfer with: 30 from: acc2 to: acc1.
	
	portfolio := Portfolio with: acc1.
	portfolio add: acc2.
	
	reporte := OrderedCollection new.
	reporte add: 'Depósito por 100.'.
	reporte add: 'Extracción por 50.'.
	reporte add: 'Salida por transferencia de 20.'.
	reporte add: 'Entrada por transferencia de 30.'.
	reporte add: 'Balance = 60'.
	reporte add: 'Entrada por transferencia de 20.'.
	reporte add: 'Salida por transferencia de 30.'.
	reporte add: 'Balance = 50'.
	
	self assert: (SummaryReporter for: acc1) accountSummary equals: reporte.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:55:35' prior: 50625368!
test12

	|portfolio acc1 acc2 reporte|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	
	acc1 register: (Deposit for: 100).
	acc1 register: (Withdraw for: 50).
	
	Transfer with: 20 from: acc1 to: acc2.
	Transfer with: 30 from: acc2 to: acc1.
	
	portfolio := Portfolio with: acc1.
	portfolio add: acc2.
	
	reporte := OrderedCollection new.
	reporte add: 'Depósito por 100.'.
	reporte add: 'Extracción por 50.'.
	reporte add: 'Salida por transferencia de 20.'.
	reporte add: 'Entrada por transferencia de 30.'.
	reporte add: 'Balance = 60'.
	reporte add: 'Entrada por transferencia de 20.'.
	reporte add: 'Salida por transferencia de 30.'.
	reporte add: 'Balance = 50'.
	
	self assert: (SummaryReporter for: portfolio) accountSummary equals: reporte.! !

!testRun: #ReportTest #test12 stamp: 'mp 5/30/2023 19:55:38'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:55:45'!
executeFor: aSummaryReporter 
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:56:17' prior: 50625424!
executeFor: aReporter 
	
	accounts do: [:account | account executeFor: aReporter]! !

!testRun: #ReportTest #test12 stamp: 'mp 5/30/2023 19:56:19'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 19:59:32' prior: 50625395!
test12

	|portfolio acc1 acc2 reporte|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	
	acc1 register: (Deposit for: 100).
	acc1 register: (Withdraw for: 50).
	
	Transfer with: 20 from: acc1 to: acc2.
	Transfer with: 30 from: acc2 to: acc1.
	
	portfolio := Portfolio with: acc1.
	portfolio add: acc2.
	
	reporte := OrderedCollection new.
	reporte add: 'Depósito por 100.'.
	reporte add: 'Extracción por 50.'.
	reporte add: 'Salida por transferencia de 20.'.
	reporte add: 'Entrada por transferencia de 30.'.
	reporte add: 'Entrada por transferencia de 20.'.
	reporte add: 'Salida por transferencia de 30.'.
	reporte add: 'Balance = 50'.
	
	self assert: (SummaryReporter for: portfolio) accountSummary equals: reporte.! !

!testRun: #ReportTest #test12 stamp: 'mp 5/30/2023 19:59:54'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 19:59:54'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 19:59:54'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 19:59:54'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 19:59:54'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 19:59:54'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 19:59:54'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 19:59:54'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 19:59:54'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 19:59:54'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 19:59:54'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 19:59:54'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/30/2023 19:59:54'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 20:01:22'!
test13

	|portfolio acc1 acc2|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	Transfer with: 30 from: acc1 to: acc2.
	Transfer with: 50 from: acc1 to: acc2.
	Transfer with: 20 from: acc2 to: acc1.
	
	portfolio := Portfolio with: acc1.
	portfolio add: acc2.
	
	self assert: (TransferNetReporter for: portfolio) transferNet equals: -60.! !

!testRun: #ReportTest #test13 stamp: 'mp 5/30/2023 20:01:24'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 20:01:29' prior: 50625492!
test13

	|portfolio acc1 acc2|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	Transfer with: 30 from: acc1 to: acc2.
	Transfer with: 50 from: acc1 to: acc2.
	Transfer with: 20 from: acc2 to: acc1.
	
	portfolio := Portfolio with: acc1.
	portfolio add: acc2.
	
	self assert: (TransferNetReporter for: portfolio) transferNet equals: 0.! !

!testRun: #ReportTest #test13 stamp: 'mp 5/30/2023 20:01:30'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 20:01:30'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 20:01:30'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 20:01:31'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 20:01:31'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 20:01:31'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 20:01:31'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 20:01:31'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 20:01:31'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 20:01:31'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 20:01:31'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 20:01:31'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/30/2023 20:01:31'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/30/2023 20:01:31'!
PASSED!

!methodRemoval: ReportTest #test13 stamp: 'mp 5/30/2023 20:01:44'!
test13

	|portfolio acc1 acc2|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	Transfer with: 30 from: acc1 to: acc2.
	Transfer with: 50 from: acc1 to: acc2.
	Transfer with: 20 from: acc2 to: acc1.
	
	portfolio := Portfolio with: acc1.
	portfolio add: acc2.
	
	self assert: (TransferNetReporter for: portfolio) transferNet equals: 0.!

----SNAPSHOT----(30 May 2023 20:03:19) CuisUniversity-5799.image priorSource: 9398150!

!classRenamed: #AccountReporter as: #AccountTransactionsReporter stamp: 'mp 5/30/2023 20:25:30'!
Smalltalk renameClassNamed: #AccountReporter as: #AccountTransactionsReporter!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 20:25:41'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 20:25:41'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 20:25:41'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 20:25:41'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 20:25:41'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 20:25:41'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 20:25:41'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 20:25:41'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 20:25:41'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 20:25:41'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 20:25:41'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/30/2023 20:25:41'!
PASSED!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'mp 5/30/2023 20:36:27'!
test08AccountKnowsItsName

	| account1 |
	
	account1 := ReceptiveAccount named: 'cuenta de juan'.
		
	self assert: 'cuenta de juan' equals: account1 name .
	
! !

!testRun: #ReceptiveAccountTest #test08AccountKnowsItsName stamp: 'mp 5/30/2023 20:36:29'!
ERROR!
!ReceptiveAccount class methodsFor: 'nil' stamp: 'mp 5/30/2023 20:38:33'!
named: aName
	
	^self new initializeWith: aName! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'mp 5/30/2023 20:38:55'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'mp 5/30/2023 20:38:53'!
initializeWith: aName

	super initialize.
	name := aName.
	transactions := OrderedCollection new.! !
!ReceptiveAccount methodsFor: 'nil' stamp: 'mp 5/30/2023 20:39:25' overrides: 16903442!
name
	^name! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'mp 5/30/2023 20:39:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'mp 5/30/2023 20:39:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'mp 5/30/2023 20:39:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'mp 5/30/2023 20:39:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'mp 5/30/2023 20:39:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'mp 5/30/2023 20:39:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'mp 5/30/2023 20:39:49'!
PASSED!

!testRun: #ReceptiveAccountTest #test08AccountKnowsItsName stamp: 'mp 5/30/2023 20:39:49'!
PASSED!
!PortfolioTest methodsFor: 'tests' stamp: 'mp 5/30/2023 20:41:41'!
test16PortfolioKnowsItsName

	| portfolio |
	
	
	
	portfolio := Portfolio named: 'Portfolio de hijos'.
	
	self assert: 'Portfolio de hijos' equals: portfolio name! !

!testRun: #PortfolioTest #test16PortfolioKnowsItsName stamp: 'mp 5/30/2023 20:41:43'!
ERROR!
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 20:41:51'!
named: aRenameMe1 
	self shouldBeImplemented.! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 20:42:15' prior: 50625675!
named: aName 
	^self new initializeWith: aName! !

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'mp 5/30/2023 20:42:44'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'mp 5/30/2023 20:42:43'!
initializeWith: aName

	name := aName.
	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !
!Portfolio methodsFor: 'nil' stamp: 'mp 5/30/2023 20:43:03' overrides: 16903442!
name
	^name! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'mp 5/30/2023 20:43:07'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'mp 5/30/2023 20:43:07'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'mp 5/30/2023 20:43:07'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'mp 5/30/2023 20:43:07'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'mp 5/30/2023 20:43:07'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'mp 5/30/2023 20:43:07'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'mp 5/30/2023 20:43:07'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'mp 5/30/2023 20:43:07'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'mp 5/30/2023 20:43:07'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'mp 5/30/2023 20:43:07'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'mp 5/30/2023 20:43:07'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'mp 5/30/2023 20:43:07'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'mp 5/30/2023 20:43:07'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'mp 5/30/2023 20:43:07'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'mp 5/30/2023 20:43:08'!
PASSED!

!testRun: #PortfolioTest #test16PortfolioKnowsItsName stamp: 'mp 5/30/2023 20:43:08'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 20:51:54'!
test13

	|portfolio reporte|
	
	
	portfolio := Portfolio named: 'Portfolio sin cuentas'.
	
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio sin cuentas'.
	
	
	self assert: portfolio accountNameTree equals: reporte.! !

!testRun: #ReportTest #test13 stamp: 'mp 5/30/2023 20:52:01'!
ERROR!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 20:52:09'!
accountNameTree
	self shouldBeImplemented.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 20:53:21' prior: 50625775!
accountNameTree
	|reporte|
	
	reporte := OrderedCollection new.
	reporte add: name.
	
	^reporte.! !

!testRun: #ReportTest #test13 stamp: 'mp 5/30/2023 20:53:22'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 20:53:22'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 20:53:22'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 20:53:22'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 20:53:22'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 20:53:22'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 20:53:22'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 20:53:22'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 20:53:22'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 20:53:22'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 20:53:22'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 20:53:23'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/30/2023 20:53:23'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/30/2023 20:53:23'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 20:57:40'!
test14

	|portfolio acc1 acc2 reporte reporteHijos|
	
	
	portfolio := Portfolio named: 'Portfolio con cuentas'.
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.	
	acc2 := ReceptiveAccount named: 'Cuenta de Maria'.
	
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio con cuentas'.
	
	reporteHijos  := OrderedCollection new.
	reporteHijos add: acc1 name.
	reporteHijos add: acc2 name.
	reporte add: reporteHijos .
	
	
	self assert: portfolio accountNameTree equals: reporte.! !

!testRun: #ReportTest #test14 stamp: 'mp 5/30/2023 20:57:46'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 20:58:48' prior: 50625780!
accountNameTree
	|reporte|
	
	reporte := OrderedCollection new.
	reporte add: name.
	reporte add: (accounts collect: [:account | account name]).
	
	^reporte.! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 20:58:52'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 20:58:52'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 20:58:52'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 20:58:52'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 20:58:52'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 20:58:52'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 20:58:52'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 20:58:52'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 20:58:52'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 20:58:53'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 20:58:53'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/30/2023 20:58:53'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/30/2023 20:58:53'!
FAILURE!

!testRun: #ReportTest #test14 stamp: 'mp 5/30/2023 20:58:53'!
FAILURE!

!testRun: #ReportTest #test13 stamp: 'mp 5/30/2023 20:59:08'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 21:06:51' prior: 50625838!
accountNameTree
	|reporte accountsChildsNames|
	
	reporte := OrderedCollection new.
	reporte add: name.
	accountsChildsNames := accounts collect: [:account | account name].
	
	accountsChildsNames ifNotEmpty: [reporte add: accountsChildsNames].
	
	^reporte.! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 21:06:56'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 21:06:56'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 21:06:56'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 21:06:56'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 21:06:56'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 21:06:56'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 21:06:56'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 21:06:56'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 21:06:56'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 21:06:56'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 21:06:56'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/30/2023 21:06:56'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/30/2023 21:06:57'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/30/2023 21:06:57'!
FAILURE!

!testRun: #ReportTest #test14 stamp: 'mp 5/30/2023 21:06:57'!
FAILURE!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 21:09:50' prior: 50625880!
accountNameTree
	|reporte accountsChildsNames|
	
	reporte := OrderedCollection new.
	reporte add: name.
	accountsChildsNames := (accounts collect: [:account | account name]).
	
	accountsChildsNames ifNotEmpty: [reporte add: accountsChildsNames].
	
	^reporte.! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 21:09:59'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 21:09:59'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 21:10:00'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 21:10:00'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 21:10:00'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 21:10:00'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 21:10:00'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 21:10:00'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 21:10:00'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 21:10:00'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 21:10:00'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/30/2023 21:10:00'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/30/2023 21:10:00'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/30/2023 21:10:00'!
FAILURE!

!testRun: #ReportTest #test14 stamp: 'mp 5/30/2023 21:10:00'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 21:13:04' prior: 50625817!
test14

	|portfolio acc1 acc2 reporte reporteHijos|
	
	
	portfolio := Portfolio named: 'Portfolio con cuentas'.
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.	
	acc2 := ReceptiveAccount named: 'Cuenta de Maria'.
	portfolio add: acc1.
	portfolio add: acc2.
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio con cuentas'.
	
	reporteHijos  := OrderedCollection new.
	reporteHijos add: acc1 name.
	reporteHijos add: acc2 name.
	reporte add: reporteHijos .
	
	
	self assert: portfolio accountNameTree equals: reporte.! !

!testRun: #ReportTest #test14 stamp: 'mp 5/30/2023 21:13:06'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 21:13:06'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 21:13:06'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 21:13:06'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 21:13:06'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 21:13:06'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 21:13:06'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 21:13:07'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 21:13:07'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 21:13:07'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 21:13:07'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 21:13:07'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/30/2023 21:13:07'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/30/2023 21:13:07'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/30/2023 21:13:07'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 21:14:12'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 21:14:12'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 21:14:12'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 21:14:12'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 21:14:12'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 21:14:12'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 21:14:12'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 21:14:12'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 21:14:12'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 21:14:12'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 21:14:12'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/30/2023 21:14:13'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/30/2023 21:14:13'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/30/2023 21:14:13'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 21:17:32'!
test15

	|portfolio portfolioHijo acc1 reporte reporteHijos reporteCuentasDePortafolioHijo|
	
	
	portfolio := Portfolio named: 'Portfolio con cuentas'.
	portfolioHijo := Portfolio named: 'Portfolio hijo de cuentas'.
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.	
	
	portfolioHijo add: acc1.
	portfolio add: portfolioHijo .
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio con cuentas'.
	
	reporteHijos  := OrderedCollection new.
	reporteHijos add: 'Portfolio hijo de cuentas'.
	
	reporteCuentasDePortafolioHijo := OrderedCollection new.	
	reporteCuentasDePortafolioHijo add: acc1 name.
	
	reporteHijos  add: reporteCuentasDePortafolioHijo.
	reporte add: reporteHijos .
	
	
	self assert: portfolio accountNameTree equals: reporte.! !

!testRun: #ReportTest #test15 stamp: 'mp 5/30/2023 21:17:33'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 21:18:54' prior: 50626054!
test15

	|portfolio portfolioHijo acc1 reporte reporteHijos reporteCuentasDePortafolioHijo|
	
	
	portfolio := Portfolio named: 'Portfolio con cuentas'.
	portfolioHijo := Portfolio named: 'Portfolio hijo de cuentas'.
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.	
	
	portfolioHijo add: acc1.
	portfolio add: portfolioHijo .
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio con cuentas'.
	
	reporteHijos  := OrderedCollection new.
	reporteHijos add: 'Portfolio hijo de cuentas'.
	
	reporteCuentasDePortafolioHijo := OrderedCollection new.	
	reporteCuentasDePortafolioHijo add: 'Cuenta de juan'.
	
	reporteHijos  add: reporteCuentasDePortafolioHijo.
	reporte add: reporteHijos .
	
	
	self assert: portfolio accountNameTree equals: reporte.! !

!testRun: #ReportTest #test15 stamp: 'mp 5/30/2023 21:19:02'!
FAILURE!

	portfolio accountNameTree !

|portfolio portfolioHijo acc1 reporte reporteHijos reporteCuentasDePortafolioHijo|
	
	
	portfolio := Portfolio named: 'Portfolio con cuentas'.
	portfolioHijo := Portfolio named: 'Portfolio hijo de cuentas'.
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.	
	
	portfolioHijo add: acc1.
	portfolio add: portfolioHijo .
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio con cuentas'.
	
	reporteHijos  := OrderedCollection new.
	reporteHijos add: 'Portfolio hijo de cuentas'.
	
	reporteCuentasDePortafolioHijo := OrderedCollection new.	
	reporteCuentasDePortafolioHijo add: 'Cuenta de juan'.
	
	reporteHijos  add: reporteCuentasDePortafolioHijo.
	reporte add: reporteHijos .!

portfolio accountNameTree !

|portfolio portfolioHijo acc1 reporte reporteHijos reporteCuentasDePortafolioHijo|!

	portfolio := Portfolio named: 'Portfolio con cuentas'.!

	portfolioHijo := Portfolio named: 'Portfolio hijo de cuentas'.!

	acc1 := ReceptiveAccount named: 'Cuenta de juan'.	!

	portfolioHijo add: acc1.!

	portfolio add: portfolioHijo .!

	reporte := OrderedCollection new.!

	reporte add: 'Portfolio con cuentas'.!

	reporteHijos  := OrderedCollection new.!

	reporteHijos add: 'Portfolio hijo de cuentas'.!

	reporteCuentasDePortafolioHijo := OrderedCollection new.	!

	reporteCuentasDePortafolioHijo add: 'Cuenta de juan'.!

	reporteHijos  add: reporteCuentasDePortafolioHijo.!

	reporte add: reporteHijos .!

	portfolio accountNameTree !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 21:21:42' prior: 50626083!
test15

	|portfolio portfolioHijo acc1 reporte reporteHijos reporteCuentasDePortafolioHijo|
	
	
	portfolio := Portfolio named: 'Portfolio con cuentas'.
	portfolioHijo := Portfolio named: 'Portfolio hijo de cuentas'.
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.	
	
	portfolioHijo add: acc1.
	portfolio add: portfolioHijo .
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio con cuentas'.
	
	reporteHijos  := OrderedCollection new.
	reporteHijos add: 'Portfolio hijo de cuentas'.
	
	reporteCuentasDePortafolioHijo := OrderedCollection new.	
	reporteCuentasDePortafolioHijo add: 'Cuenta de juan'.
	
	reporteHijos  add: reporteCuentasDePortafolioHijo.
	reporte add: reporteHijos .
	
	
	self assert: portfolio accountNameTree equals: reporte.! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 21:22:46'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 21:22:46'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 21:22:47'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 21:22:47'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 21:22:47'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 21:22:47'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 21:22:47'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 21:22:47'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 21:22:47'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 21:22:47'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 21:22:47'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/30/2023 21:22:47'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/30/2023 21:22:47'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/30/2023 21:22:47'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/30/2023 21:22:47'!
FAILURE!

!testRun: #ReportTest #test15 stamp: 'mp 5/30/2023 21:22:47'!
FAILURE!

----SNAPSHOT----(30 May 2023 21:27:44) CuisUniversity-5799.image priorSource: 9405321!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 21:32:56' prior: 50625925!
accountNameTree
	|reporte accountsChildsNames|
	
	reporte := OrderedCollection new.
	reporte add: name.
	accountsChildsNames := (accounts collect: [:account | account accountNameTree]).
	
	accountsChildsNames ifNotEmpty: [reporte add: accountsChildsNames].
	
	^reporte.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 21:35:18'!
addAccountNameTreeTo: aNameTree
	|reporte accountsChildsNames|
	
	reporte := OrderedCollection new.
	reporte add: name.
	accountsChildsNames := (accounts collect: [:account | account accountNameTree]).
	
	accountsChildsNames ifNotEmpty: [reporte add: accountsChildsNames].
	
	^reporte.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 21:36:28' prior: 50626234!
addAccountNameTreeTo: aNameTree
	|reporte accountsChildsNames|
	
	
	aNameTree add: name.
	accountsChildsNames := (accounts collect: [:account | account accountNameTree]).
	
	accountsChildsNames ifNotEmpty: [reporte add: accountsChildsNames].
	
	^reporte.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 21:37:58' prior: 50626246!
addAccountNameTreeTo: aNameTree
	|reporte accountsChildsNames|
	
	
	aNameTree add: name.
	accountsChildsNames := (accounts collect: [:account | account accountNameTree]).
	
	accountsChildsNames ifNotEmpty: [reporte add: accountsChildsNames].
	
	^reporte.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 21:40:45' prior: 50626223!
accountNameTree
	|reporte |
	
	reporte := OrderedCollection new.
	reporte add: name.
	accounts ifNotEmpty: [ |childsAccountNameTree|
		
		childsAccountNameTree := OrderedCollection new.
		accounts collect: [:account | account addAccountNameTreeTo: childsAccountNameTree ].
		reporte add: childsAccountNameTree].
		
	^reporte.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 21:42:55' prior: 50626257!
addAccountNameTreeTo: aNameTree
	
	aNameTree add: name.
	accounts ifNotEmpty: [ |childsAccountNameTree|
		
		childsAccountNameTree := OrderedCollection new.
		accounts do: [:account | account addAccountNameTreeTo: childsAccountNameTree ].
		aNameTree add: childsAccountNameTree].
	
	
	^aNameTree.! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 21:43:37' prior: 50626268!
accountNameTree
	|reporte |
	
	reporte := OrderedCollection new.
	
	self addAccountNameTreeTo: reporte.	
		
	^reporte.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 21:44:34'!
addAccountNameTreeTo: childsAccountNameTree
	
	childsAccountNameTree add: name.
	
	
! !

!testRun: #ReportTest #test13 stamp: 'mp 5/30/2023 21:44:44'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/30/2023 21:44:47'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/30/2023 21:44:48'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 21:44:50'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 21:44:50'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 21:44:50'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 21:44:50'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 21:44:50'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 21:44:50'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 21:44:50'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 21:44:50'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 21:44:50'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 21:44:50'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 21:44:50'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/30/2023 21:44:51'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/30/2023 21:44:51'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/30/2023 21:44:51'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/30/2023 21:44:51'!
PASSED!

----SNAPSHOT----(30 May 2023 21:46:51) CuisUniversity-5799.image priorSource: 9426215!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/30/2023 21:47:21' prior: 50626282!
addAccountNameTreeTo: aNameTree
	
	aNameTree add: name.
	accounts ifNotEmpty: [ |childsAccountNameTree|
		
		childsAccountNameTree := OrderedCollection new.
		accounts do: [:account | account addAccountNameTreeTo: childsAccountNameTree ].
		aNameTree add: childsAccountNameTree].
	! !

!testRun: #ReportTest #test01 stamp: 'mp 5/30/2023 21:47:25'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/30/2023 21:47:26'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/30/2023 21:47:26'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/30/2023 21:47:26'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/30/2023 21:47:26'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/30/2023 21:47:26'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/30/2023 21:47:26'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/30/2023 21:47:26'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/30/2023 21:47:26'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/30/2023 21:47:26'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/30/2023 21:47:26'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/30/2023 21:47:26'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/30/2023 21:47:26'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/30/2023 21:47:26'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/30/2023 21:47:26'!
PASSED!

----SNAPSHOT----(30 May 2023 21:54:01) CuisUniversity-5799.image priorSource: 9430293!

----QUIT----(30 May 2023 21:56:05) CuisUniversity-5799.image priorSource: 9431845!

----STARTUP---- (31 May 2023 15:08:03) as F:\Manuel\Trabajos\EXACTAS\Ingenieria de Software I\CuisUniversity 26-05-23\Portfolio 2\CuisUniversity-5799.image!


Object subclass: #AccountNameTreeReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountNameTreeReporter category: 'Portfolio-Solucion' stamp: 'mp 5/31/2023 18:22:51'!
Object subclass: #AccountNameTreeReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountNameTreeReporter class methodsFor: 'nil' stamp: 'mp 5/31/2023 18:23:42'!
for: anAccount
	^self new initializeWith: anAccount! !

!classDefinition: #AccountNameTreeReporter category: 'Portfolio-Solucion' stamp: 'mp 5/31/2023 18:24:00'!
Object subclass: #AccountNameTreeReporter
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountNameTreeReporter methodsFor: 'nil' stamp: 'mp 5/31/2023 18:23:58'!
initializeWith: anAccount
	account := anAccount .! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 18:24:31'!
accountNameTree
	^account accountNameTree ! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 18:25:04' prior: 50625763!
test13

	|portfolio reporte|
	
	
	portfolio := Portfolio named: 'Portfolio sin cuentas'.
	
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio sin cuentas'.
	
	
	self assert: (AccountNameTreeReporter for: portfolio) accountNameTree equals: reporte.! !

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 18:25:06'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/31/2023 18:25:06'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/31/2023 18:25:06'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/31/2023 18:25:06'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/31/2023 18:25:06'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/31/2023 18:25:06'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/31/2023 18:25:06'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/31/2023 18:25:06'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/31/2023 18:25:06'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/31/2023 18:25:06'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/31/2023 18:25:07'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/31/2023 18:25:07'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/31/2023 18:25:07'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 18:25:07'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 18:25:07'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 18:25:07'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 18:25:12' prior: 50625970!
test14

	|portfolio acc1 acc2 reporte reporteHijos|
	
	
	portfolio := Portfolio named: 'Portfolio con cuentas'.
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.	
	acc2 := ReceptiveAccount named: 'Cuenta de Maria'.
	portfolio add: acc1.
	portfolio add: acc2.
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio con cuentas'.
	
	reporteHijos  := OrderedCollection new.
	reporteHijos add: acc1 name.
	reporteHijos add: acc2 name.
	reporte add: reporteHijos .
	
	
	self assert: (AccountNameTreeReporter for: portfolio) accountNameTree equals: reporte.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 18:25:18' prior: 50626158!
test15

	|portfolio portfolioHijo acc1 reporte reporteHijos reporteCuentasDePortafolioHijo|
	
	
	portfolio := Portfolio named: 'Portfolio con cuentas'.
	portfolioHijo := Portfolio named: 'Portfolio hijo de cuentas'.
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.	
	
	portfolioHijo add: acc1.
	portfolio add: portfolioHijo .
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio con cuentas'.
	
	reporteHijos  := OrderedCollection new.
	reporteHijos add: 'Portfolio hijo de cuentas'.
	
	reporteCuentasDePortafolioHijo := OrderedCollection new.	
	reporteCuentasDePortafolioHijo add: 'Cuenta de juan'.
	
	reporteHijos  add: reporteCuentasDePortafolioHijo.
	reporte add: reporteHijos .
	
	
	self assert: (AccountNameTreeReporter for: portfolio) accountNameTree equals: reporte.! !

!testRun: #ReportTest #test01 stamp: 'mp 5/31/2023 18:25:19'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/31/2023 18:25:19'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/31/2023 18:25:19'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/31/2023 18:25:19'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/31/2023 18:25:20'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/31/2023 18:25:20'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/31/2023 18:25:20'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/31/2023 18:25:20'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/31/2023 18:25:20'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/31/2023 18:25:20'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/31/2023 18:25:20'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/31/2023 18:25:20'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 18:25:20'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 18:25:20'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 18:25:20'!
PASSED!
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 18:27:30' prior: 50626437!
accountNameTree
	|reporte|
	
	reporte := OrderedCollection new.
	account addAccountNameTreeTo: reporte.
	
	^reporte! !

!testRun: #ReportTest #test01 stamp: 'mp 5/31/2023 18:27:35'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/31/2023 18:27:35'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/31/2023 18:27:36'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/31/2023 18:27:36'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/31/2023 18:27:36'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/31/2023 18:27:36'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/31/2023 18:27:36'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/31/2023 18:27:36'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/31/2023 18:27:36'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/31/2023 18:27:36'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/31/2023 18:27:36'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/31/2023 18:27:36'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 18:27:36'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 18:27:36'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 18:27:36'!
PASSED!

!methodRemoval: Portfolio #accountNameTree stamp: 'mp 5/31/2023 18:28:14'!
accountNameTree
	|reporte |
	
	reporte := OrderedCollection new.
	
	self addAccountNameTreeTo: reporte.	
		
	^reporte.!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 18:34:27'!
addAccountNameTreeTo: childsAccountNameTree for: anAccountNameTreeReporter
	
	childsAccountNameTree add: name.
	
	
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 18:34:36'!
addAccountNameTreeTo: aNameTree  for: anAccountNameTreeReporter
	
	aNameTree add: name.
	accounts ifNotEmpty: [ |childsAccountNameTree|
		
		childsAccountNameTree := OrderedCollection new.
		accounts do: [:account | account addAccountNameTreeTo: childsAccountNameTree ].
		aNameTree add: childsAccountNameTree].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 18:52:14' prior: 50626625!
addAccountNameTreeTo: aNameTree  for: anAccountNameTreeReporter
	
	anAccountNameTreeReporter addNameTreeOfReceptiveAccount: self to: aNameTree ! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 18:52:42'!
addNameTreeOfReceptiveAccount: aReceptiveAccount to: aNameTree 
! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 18:53:09' prior: 50626646!
addNameTreeOfReceptiveAccount: aReceptiveAccount to: aNameTree 

	aNameTree add: aReceptiveAccount name.! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 18:54:04'!
addNameTreeOfPortfolio: aPortfolio to: aNameTree 

! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 18:55:03' prior: 50626659!
addNameTreeOfPortfolio: aPortfolio to: aNameTree 

	aNameTree add: aPortfolio name.
	"accounts ifNotEmpty: [ |childsAccountNameTree|
		
		childsAccountNameTree := OrderedCollection new.
		accounts do: [:account | account addAccountNameTreeTo: childsAccountNameTree ].
		aNameTree add: childsAccountNameTree]."! !
!AccountNameTreeReporter class methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 19:14:57' prior: 50626419!
for: anAccount

	(anAccount isKindOf: ReceptiveAccount ) ifTrue:[self error: 'El reporte es exclusivo para Portfolios'].
	
	^self new initializeWith: anAccount! !
!AccountNameTreeReporter class methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 19:16:05' prior: 50626679!
for: anAccount

	(anAccount isKindOf: Portfolio ) ifFalse: [self error: 'El reporte es exclusivo para Portfolios'].
	
	^self new initializeWith: anAccount! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 19:26:17'!
childAccountsNameTreeWith: aNameTree  for: anAccountNameTreeReporter
	
	aNameTree add: name.
	accounts ifNotEmpty: [ |childsAccountNameTree|
		
		childsAccountNameTree := OrderedCollection new.
		accounts do: [:account | account addAccountNameTreeTo: childsAccountNameTree ].
		aNameTree add: childsAccountNameTree].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 19:27:05' prior: 50626696!
childAccountsNameTreeWith: aNameTree  for: anAccountNameTreeReporter
	
	accounts do: [:account | account addAccountNameTreeTo: aNameTree for: anAccountNameTreeReporter ].
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 19:27:38' prior: 50626638!
addAccountNameTreeTo: aNameTree  for: anAccountNameTreeReporter
	
	anAccountNameTreeReporter addNameTreeOfPortfolio: self to: aNameTree ! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 19:28:09' prior: 50626618!
addAccountNameTreeTo: aNameTree for: anAccountNameTreeReporter
	
	anAccountNameTreeReporter addNameTreeOfPortfolio: self to: aNameTree
	
	
! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 19:28:17' prior: 50626726!
addAccountNameTreeTo: aNameTree for: anAccountNameTreeReporter
	
	anAccountNameTreeReporter addNameTreeOfReceptiveAccount: self to: aNameTree
	
	
! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 19:30:54' prior: 50626665!
addNameTreeOfPortfolio: aPortfolio to: aNameTree 
	|childsAccountNameTree|

	aNameTree add: aPortfolio name.
		
	childsAccountNameTree := OrderedCollection new.
	aPortfolio childAccountsNameTreeWith: childsAccountNameTree for: self.
	
	childsAccountNameTree isEmpty ifFalse: [aNameTree add: childsAccountNameTree].! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 19:32:56' prior: 50626572!
accountNameTree
	|reporte|
	
	reporte := OrderedCollection new.
	self addNameTreeOfPortfolio: account to: reporte .
	
	^reporte! !

!testRun: #ReportTest #test01 stamp: 'mp 5/31/2023 19:33:03'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/31/2023 19:33:03'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/31/2023 19:33:03'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/31/2023 19:33:03'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/31/2023 19:33:03'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/31/2023 19:33:03'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/31/2023 19:33:03'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/31/2023 19:33:04'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/31/2023 19:33:04'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/31/2023 19:33:04'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/31/2023 19:33:04'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/31/2023 19:33:04'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 19:33:04'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 19:33:04'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 19:33:04'!
PASSED!

!methodRemoval: Portfolio #addAccountNameTreeTo: stamp: 'mp 5/31/2023 19:42:55'!
addAccountNameTreeTo: aNameTree
	
	aNameTree add: name.
	accounts ifNotEmpty: [ |childsAccountNameTree|
		
		childsAccountNameTree := OrderedCollection new.
		accounts do: [:account | account addAccountNameTreeTo: childsAccountNameTree ].
		aNameTree add: childsAccountNameTree].
	!

!classDefinition: #AccountNameTreeReporter category: 'Portfolio-Solucion' stamp: 'mp 5/31/2023 19:56:24'!
Object subclass: #AccountNameTreeReporter
	instanceVariableNames: 'account contadorTabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 19:56:22' prior: 50626743!
addNameTreeOfPortfolio: aPortfolio to: aNameTree 
	|childsAccountNameTree|
	
	
	contadorTabs:= 0.
	aNameTree add: aPortfolio name.
		
	childsAccountNameTree := OrderedCollection new.
	aPortfolio childAccountsNameTreeWith: childsAccountNameTree for: self.
	
	childsAccountNameTree isEmpty ifFalse: [aNameTree add: childsAccountNameTree].! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 19:56:51' prior: 50626818!
addNameTreeOfPortfolio: aPortfolio to: aNameTree 
	|childsAccountNameTree|
	
	
	
	aNameTree add: aPortfolio name.
		
	childsAccountNameTree := OrderedCollection new.
	aPortfolio childAccountsNameTreeWith: childsAccountNameTree for: self.
	
	childsAccountNameTree isEmpty ifFalse: [aNameTree add: childsAccountNameTree].! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 19:56:56' prior: 50626757!
accountNameTree
	|reporte|
	
	contadorTabs:= 0.
	reporte := OrderedCollection new.
	self addNameTreeOfPortfolio: account to: reporte .
	
	^reporte! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 19:56:58' prior: 50626846!
accountNameTree
	|reporte|
	
	contadorTabs := 0.
	reporte := OrderedCollection new.
	self addNameTreeOfPortfolio: account to: reporte .
	
	^reporte! !

' ' * 2!

!classDefinition: #AccountNameTreeReporter category: 'Portfolio-Solucion' stamp: 'mp 5/31/2023 20:06:53'!
Object subclass: #AccountNameTreeReporter
	instanceVariableNames: 'account contadorTabs actualTab'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 20:06:52' prior: 50626855!
accountNameTree
	|reporte|
	
	contadorTabs := 0.
	actualTab := ''.
	reporte := OrderedCollection new.
	self addNameTreeOfPortfolio: account to: reporte .
	
	^reporte! !

----SNAPSHOT----(31 May 2023 20:07:12) CuisUniversity-5799.image priorSource: 9431933!

' ' add: ' '!

' ' , ' '!

'portafolio carol' padded: #left to: 3 with: ' '!

'portafolio carol' padded: #left to: 3 with: 'a' !

'portafolio carol' padded: (#left) to: 3 with: #a!

('portafolio carol') padded: (#left) to: 3 with: 'a'!

('portafolio carol') padded: (left) to: 3 with: 'a'!

('portafolio carol') paddingWidth: 3!

('portafolio carol') padded: (#left) to: 3 with: Character backspace !

('portafolio carol') padded: (#left) to: 3 with: $ !

('portafolio carol') padded: (#left) to: 3 with: $a!

'portafolio carol' class padded: (#left) to: 3 with: $a .!

'portafolio carol' class!

'portafolio carol' padded: (#left) to: 3 with: $a .!

self species new: (3 - self size max: 0) withAll: $a!

String new: (3 - self size max: 0) withAll: $a!

String new: (3 - 10 max: 0) withAll: $a!

String new: (3 - (10 max: 0)) withAll: $a !

'123' removeLast !

String new: 3 withAll: ' '!

String new: 3 withAll: $ !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 20:54:13' prior: 50626832!
addNameTreeOfPortfolio: aPortfolio to: aNameTree 
	|childsAccountNameTree|
	
	aNameTree add: (actualTab , aPortfolio name).
	
	actualTab := (actualTab , ' ').
	
	aPortfolio childAccountsNameTreeWith: aNameTree for: self.
	
	childsAccountNameTree isEmpty ifFalse: [aNameTree add: childsAccountNameTree].
	
	"
	aNameTree add: aPortfolio name.
		
	childsAccountNameTree := OrderedCollection new.
	aPortfolio childAccountsNameTreeWith: childsAccountNameTree for: self.
	
	childsAccountNameTree isEmpty ifFalse: [aNameTree add: childsAccountNameTree]."! !

String new: 0 withAll: $  !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 20:56:43' prior: 50626914!
addNameTreeOfPortfolio: aPortfolio to: aNameTree 
	
	
	aNameTree add: (String new: contadorTabs withAll: $ , aPortfolio name).
	
	contadorTabs := contadorTabs + 1.
			
	aPortfolio childAccountsNameTreeWith: aNameTree for: self.
	
	contadorTabs := contadorTabs - 1.
	
		
	"
	aNameTree add: aPortfolio name.
		
	childsAccountNameTree := OrderedCollection new.
	aPortfolio childAccountsNameTreeWith: childsAccountNameTree for: self.
	
	childsAccountNameTree isEmpty ifFalse: [aNameTree add: childsAccountNameTree]."! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 20:57:21' prior: 50626652!
addNameTreeOfReceptiveAccount: aReceptiveAccount to: aNameTree 

	aNameTree add: (String new: contadorTabs withAll: $ , aReceptiveAccount name).
	
	"aNameTree add: aReceptiveAccount name."! !

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 20:58:00'!
ERROR!
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 20:58:37' prior: 50626936!
addNameTreeOfPortfolio: aPortfolio to: aNameTree 
	
	
	aNameTree add: (String new: contadorTabs withAll: ($ ) , aPortfolio name).
	
	contadorTabs := contadorTabs + 1.
			
	aPortfolio childAccountsNameTreeWith: aNameTree for: self.
	
	contadorTabs := contadorTabs - 1.
	
		
	"
	aNameTree add: aPortfolio name.
		
	childsAccountNameTree := OrderedCollection new.
	aPortfolio childAccountsNameTreeWith: childsAccountNameTree for: self.
	
	childsAccountNameTree isEmpty ifFalse: [aNameTree add: childsAccountNameTree]."! !

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 20:58:37'!
ERROR!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 20:58:52'!
ERROR!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 20:59:12'!
ERROR!

$ !

String new: 0 withAll: $ , portfolio name.  !

|portfolio reporte|!

	'portafolio carol' padded: (#left) to: 3 with: $a .!

	portfolio := Portfolio named: 'Portfolio sin cuentas'.!

portfolio name!

String new: 0 withAll: $ , portfolio name.  !

String new: 0 withAll: ' ' , portfolio name.  !

String new: 0 withAll: ' '!

String new: 4 withAll: ' ' !

String new: 4 withAll: $!

String new: 4 withAll: $ !

String new: 4 withAll: $ , portfolio name!

|portfolio tabs|!

tabs := String new: 4 withAll: $ .   !

tabs!

tabs , portfolio name!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 21:03:28'!
ERROR!
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:04:10' prior: 50626968!
addNameTreeOfPortfolio: aPortfolio to: aNameTree 
	|padding|
	
	padding := String new: contadorTabs withAll: $ .
	
	aNameTree add: (padding , aPortfolio name).
	
	contadorTabs := contadorTabs + 1.
			
	aPortfolio childAccountsNameTreeWith: aNameTree for: self.
	
	contadorTabs := contadorTabs - 1.
	
		
	"
	aNameTree add: aPortfolio name.
		
	childsAccountNameTree := OrderedCollection new.
	aPortfolio childAccountsNameTreeWith: childsAccountNameTree for: self.
	
	childsAccountNameTree isEmpty ifFalse: [aNameTree add: childsAccountNameTree]."! !

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 21:04:11'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/31/2023 21:04:11'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/31/2023 21:04:11'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/31/2023 21:04:11'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/31/2023 21:04:11'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/31/2023 21:04:11'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/31/2023 21:04:11'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/31/2023 21:04:11'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/31/2023 21:04:11'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/31/2023 21:04:11'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/31/2023 21:04:11'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/31/2023 21:04:11'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/31/2023 21:04:11'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 21:04:11'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 21:04:11'!
ERROR!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 21:04:11'!
ERROR!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:05:01'!
_test14

	|portfolio acc1 acc2 reporte reporteHijos|
	
	
	portfolio := Portfolio named: 'Portfolio con cuentas'.
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.	
	acc2 := ReceptiveAccount named: 'Cuenta de Maria'.
	portfolio add: acc1.
	portfolio add: acc2.
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio con cuentas'.
	
	reporteHijos  := OrderedCollection new.
	reporteHijos add: acc1 name.
	reporteHijos add: acc2 name.
	reporte add: reporteHijos .
	
	
	self assert: (AccountNameTreeReporter for: portfolio) accountNameTree equals: reporte.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:06:07' prior: 50626489!
test14

	|portfolio acc1 acc2 reporte |
	
	
	portfolio := Portfolio named: 'Portfolio con cuentas'.
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.	
	acc2 := ReceptiveAccount named: 'Cuenta de Maria'.
	portfolio add: acc1.
	portfolio add: acc2.
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio con cuentas'.
	
	reporte add: (' ', acc1 name).
	reporte add: (' ' , acc2 name).
	
	
	self assert: (AccountNameTreeReporter for: portfolio) accountNameTree equals: reporte.! !

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 21:06:08'!
ERROR!
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:07:27' prior: 50626956!
addNameTreeOfReceptiveAccount: aReceptiveAccount to: aNameTree 
	|padding|

	padding := String new: contadorTabs withAll: $ .
	
	aNameTree add: (padding , aReceptiveAccount name).
	
	
	"aNameTree add: aReceptiveAccount name."! !

!testRun: #ReportTest #test01 stamp: 'mp 5/31/2023 21:07:34'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/31/2023 21:07:34'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/31/2023 21:07:34'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/31/2023 21:07:34'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/31/2023 21:07:34'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/31/2023 21:07:34'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/31/2023 21:07:34'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/31/2023 21:07:34'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/31/2023 21:07:35'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/31/2023 21:07:35'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/31/2023 21:07:35'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/31/2023 21:07:35'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 21:07:35'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 21:07:35'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 21:07:35'!
FAILURE!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 21:07:35'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:07:45'!
_test15

	|portfolio portfolioHijo acc1 reporte reporteHijos reporteCuentasDePortafolioHijo|
	
	
	portfolio := Portfolio named: 'Portfolio con cuentas'.
	portfolioHijo := Portfolio named: 'Portfolio hijo de cuentas'.
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.	
	
	portfolioHijo add: acc1.
	portfolio add: portfolioHijo .
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio con cuentas'.
	
	reporteHijos  := OrderedCollection new.
	reporteHijos add: 'Portfolio hijo de cuentas'.
	
	reporteCuentasDePortafolioHijo := OrderedCollection new.	
	reporteCuentasDePortafolioHijo add: 'Cuenta de juan'.
	
	reporteHijos  add: reporteCuentasDePortafolioHijo.
	reporte add: reporteHijos .
	
	
	self assert: (AccountNameTreeReporter for: portfolio) accountNameTree equals: reporte.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:08:44' prior: 50626510!
test15

	|portfolio portfolioHijo acc1 reporte|
	
	
	portfolio := Portfolio named: 'Portfolio con cuentas'.
	portfolioHijo := Portfolio named: 'Portfolio hijo de cuentas'.
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.	
	
	portfolioHijo add: acc1.
	portfolio add: portfolioHijo .
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio con cuentas'.	
	reporte add: ' Portfolio hijo de cuentas'.	
	reporte add: '  Cuenta de juan'.
	
	
	
	self assert: (AccountNameTreeReporter for: portfolio) accountNameTree equals: reporte.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:08:51' prior: 50627186!
test15

	|portfolio portfolioHijo acc1 reporte|
	
	
	portfolio := Portfolio named: 'Portfolio con cuentas'.
	portfolioHijo := Portfolio named: 'Portfolio hijo de cuentas'.
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.	
	
	portfolioHijo add: acc1.
	portfolio add: portfolioHijo .
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio con cuentas'.	
	reporte add: ' Portfolio hijo de cuentas'.	
	reporte add: '  Cuenta de juan'.
		
	
	self assert: (AccountNameTreeReporter for: portfolio) accountNameTree equals: reporte.! !

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 21:08:53'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/31/2023 21:08:54'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/31/2023 21:08:54'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/31/2023 21:08:54'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/31/2023 21:08:54'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/31/2023 21:08:54'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/31/2023 21:08:54'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/31/2023 21:08:54'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/31/2023 21:08:54'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/31/2023 21:08:54'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/31/2023 21:08:54'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/31/2023 21:08:54'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/31/2023 21:08:54'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 21:08:54'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 21:08:54'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 21:08:54'!
PASSED!
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:09:15' prior: 50626873!
accountNameTree
	|reporte|
	
	contadorTabs := 0.
	reporte := OrderedCollection new.
	self addNameTreeOfPortfolio: account to: reporte .
	
	^reporte! !

!classDefinition: #AccountNameTreeReporter category: 'Portfolio-Solucion' stamp: 'mp 5/31/2023 21:09:21'!
Object subclass: #AccountNameTreeReporter
	instanceVariableNames: 'account contadorTabs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:09:50' prior: 50627014!
addNameTreeOfPortfolio: aPortfolio to: aNameTree 
	|padding|
	
	padding := String new: contadorTabs withAll: $ .
	
	aNameTree add: (padding , aPortfolio name).
	
	contadorTabs := contadorTabs + 1.
			
	aPortfolio childAccountsNameTreeWith: aNameTree for: self.
	
	contadorTabs := contadorTabs - 1.	
	! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:10:26'!
actualLeftPadding

	^ String new: contadorTabs withAll: $! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:10:26' prior: 50627279!
addNameTreeOfPortfolio: aPortfolio to: aNameTree 
	|padding|
	
	padding := self actualLeftPadding .
	
	aNameTree add: (padding , aPortfolio name).
	
	contadorTabs := contadorTabs + 1.
			
	aPortfolio childAccountsNameTreeWith: aNameTree for: self.
	
	contadorTabs := contadorTabs - 1.	
	! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:10:26' prior: 50627112!
addNameTreeOfReceptiveAccount: aReceptiveAccount to: aNameTree 
	|padding|

	padding := self actualLeftPadding .
	
	aNameTree add: (padding , aReceptiveAccount name).
	
	
	"aNameTree add: aReceptiveAccount name."! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:10:33' prior: 50627298!
addNameTreeOfPortfolio: aPortfolio to: aNameTree 
	|padding|
	
	padding := self actualLeftPadding .
	
	aNameTree add: (self actualLeftPadding , aPortfolio name).
	
	contadorTabs := contadorTabs + 1.
			
	aPortfolio childAccountsNameTreeWith: aNameTree for: self.
	
	contadorTabs := contadorTabs - 1.	
	! !

!testRun: #ReportTest #test01 stamp: 'mp 5/31/2023 21:10:41'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/31/2023 21:10:41'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/31/2023 21:10:41'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/31/2023 21:10:41'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/31/2023 21:10:42'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/31/2023 21:10:42'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/31/2023 21:10:42'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/31/2023 21:10:42'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/31/2023 21:10:42'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/31/2023 21:10:42'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/31/2023 21:10:42'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/31/2023 21:10:42'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 21:10:42'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 21:10:42'!
FAILURE!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 21:10:42'!
FAILURE!
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:11:16' prior: 50627292!
actualLeftPadding

	^ String new: contadorTabs withAll: $ .! !

!testRun: #ReportTest #test01 stamp: 'mp 5/31/2023 21:11:20'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/31/2023 21:11:20'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/31/2023 21:11:20'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/31/2023 21:11:20'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/31/2023 21:11:21'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/31/2023 21:11:21'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/31/2023 21:11:21'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/31/2023 21:11:21'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/31/2023 21:11:21'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/31/2023 21:11:21'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/31/2023 21:11:21'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/31/2023 21:11:21'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 21:11:21'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 21:11:21'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 21:11:21'!
PASSED!
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:11:42' prior: 50627322!
addNameTreeOfPortfolio: aPortfolio to: aNameTree 
	
	aNameTree add: (self actualLeftPadding , aPortfolio name).
	
	contadorTabs := contadorTabs + 1.
			
	aPortfolio childAccountsNameTreeWith: aNameTree for: self.
	
	contadorTabs := contadorTabs - 1.	
	! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:11:59' prior: 50627311!
addNameTreeOfReceptiveAccount: aReceptiveAccount to: aNameTree 
	
	aNameTree add: (self actualLeftPadding , aReceptiveAccount name).
	! !

!testRun: #ReportTest #test01 stamp: 'mp 5/31/2023 21:12:05'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/31/2023 21:12:05'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/31/2023 21:12:05'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/31/2023 21:12:05'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/31/2023 21:12:05'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/31/2023 21:12:05'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/31/2023 21:12:05'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/31/2023 21:12:05'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/31/2023 21:12:05'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/31/2023 21:12:05'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/31/2023 21:12:05'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/31/2023 21:12:05'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 21:12:06'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 21:12:06'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 21:12:06'!
PASSED!

!classDefinition: #AccountNameTreeReporter category: 'Portfolio-Solucion' stamp: 'mp 5/31/2023 21:15:54'!
Object subclass: #AccountNameTreeReporter
	instanceVariableNames: 'account contadorTabs currentReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:15:53' prior: 50627262!
accountNameTree
	|reporte|
	
	contadorTabs := 0.
	currentReport := OrderedCollection new.
	self addNameTreeOfPortfolio: account to: reporte .
	
	^reporte! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:16:02' prior: 50627470!
accountNameTree
	|reporte|
	
	contadorTabs := 0.
	currentReport := OrderedCollection new.
	self addNameTreeOfPortfolio: account to: reporte .
	
	^currentReport! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:16:29' prior: 50627408!
addNameTreeOfPortfolio: aPortfolio to: aNameTree 
	
	currentReport add: (self actualLeftPadding , aPortfolio name).
	
	contadorTabs := contadorTabs + 1.
			
	aPortfolio childAccountsNameTreeWith: aNameTree for: self.
	
	contadorTabs := contadorTabs - 1.	
	! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:16:38' prior: 50627420!
addNameTreeOfReceptiveAccount: aReceptiveAccount to: aNameTree 
	
	currentReport add: (self actualLeftPadding , aReceptiveAccount name).
	! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:16:56'!
addNameTreeOfReceptiveAccount: aReceptiveAccount  
	
	currentReport add: (self actualLeftPadding , aReceptiveAccount name).
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:16:56' prior: 50626734!
addAccountNameTreeTo: aNameTree for: anAccountNameTreeReporter
	
	anAccountNameTreeReporter addNameTreeOfReceptiveAccount: self ! !

!methodRemoval: AccountNameTreeReporter #addNameTreeOfReceptiveAccount:to: stamp: 'mp 5/31/2023 21:16:56'!
addNameTreeOfReceptiveAccount: aReceptiveAccount to: aNameTree 
	
	currentReport add: (self actualLeftPadding , aReceptiveAccount name).
	!
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:17:12' prior: 50627488!
addNameTreeOfPortfolio: aPortfolio to: aNameTree 
	
	currentReport add: (self actualLeftPadding , aPortfolio name).
	
	contadorTabs := contadorTabs + 1.
			
	aPortfolio childAccountsNameTreeWith: currentReport for: self.
	
	contadorTabs := contadorTabs - 1.	
	! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:17:25'!
addNameTreeOfPortfolio: aPortfolio  
	
	currentReport add: (self actualLeftPadding , aPortfolio name).
	
	contadorTabs := contadorTabs + 1.
			
	aPortfolio childAccountsNameTreeWith: currentReport for: self.
	
	contadorTabs := contadorTabs - 1.	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:17:25' prior: 50626718!
addAccountNameTreeTo: aNameTree  for: anAccountNameTreeReporter
	
	anAccountNameTreeReporter addNameTreeOfPortfolio: self ! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:17:25' prior: 50627479!
accountNameTree
	|reporte|
	
	contadorTabs := 0.
	currentReport := OrderedCollection new.
	self addNameTreeOfPortfolio: account .
	
	^currentReport! !

!methodRemoval: AccountNameTreeReporter #addNameTreeOfPortfolio:to: stamp: 'mp 5/31/2023 21:17:25'!
addNameTreeOfPortfolio: aPortfolio to: aNameTree 
	
	currentReport add: (self actualLeftPadding , aPortfolio name).
	
	contadorTabs := contadorTabs + 1.
			
	aPortfolio childAccountsNameTreeWith: currentReport for: self.
	
	contadorTabs := contadorTabs - 1.	
	!

!methodRemoval: ReceptiveAccount #addAccountNameTreeTo: stamp: 'mp 5/31/2023 21:17:52'!
addAccountNameTreeTo: childsAccountNameTree
	
	childsAccountNameTree add: name.
	
	
!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:18:26'!
addAccountNameTreeFor: anAccountNameTreeReporter
	
	anAccountNameTreeReporter addNameTreeOfReceptiveAccount: self ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:18:35'!
addAccountNameTreeFor: anAccountNameTreeReporter
	
	anAccountNameTreeReporter addNameTreeOfPortfolio: self ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:18:55'!
childAccountsNameTreeWithFor: anAccountNameTreeReporter
	
	accounts do: [:account | account addAccountNameTreeFor: anAccountNameTreeReporter ].
	! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:19:18' prior: 50627544!
addNameTreeOfPortfolio: aPortfolio  
	
	currentReport add: (self actualLeftPadding , aPortfolio name).
	
	contadorTabs := contadorTabs + 1.
			
	aPortfolio childAccountsNameTreeFor: self.
	
	contadorTabs := contadorTabs - 1.	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:19:32'!
childAccountsNameTreeFor: anAccountNameTreeReporter
	
	accounts do: [:account | account addAccountNameTreeFor: anAccountNameTreeReporter ].
	! !

!methodRemoval: Portfolio #childAccountsNameTreeWithFor: stamp: 'mp 5/31/2023 21:19:32'!
childAccountsNameTreeWithFor: anAccountNameTreeReporter
	
	accounts do: [:account | account addAccountNameTreeFor: anAccountNameTreeReporter ].
	!

!testRun: #ReportTest #test01 stamp: 'mp 5/31/2023 21:19:41'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/31/2023 21:19:41'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/31/2023 21:19:41'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/31/2023 21:19:41'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/31/2023 21:19:41'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/31/2023 21:19:41'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/31/2023 21:19:41'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/31/2023 21:19:41'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/31/2023 21:19:41'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/31/2023 21:19:41'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/31/2023 21:19:41'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/31/2023 21:19:41'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 21:19:42'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 21:19:42'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 21:19:42'!
PASSED!

!methodRemoval: Portfolio #childAccountsNameTreeWith:for: stamp: 'mp 5/31/2023 21:19:47'!
childAccountsNameTreeWith: aNameTree  for: anAccountNameTreeReporter
	
	accounts do: [:account | account addAccountNameTreeTo: aNameTree for: anAccountNameTreeReporter ].
	!

!methodRemoval: Portfolio #addAccountNameTreeTo:for: stamp: 'mp 5/31/2023 21:19:51'!
addAccountNameTreeTo: aNameTree  for: anAccountNameTreeReporter
	
	anAccountNameTreeReporter addNameTreeOfPortfolio: self !

!methodRemoval: ReceptiveAccount #addAccountNameTreeTo:for: stamp: 'mp 5/31/2023 21:20:01'!
addAccountNameTreeTo: aNameTree for: anAccountNameTreeReporter
	
	anAccountNameTreeReporter addNameTreeOfReceptiveAccount: self !

!testRun: #ReportTest #test01 stamp: 'mp 5/31/2023 21:20:16'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/31/2023 21:20:16'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/31/2023 21:20:16'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/31/2023 21:20:16'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/31/2023 21:20:16'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/31/2023 21:20:16'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/31/2023 21:20:17'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/31/2023 21:20:17'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/31/2023 21:20:17'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/31/2023 21:20:17'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/31/2023 21:20:17'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/31/2023 21:20:17'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 21:20:17'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 21:20:17'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 21:20:17'!
PASSED!
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:29:17'!
executeForPortfolioOf: aPortfolio  
	
	currentReport add: (self actualLeftPadding , aPortfolio name).
	
	contadorTabs := contadorTabs + 1.
			
	aPortfolio childAccountsNameTreeFor: self.
	
	contadorTabs := contadorTabs - 1.	
	! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:29:17' prior: 50627595!
addAccountNameTreeFor: anAccountNameTreeReporter
	
	anAccountNameTreeReporter executeForPortfolioOf: self ! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:29:17' prior: 50627563!
accountNameTree
	|reporte|
	
	contadorTabs := 0.
	currentReport := OrderedCollection new.
	self executeForPortfolioOf: account .
	
	^currentReport! !

!methodRemoval: AccountNameTreeReporter #addNameTreeOfPortfolio: stamp: 'mp 5/31/2023 21:29:17'!
addNameTreeOfPortfolio: aPortfolio  
	
	currentReport add: (self actualLeftPadding , aPortfolio name).
	
	contadorTabs := contadorTabs + 1.
			
	aPortfolio childAccountsNameTreeFor: self.
	
	contadorTabs := contadorTabs - 1.	
	!
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:29:41'!
executeForReceptiveAccountOf: aReceptiveAccount  
	
	currentReport add: (self actualLeftPadding , aReceptiveAccount name).
	! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:29:41' prior: 50627588!
addAccountNameTreeFor: anAccountNameTreeReporter
	
	anAccountNameTreeReporter executeForReceptiveAccountOf: self ! !

!methodRemoval: AccountNameTreeReporter #addNameTreeOfReceptiveAccount: stamp: 'mp 5/31/2023 21:29:41'!
addNameTreeOfReceptiveAccount: aReceptiveAccount  
	
	currentReport add: (self actualLeftPadding , aReceptiveAccount name).
	!

!classDefinition: #AccountNameTreeReporter category: 'Portfolio-Solucion' stamp: 'mp 5/31/2023 21:30:27'!
Object subclass: #AccountNameTreeReporter
	instanceVariableNames: 'account tabsCounter currentReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:30:27' prior: 50627369!
actualLeftPadding

	^ String new: tabsCounter withAll: $ .! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:30:27' prior: 50627723!
executeForPortfolioOf: aPortfolio  
	
	currentReport add: (self actualLeftPadding , aPortfolio name).
	
	tabsCounter := tabsCounter + 1.
			
	aPortfolio childAccountsNameTreeFor: self.
	
	tabsCounter := tabsCounter - 1.	
	! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:30:27' prior: 50627741!
accountNameTree
	|reporte|
	
	tabsCounter := 0.
	currentReport := OrderedCollection new.
	self executeForPortfolioOf: account .
	
	^currentReport! !

!classDefinition: #AccountNameTreeReporter category: 'Portfolio-Solucion' stamp: 'mp 5/31/2023 21:30:36'!
Object subclass: #AccountNameTreeReporter
	instanceVariableNames: 'portfolio tabsCounter currentReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:30:36' prior: 50626432!
initializeWith: anAccount
	portfolio := anAccount .! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:30:36' prior: 50627808!
accountNameTree
	|reporte|
	
	tabsCounter := 0.
	currentReport := OrderedCollection new.
	self executeForPortfolioOf: portfolio .
	
	^currentReport! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:31:58'!
executeForAccountFor: anAccountNameTreeReporter
	
	anAccountNameTreeReporter executeForPortfolioOf: self ! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:31:58'!
executeForAccountFor: anAccountNameTreeReporter
	
	anAccountNameTreeReporter executeForReceptiveAccountOf: self ! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:31:58' prior: 50627619!
childAccountsNameTreeFor: anAccountNameTreeReporter
	
	accounts do: [:account | account executeForAccountFor: anAccountNameTreeReporter ].
	! !

!methodRemoval: Portfolio #addAccountNameTreeFor: stamp: 'mp 5/31/2023 21:31:58'!
addAccountNameTreeFor: anAccountNameTreeReporter
	
	anAccountNameTreeReporter executeForPortfolioOf: self !

!methodRemoval: ReceptiveAccount #addAccountNameTreeFor: stamp: 'mp 5/31/2023 21:31:58'!
addAccountNameTreeFor: anAccountNameTreeReporter
	
	anAccountNameTreeReporter executeForReceptiveAccountOf: self !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:33:24'!
executeOnChildsAccountsFor: anAccountNameTreeReporter
	
	accounts do: [:account | account executeForAccountFor: anAccountNameTreeReporter ].
	! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:33:24' prior: 50627797!
executeForPortfolioOf: aPortfolio  
	
	currentReport add: (self actualLeftPadding , aPortfolio name).
	
	tabsCounter := tabsCounter + 1.
			
	aPortfolio executeOnChildsAccountsFor: self.
	
	tabsCounter := tabsCounter - 1.	
	! !

!methodRemoval: Portfolio #childAccountsNameTreeFor: stamp: 'mp 5/31/2023 21:33:24'!
childAccountsNameTreeFor: anAccountNameTreeReporter
	
	accounts do: [:account | account executeForAccountFor: anAccountNameTreeReporter ].
	!

!testRun: #ReportTest #test01 stamp: 'mp 5/31/2023 21:33:33'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/31/2023 21:33:33'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/31/2023 21:33:33'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/31/2023 21:33:33'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/31/2023 21:33:33'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/31/2023 21:33:33'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/31/2023 21:33:33'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/31/2023 21:33:33'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/31/2023 21:33:33'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/31/2023 21:33:33'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/31/2023 21:33:33'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/31/2023 21:33:33'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 21:33:33'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 21:33:33'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 21:33:33'!
PASSED!
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:35:41'!
executeOnTransactionsFor: aReporter 
	
	accounts do: [:account | account executeFor: aReporter]! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:35:41'!
executeOnTransactionsFor: aReporter
	
	transactions do: [:transaction | transaction executeFor: aReporter].
	
	
! !
!Deposit methodsFor: 'balance' stamp: 'mp 5/31/2023 21:35:41'!
executeOnTransactionsFor: aReporter

	^aReporter executeForDepositOf: self.! !
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:35:41'!
executeOnTransactionsFor: aReporter

	^aReporter executeForTransferInOf: self.! !
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:35:41'!
executeOnTransactionsFor: aReporter

	^aReporter executeForTransferOutOf: self.! !
!Withdraw methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:35:41'!
executeOnTransactionsFor: aReporter

	^aReporter executeForWithdrawOf: self.! !
!SummaryReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:35:41' prior: 50624948!
accountSummary
	
	currentReport := OrderedCollection new.
	account executeOnTransactionsFor: self.
	currentReport add: ('Balance = ', account balance asString ).
	
	^currentReport! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:35:41' prior: 50625429!
executeFor: aReporter 
	
	accounts do: [:account | account executeOnTransactionsFor: aReporter]! !
!TransferNetReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:35:41' prior: 50625070!
transferNet
	currentTransferNet := 0.
	account executeOnTransactionsFor: self.
	^currentTransferNet.! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:35:41' prior: 50624850!
executeFor: aReporter
	
	transactions do: [:transaction | transaction executeOnTransactionsFor: aReporter].
	
	
! !
!Portfolio methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:35:41' prior: 50627932!
executeOnTransactionsFor: aReporter 
	
	accounts do: [:account | account executeOnTransactionsFor: aReporter]! !
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:35:41' prior: 50627938!
executeOnTransactionsFor: aReporter
	
	transactions do: [:transaction | transaction executeOnTransactionsFor: aReporter].
	
	
! !

!methodRemoval: Portfolio #executeFor: stamp: 'mp 5/31/2023 21:35:41'!
executeFor: aReporter 
	
	accounts do: [:account | account executeOnTransactionsFor: aReporter]!

!methodRemoval: ReceptiveAccount #executeFor: stamp: 'mp 5/31/2023 21:35:41'!
executeFor: aReporter
	
	transactions do: [:transaction | transaction executeOnTransactionsFor: aReporter].
	
	
!

!methodRemoval: Deposit #executeFor: stamp: 'mp 5/31/2023 21:35:41'!
executeFor: aReporter

	^aReporter executeForDepositOf: self.!

!methodRemoval: TransferIn #executeFor: stamp: 'mp 5/31/2023 21:35:42'!
executeFor: aReporter

	^aReporter executeForTransferInOf: self.!

!methodRemoval: TransferOut #executeFor: stamp: 'mp 5/31/2023 21:35:42'!
executeFor: aReporter

	^aReporter executeForTransferOutOf: self.!

!methodRemoval: Withdraw #executeFor: stamp: 'mp 5/31/2023 21:35:42'!
executeFor: aReporter

	^aReporter executeForWithdrawOf: self.!
!Deposit methodsFor: 'balance' stamp: 'mp 5/31/2023 21:36:59'!
executeOnTransactionFor: aReporter

	^aReporter executeForDepositOf: self.! !

!methodRemoval: Deposit #executeOnTransactionsFor: stamp: 'mp 5/31/2023 21:36:59'!
executeOnTransactionsFor: aReporter

	^aReporter executeForDepositOf: self.!
!TransferIn methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:37:29'!
executeOnTransactionFor: aReporter

	^aReporter executeForTransferInOf: self.! !

!methodRemoval: TransferIn #executeOnTransactionsFor: stamp: 'mp 5/31/2023 21:37:29'!
executeOnTransactionsFor: aReporter

	^aReporter executeForTransferInOf: self.!
!TransferOut methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:37:38'!
executeOnTransactionFor: aReporter

	^aReporter executeForTransferOutOf: self.! !

!methodRemoval: TransferOut #executeOnTransactionsFor: stamp: 'mp 5/31/2023 21:37:38'!
executeOnTransactionsFor: aReporter

	^aReporter executeForTransferOutOf: self.!
!Withdraw methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:37:47'!
executeOnTransactionFor: aReporter

	^aReporter executeForWithdrawOf: self.! !

!methodRemoval: Withdraw #executeOnTransactionsFor: stamp: 'mp 5/31/2023 21:37:47'!
executeOnTransactionsFor: aReporter

	^aReporter executeForWithdrawOf: self.!
!ReceptiveAccount methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:37:55' prior: 50628003!
executeOnTransactionsFor: aReporter
	
	transactions do: [:transaction | transaction executeOnTransactionFor: aReporter].
	
	
! !

!testRun: #ReportTest #test01 stamp: 'mp 5/31/2023 21:37:59'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/31/2023 21:37:59'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/31/2023 21:37:59'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/31/2023 21:37:59'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/31/2023 21:37:59'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/31/2023 21:37:59'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/31/2023 21:38:00'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/31/2023 21:38:00'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/31/2023 21:38:00'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/31/2023 21:38:00'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/31/2023 21:38:00'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/31/2023 21:38:00'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 21:38:00'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 21:38:00'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 21:38:00'!
PASSED!

Object subclass: #PortfolioReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #PortfolioReporter category: 'Portfolio-Solucion' stamp: 'mp 5/31/2023 21:40:39'!
Object subclass: #PortfolioReporter
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

PortfolioReporter subclass: #AccountNameTreeReporter
	instanceVariableNames: 'portfolio tabsCounter currentReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountNameTreeReporter category: 'Portfolio-Solucion' stamp: 'mp 5/31/2023 21:40:51'!
PortfolioReporter subclass: #AccountNameTreeReporter
	instanceVariableNames: 'portfolio tabsCounter currentReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!PortfolioReporter methodsFor: 'nil' stamp: 'mp 5/31/2023 21:41:14'!
executeForPortfolioOf: aPortfolio  
	self subclassResponsibility ! !
!PortfolioReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:41:25'!
executeForReceptiveAccountOf: aReceptiveAccount  
	self subclassResponsibility ! !
!Account methodsFor: 'nil' stamp: 'mp 5/31/2023 21:42:33' overrides: 16903442!
name
	self subclassResponsibility ! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:44:56' prior: 50627826!
initializeWith: aPortfolio
	portfolio := aPortfolio .! !
!AccountNameTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:45:18' prior: 50627832!
accountNameTree
	
	tabsCounter := 0.
	currentReport := OrderedCollection new.
	self executeForPortfolioOf: portfolio .
	
	^currentReport! !

!testRun: #ReportTest #test01 stamp: 'mp 5/31/2023 21:45:21'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/31/2023 21:45:21'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/31/2023 21:45:21'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/31/2023 21:45:21'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/31/2023 21:45:21'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/31/2023 21:45:21'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/31/2023 21:45:21'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/31/2023 21:45:21'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/31/2023 21:45:21'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/31/2023 21:45:21'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/31/2023 21:45:21'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/31/2023 21:45:21'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 21:45:21'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 21:45:21'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 21:45:21'!
PASSED!

PortfolioReporter subclass: #AccountTransactionsTreeReporter
	instanceVariableNames: 'portfolio tabsCounter currentReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountTransactionsTreeReporter category: 'Portfolio-Solucion' stamp: 'mp 5/31/2023 21:53:41'!
PortfolioReporter subclass: #AccountTransactionsTreeReporter
	instanceVariableNames: 'portfolio tabsCounter currentReport'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountTransactionsTreeReporter class methodsFor: 'nil' stamp: 'mp 5/31/2023 21:54:18'!
for: anAccount

	(anAccount isKindOf: Portfolio ) ifFalse: [self error: 'El reporte es exclusivo para Portfolios'].
	
	^self new initializeWith: anAccount! !
!AccountTransactionsTreeReporter methodsFor: 'nil' stamp: 'mp 5/31/2023 21:56:09'!
initializeWith: aPortfolio
	portfolio := aPortfolio .! !
!AccountTransactionsTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 21:56:59'!
accountTransactionsTree
	
	tabsCounter := 0.
	currentReport := OrderedCollection new.
	self executeForPortfolioOf: portfolio .
	
	^currentReport! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:01:22'!
test16

	|portfolio acc1 reporte|
	
	
	portfolio := Portfolio named: 'Portfolio con cuentas'.
	
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.		
	acc1 register: (Deposit for: 250).
	acc1 register: (Withdraw for: 50).
	
	portfolio add: acc1 .
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio con cuentas'.		
	reporte add: ' Cuenta de juan'.
	reporte add: '  Depósito por 250'.	
	reporte add: '  Extracción por 50'.		
	
	self assert: (AccountTransactionsTreeReporter for: portfolio) accountNameTree equals: reporte.
	
	! !

!testRun: #ReportTest #test16 stamp: 'mp 5/31/2023 22:01:24'!
ERROR!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:01:37' prior: 50628249!
test16

	|portfolio acc1 reporte|
	
	
	portfolio := Portfolio named: 'Portfolio con cuentas'.
	
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.		
	acc1 register: (Deposit for: 250).
	acc1 register: (Withdraw for: 50).
	
	portfolio add: acc1 .
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio con cuentas'.		
	reporte add: ' Cuenta de juan'.
	reporte add: '  Depósito por 250'.	
	reporte add: '  Extracción por 50'.		
	
	self assert: (AccountTransactionsTreeReporter for: portfolio) accountTransactionsTree equals: reporte.
	
	! !

!testRun: #ReportTest #test16 stamp: 'mp 5/31/2023 22:01:39'!
ERROR!
!AccountTransactionsTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:02:15' overrides: 50628149!
executeForPortfolioOf: aPortfolio  
	
	currentReport add: (self actualLeftPadding , aPortfolio name).
	
	tabsCounter := tabsCounter + 1.
			
	aPortfolio executeOnChildsAccountsFor: self.
	
	tabsCounter := tabsCounter - 1.	
	! !
!AccountTransactionsTreeReporter methodsFor: 'nil' stamp: 'mp 5/31/2023 22:02:30'!
actualLeftPadding

	^ String new: tabsCounter withAll: $ .! !
!AccountTransactionsTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:02:44' overrides: 50628154!
executeForReceptiveAccountOf: aReceptiveAccount  
	
	currentReport add: (self actualLeftPadding , aReceptiveAccount name).
	! !
!AccountTransactionsTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:04:38' prior: 50628311 overrides: 50628154!
executeForReceptiveAccountOf: aReceptiveAccount  
	|reporteTransactions|
	
	currentReport add: (self actualLeftPadding , aReceptiveAccount name).
	
	reporteTransactions := (SummaryReporter for: aReceptiveAccount ) .
	! !

!classRenamed: #SummaryReporter as: #AccountSummaryReporter stamp: 'mp 5/31/2023 22:05:11'!
Smalltalk renameClassNamed: #SummaryReporter as: #AccountSummaryReporter!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:05:11' prior: 50625437!
test12

	|portfolio acc1 acc2 reporte|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	
	acc1 register: (Deposit for: 100).
	acc1 register: (Withdraw for: 50).
	
	Transfer with: 20 from: acc1 to: acc2.
	Transfer with: 30 from: acc2 to: acc1.
	
	portfolio := Portfolio with: acc1.
	portfolio add: acc2.
	
	reporte := OrderedCollection new.
	reporte add: 'Depósito por 100.'.
	reporte add: 'Extracción por 50.'.
	reporte add: 'Salida por transferencia de 20.'.
	reporte add: 'Entrada por transferencia de 30.'.
	reporte add: 'Entrada por transferencia de 20.'.
	reporte add: 'Salida por transferencia de 30.'.
	reporte add: 'Balance = 50'.
	
	self assert: (AccountSummaryReporter for: portfolio) accountSummary equals: reporte.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:05:11' prior: 50623177!
test03

	|acc1 reporte|
	
	acc1 := ReceptiveAccount new register: (Withdraw for: 100).	
	reporte := OrderedCollection new.
	reporte add: 'Extracción por 100.'.
	reporte add: 'Balance = -100'.
	
	self assert: (AccountSummaryReporter for: acc1) accountSummary equals: reporte.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:05:11' prior: 50623229!
test05

	|acc1 acc2 reporte|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	Transfer with: 30 from: acc2 to: acc1.
	
	reporte := OrderedCollection new.
	reporte add: 'Entrada por transferencia de 30.'.
	reporte add: 'Balance = 30'.
	
	self assert: (AccountSummaryReporter for: acc1) accountSummary equals: reporte.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:05:11' prior: 50623165!
test02

	|acc1 reporte|
	
	acc1 := ReceptiveAccount new register: (Deposit for: 50).	
	reporte := OrderedCollection new.
	reporte add: 'Depósito por 50.'.
	reporte add: 'Balance = 50'.
	
	self assert: (AccountSummaryReporter for: acc1) accountSummary equals: reporte.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:05:11' prior: 50623269!
test06

	|acc1 acc2 reporte|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	
	acc1 register: (Deposit for: 100).
	acc1 register: (Withdraw for: 50).
	
	Transfer with: 20 from: acc1 to: acc2.
	Transfer with: 30 from: acc2 to: acc1.
	
	reporte := OrderedCollection new.
	reporte add: 'Depósito por 100.'.
	reporte add: 'Extracción por 50.'.
	reporte add: 'Salida por transferencia de 20.'.
	reporte add: 'Entrada por transferencia de 30.'.
	reporte add: 'Balance = 60'.
	
	self assert: (AccountSummaryReporter for: acc1) accountSummary equals: reporte.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:05:11' prior: 50623189!
test04

	|acc1 acc2 reporte|
	
	acc1 := ReceptiveAccount new.	
	acc2 := ReceptiveAccount new.
	Transfer with: 20 from: acc1 to: acc2.
	
	reporte := OrderedCollection new.
	reporte add: 'Salida por transferencia de 20.'.
	reporte add: 'Balance = -20'.
	
	self assert: (AccountSummaryReporter for: acc1) accountSummary equals: reporte.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:05:11' prior: 50623123!
test01

	|acc1 reporte|
	
	acc1 := ReceptiveAccount new.	
	
	reporte := OrderedCollection new.
	reporte add: 'Balance = 0'.
	
	self assert: (AccountSummaryReporter for: acc1) accountSummary equals: reporte.! !
!AccountTransactionsTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:05:11' prior: 50628320 overrides: 50628154!
executeForReceptiveAccountOf: aReceptiveAccount  
	|reporteTransactions|
	
	currentReport add: (self actualLeftPadding , aReceptiveAccount name).
	
	reporteTransactions := (AccountSummaryReporter for: aReceptiveAccount ) .
	! !

!testRun: #ReportTest #test01 stamp: 'mp 5/31/2023 22:05:22'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/31/2023 22:05:22'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/31/2023 22:05:22'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/31/2023 22:05:22'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/31/2023 22:05:22'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/31/2023 22:05:22'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/31/2023 22:05:22'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/31/2023 22:05:22'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/31/2023 22:05:22'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/31/2023 22:05:22'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/31/2023 22:05:22'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/31/2023 22:05:22'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 22:05:22'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 22:05:22'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 22:05:22'!
PASSED!

!testRun: #ReportTest #test16 stamp: 'mp 5/31/2023 22:05:22'!
FAILURE!

!testRun: #ReportTest #test16 stamp: 'mp 5/31/2023 22:05:22'!
FAILURE!

----SNAPSHOT----(31 May 2023 22:07:46) CuisUniversity-5799.image priorSource: 9447368!
!AccountTransactionsTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:32:18' prior: 50628447 overrides: 50628154!
executeForReceptiveAccountOf: aReceptiveAccount  
	|reporteTransactions|
	
	currentReport add: (self actualLeftPadding , aReceptiveAccount name).
	
	reporteTransactions := (AccountSummaryReporter for: aReceptiveAccount ) accountSummary .
	
	reporteTransactions do: [:message | currentReport add: (self actualLeftPadding , message)].! !
!AccountTransactionsTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:32:56'!
incrementTabCounter

	^ tabsCounter := tabsCounter + 1! !
!AccountTransactionsTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:32:56' prior: 50628295 overrides: 50628149!
executeForPortfolioOf: aPortfolio  
	
	currentReport add: (self actualLeftPadding , aPortfolio name).
	
	self incrementTabCounter.
			
	aPortfolio executeOnChildsAccountsFor: self.
	
	tabsCounter := tabsCounter - 1.	
	! !
!AccountTransactionsTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:33:16'!
decreseTabCounter

	^ tabsCounter := tabsCounter - 1! !
!AccountTransactionsTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:33:16' prior: 50628520 overrides: 50628149!
executeForPortfolioOf: aPortfolio  
	
	currentReport add: (self actualLeftPadding , aPortfolio name).
	
	self incrementTabCounter.
			
	aPortfolio executeOnChildsAccountsFor: self.
	
	self decreseTabCounter.	
	! !
!AccountTransactionsTreeReporter methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:34:18' prior: 50628499 overrides: 50628154!
executeForReceptiveAccountOf: aReceptiveAccount  
	|reporteTransactions|
	
	currentReport add: (self actualLeftPadding , aReceptiveAccount name).
	
	self incrementTabCounter .
	
	reporteTransactions := (AccountSummaryReporter for: aReceptiveAccount ) accountSummary .
	
	reporteTransactions do: [:message | currentReport add: (self actualLeftPadding , message)].
	
	self decreseTabCounter .! !
!AccountTransactionsTreeReporter methodsFor: 'tabs padding' stamp: 'mp 5/31/2023 22:34:29' prior: 50628531!
decreseTabCounter

	tabsCounter := tabsCounter - 1! !
!AccountTransactionsTreeReporter methodsFor: 'tabs padding' stamp: 'mp 5/31/2023 22:34:32' prior: 50628513!
incrementTabCounter

	tabsCounter := tabsCounter + 1! !

!testRun: #ReportTest #test01 stamp: 'mp 5/31/2023 22:34:46'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/31/2023 22:34:46'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/31/2023 22:34:47'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/31/2023 22:34:47'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/31/2023 22:34:47'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/31/2023 22:34:47'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/31/2023 22:34:47'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/31/2023 22:34:47'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/31/2023 22:34:47'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/31/2023 22:34:47'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/31/2023 22:34:47'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/31/2023 22:34:47'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 22:34:47'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 22:34:47'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 22:34:47'!
PASSED!

!testRun: #ReportTest #test16 stamp: 'mp 5/31/2023 22:34:47'!
FAILURE!

!testRun: #ReportTest #test16 stamp: 'mp 5/31/2023 22:34:47'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:35:53' prior: 50628271!
test16

	|portfolio acc1 reporte|
	
	
	portfolio := Portfolio named: 'Portfolio con cuentas'.
	
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.		
	acc1 register: (Deposit for: 250).
	acc1 register: (Withdraw for: 50).
	
	portfolio add: acc1 .
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio con cuentas'.		
	reporte add: ' Cuenta de juan'.
	reporte add: '  Depósito por 250'.	
	reporte add: '  Extracción por 50'.		
	reporte add: '  Balance = 200'.		
	
	self assert: (AccountTransactionsTreeReporter for: portfolio) accountTransactionsTree equals: reporte.
	
	! !

!testRun: #ReportTest #test16 stamp: 'mp 5/31/2023 22:35:56'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:38:27' prior: 50628613!
test16

	|portfolio acc1 reporte|
	
	
	portfolio := Portfolio named: 'Portfolio con cuentas'.
	
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.		
	acc1 register: (Deposit for: 250).
	acc1 register: (Withdraw for: 50).
	
	portfolio add: acc1 .
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio con cuentas'.		
	reporte add: ' Cuenta de juan'.
	reporte add: '  Depósito por 250.'.	
	reporte add: '  Extracción por 50.'.		
	reporte add: '  Balance = 200'.		
	
	self assert: (AccountTransactionsTreeReporter for: portfolio) accountTransactionsTree equals: reporte.
	
	! !

!testRun: #ReportTest #test16 stamp: 'mp 5/31/2023 22:38:30'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/31/2023 22:38:30'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/31/2023 22:38:30'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/31/2023 22:38:30'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/31/2023 22:38:30'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/31/2023 22:38:30'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/31/2023 22:38:30'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/31/2023 22:38:30'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/31/2023 22:38:30'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/31/2023 22:38:30'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/31/2023 22:38:30'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/31/2023 22:38:30'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/31/2023 22:38:30'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 22:38:30'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 22:38:30'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 22:38:30'!
PASSED!

!testRun: #ReportTest #test16 stamp: 'mp 5/31/2023 22:38:30'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'mp 5/31/2023 22:43:27' prior: 50628637!
test16

	|portfolio portfolioChild acc1 acc2 reporte|
	
	portfolio := Portfolio named: 'Portfolio familiar'.
	portfolioChild := Portfolio named: 'Portfolio de Maria'.
	
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.		
	acc1 register: (Deposit for: 250).
	acc1 register: (Withdraw for: 50).
	
	acc2 := ReceptiveAccount named: 'Cuenta de Maria'.		
	Transfer with: 80 from: acc1 to: acc2.
	
	portfolio add: acc1 .
	portfolio add: portfolioChild .
	portfolioChild add: acc2.
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio familiar'.		
	reporte add: ' Cuenta de juan'.
	reporte add: '  Depósito por 250.'.	
	reporte add: '  Extracción por 50.'.			
	reporte add: '  Salida por transferencia de 80.'.		
	reporte add: '  Balance = 120'.		
	reporte add: ' Portfolio de Maria'.		
	reporte add: '  Cuenta de Maria'.
	reporte add: '   Entrada por transferencia de 80.'.	
	reporte add: '   Balance = 80'.		
	
	self assert: (AccountTransactionsTreeReporter for: portfolio) accountTransactionsTree equals: reporte.
	
	! !

!testRun: #ReportTest #test16 stamp: 'mp 5/31/2023 22:43:29'!
PASSED!

!testRun: #ReportTest #test01 stamp: 'mp 5/31/2023 22:43:29'!
PASSED!

!testRun: #ReportTest #test02 stamp: 'mp 5/31/2023 22:43:29'!
PASSED!

!testRun: #ReportTest #test03 stamp: 'mp 5/31/2023 22:43:29'!
PASSED!

!testRun: #ReportTest #test04 stamp: 'mp 5/31/2023 22:43:29'!
PASSED!

!testRun: #ReportTest #test05 stamp: 'mp 5/31/2023 22:43:29'!
PASSED!

!testRun: #ReportTest #test06 stamp: 'mp 5/31/2023 22:43:29'!
PASSED!

!testRun: #ReportTest #test07 stamp: 'mp 5/31/2023 22:43:29'!
PASSED!

!testRun: #ReportTest #test08 stamp: 'mp 5/31/2023 22:43:30'!
PASSED!

!testRun: #ReportTest #test09 stamp: 'mp 5/31/2023 22:43:30'!
PASSED!

!testRun: #ReportTest #test10 stamp: 'mp 5/31/2023 22:43:30'!
PASSED!

!testRun: #ReportTest #test11 stamp: 'mp 5/31/2023 22:43:30'!
PASSED!

!testRun: #ReportTest #test12 stamp: 'mp 5/31/2023 22:43:30'!
PASSED!

!testRun: #ReportTest #test13 stamp: 'mp 5/31/2023 22:43:30'!
PASSED!

!testRun: #ReportTest #test14 stamp: 'mp 5/31/2023 22:43:30'!
PASSED!

!testRun: #ReportTest #test15 stamp: 'mp 5/31/2023 22:43:30'!
PASSED!

!testRun: #ReportTest #test16 stamp: 'mp 5/31/2023 22:43:30'!
PASSED!

!methodRemoval: ReportTest #_test14 stamp: 'mp 5/31/2023 22:43:50'!
_test14

	|portfolio acc1 acc2 reporte reporteHijos|
	
	
	portfolio := Portfolio named: 'Portfolio con cuentas'.
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.	
	acc2 := ReceptiveAccount named: 'Cuenta de Maria'.
	portfolio add: acc1.
	portfolio add: acc2.
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio con cuentas'.
	
	reporteHijos  := OrderedCollection new.
	reporteHijos add: acc1 name.
	reporteHijos add: acc2 name.
	reporte add: reporteHijos .
	
	
	self assert: (AccountNameTreeReporter for: portfolio) accountNameTree equals: reporte.!

!methodRemoval: ReportTest #_test15 stamp: 'mp 5/31/2023 22:43:52'!
_test15

	|portfolio portfolioHijo acc1 reporte reporteHijos reporteCuentasDePortafolioHijo|
	
	
	portfolio := Portfolio named: 'Portfolio con cuentas'.
	portfolioHijo := Portfolio named: 'Portfolio hijo de cuentas'.
	acc1 := ReceptiveAccount named: 'Cuenta de juan'.	
	
	portfolioHijo add: acc1.
	portfolio add: portfolioHijo .
	
	reporte := OrderedCollection new.
	reporte add: 'Portfolio con cuentas'.
	
	reporteHijos  := OrderedCollection new.
	reporteHijos add: 'Portfolio hijo de cuentas'.
	
	reporteCuentasDePortafolioHijo := OrderedCollection new.	
	reporteCuentasDePortafolioHijo add: 'Cuenta de juan'.
	
	reporteHijos  add: reporteCuentasDePortafolioHijo.
	reporte add: reporteHijos .
	
	
	self assert: (AccountNameTreeReporter for: portfolio) accountNameTree equals: reporte.!

----SNAPSHOT----(31 May 2023 22:43:58) CuisUniversity-5799.image priorSource: 9499004!
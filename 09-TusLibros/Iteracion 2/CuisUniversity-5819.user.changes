

----QUIT----(26 May 2023 20:53:32) CuisUniversity-5819.image priorSource: 4873322!

----STARTUP---- (26 May 2023 20:53:33) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5819.image!


----QUIT----(26 May 2023 20:53:33) CuisUniversity-5819.image priorSource: 9302089!

----STARTUP---- (5 June 2023 19:21:42) as C:\Users\Manu\Documents\Estudio\Exactas\Ingenieria de Software I\CuisUniversity new 29-05-23\tusLibros\windows64\CuisUniversity-5819.image!


Object subclass: #TusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

!classDefinition: #TusLibros category: '' stamp: 'mp 6/5/2023 20:15:17'!
Object subclass: #TusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: ''!

Object subclass: #TusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibros category: 'TusLibros' stamp: 'mp 6/5/2023 20:15:47'!
Object subclass: #TusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----STARTUP---- (5 June 2023 20:16:43) as C:\Users\Manu\Documents\Estudio\Exactas\Ingenieria de Software I\CuisUniversity new 29-05-23\tusLibros\windows64\CuisUniversity-5819.image!


Object subclass: #TusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibros category: 'TusLibros' stamp: 'mp 6/5/2023 20:17:19'!
Object subclass: #TusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTest category: 'TusLibros' stamp: 'mp 6/5/2023 20:17:49'!
TestCase subclass: #TusLibrosTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRenamed: #TusLibrosTest as: #CartTest stamp: 'mp 6/5/2023 20:18:18'!
Smalltalk renameClassNamed: #TusLibrosTest as: #CartTest!

Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cart category: 'TusLibros' stamp: 'mp 6/5/2023 20:21:28'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cart methodsFor: 'nil' stamp: 'mp 6/5/2023 20:21:51'!
isEmpty
	^true! !
!CartTest methodsFor: 'no messages' stamp: 'mp 6/5/2023 20:22:00'!
test01CreateACartShouldStartEmpty

	|cart|
	
	cart := Cart new.
	
	self assert: cart isEmpty.! !

!testRun: #CartTest #test01CreateACartShouldStartEmpty stamp: 'mp 6/5/2023 20:22:01'!
PASSED!

!testRun: #CartTest #test01CreateACartShouldStartEmpty stamp: 'mp 6/5/2023 20:22:01'!
PASSED!

----QUIT----(5 June 2023 20:31:14) CuisUniversity-5819.image priorSource: 9302310!

----STARTUP---- (8 June 2023 18:50:46) as C:\Users\Manu\Documents\Estudio\Exactas\Ingenieria de Software I\CuisUniversity new 29-05-23\tusLibros\windows64\CuisUniversity-5819.image!


!classRemoval: #TusLibros stamp: 'mp 6/8/2023 18:51:02'!
Object subclass: #TusLibros
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #Cart stamp: 'mp 6/8/2023 18:51:02'!
Object subclass: #Cart
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'mp 6/8/2023 18:51:02'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Manu\Documents\Estudio\Exactas\Ingenieria de Software I\Ejercicios\ISW2_Entregas\09-TusLibros\Iteracion1\TusLibros.st----!

----SNAPSHOT----(8 June 2023 18:51:28) CuisUniversity-5819.image priorSource: 9304158!

!classRemoval: #Cart stamp: 'mp 6/8/2023 19:40:10'!
Object subclass: #Cart
	instanceVariableNames: 'books'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classRemoval: #CartTest stamp: 'mp 6/8/2023 19:40:10'!
TestCase subclass: #CartTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

----End fileIn of C:\Users\Manu\Documents\Estudio\Exactas\Ingenieria de Software I\Ejercicios\Oficial clase\2023-1c\09-TusLibros\Iteracion1\TusLibros-18.st----!

TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'mp 6/8/2023 19:47:09'!
TestCase subclass: #CashierTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'nil' stamp: 'mp 6/8/2023 19:49:26'!
test01CheckoutOnEmptyCartShouldRiseError
	|cart cashier|
	
	cart := Cart acceptingItemsOf: nil.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 19:50:12'!
createCart
	
	^Cart acceptingItemsOf: self defaultCatalog! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 19:50:27'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 19:50:42'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 19:50:54'!
itemSellByTheStore
	
	^ 'validBook'! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 19:51:21' prior: 50622770!
test01CheckoutOnEmptyCartShouldRiseError
	|cart cashier|
	
	cart := self createCart.
	
	! !

Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #Cashier category: 'TusLibros' stamp: 'mp 6/8/2023 19:58:13'!
Object subclass: #Cashier
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 19:58:31' prior: 50622795!
test01CheckoutOnEmptyCartShouldRiseError
	|cart cashier|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	self 
	should: [cashier checkout: cart withCard: 1111] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: 'Can not checkout an empty cart' equals: anError messageText ]
	! !

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/8/2023 19:58:35'!
FAILURE!
!Cashier methodsFor: 'nil' stamp: 'mp 6/8/2023 19:59:58'!
checkout: aCart withCard: aCreditCard

	aCart isEmpty ifTrue: [self error: 'Can not checkout an empty cart']! !

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/8/2023 20:00:04'!
PASSED!

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/8/2023 20:00:04'!
PASSED!
!Cashier class methodsFor: 'nil' stamp: 'mp 6/8/2023 20:00:51'!
canNotCheckoutAnEmptyCartErrorDescription
	
	^'Can not checkout an empty cart'! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 20:02:07' prior: 50622827!
checkout: aCart withCard: aCreditCard

	aCart isEmpty ifTrue: [self error: self class canNotCheckoutAnEmptyCartErrorDescription ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 20:02:34' prior: 50622812!
test01CheckoutOnEmptyCartShouldRiseError
	|cart cashier|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	self 
	should: [cashier checkout: cart withCard: 1111] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: Cashier canNotCheckoutAnEmptyCartErrorDescription equals: anError messageText ]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 20:08:25'!
test02CheckoutOnACartWithOneProduct
	|cart cashier|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	self 
	should: [cashier checkout: cart withCard: 1111] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: Cashier canNotCheckoutAnEmptyCartErrorDescription equals: anError messageText ]
	! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 20:08:38' prior: 50622846!
checkout: aCart withCard: aCreditCard

	self error: self class canNotCheckoutAnEmptyCartErrorDescription ! !

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/8/2023 20:08:44'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 20:10:06'!
test02CheckoutOnACartWithOneProductShouldNotRaiseError
	|cart cashier|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	cashier := Cashier new.
	
	self 
	should: [cashier checkout: cart withCard: 1111] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: Cashier canNotCheckoutAnEmptyCartErrorDescription equals: anError messageText ]
	! !

!methodRemoval: CashierTest #test02CheckoutOnACartWithOneProduct stamp: 'mp 6/8/2023 20:10:09'!
test02CheckoutOnACartWithOneProduct
	|cart cashier|
	
	cart := self createCart.
	
	cashier := Cashier new.
	
	self 
	should: [cashier checkout: cart withCard: 1111] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: Cashier canNotCheckoutAnEmptyCartErrorDescription equals: anError messageText ]
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 20:12:05' prior: 50622890!
test02CheckoutOnACartWithOneProductShouldNotRaiseError
	|cart cashier|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	cashier := Cashier new.
	
	cashier checkout: cart withCard: 1111.
	! !

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 20:12:07'!
ERROR!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 20:13:15'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 20:02:07' prior: 50622880!
checkout: aCart withCard: aCreditCard

	aCart isEmpty ifTrue: [self error: self class canNotCheckoutAnEmptyCartErrorDescription ]! !

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 20:19:45'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 20:20:21'!
test03CheckoutOnACartWithManyProductsShouldNotRaiseError
	|cart cashier|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	cashier := Cashier new.
	
	cashier checkout: cart withCard: 1111.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 20:21:19' prior: 50622946!
test03CheckoutOnACartWithManyProductsShouldNotRaiseError
	|cart cashier|
	
	cart := self createCart.
	cart add: 3 of: self itemSellByTheStore .
	
	cashier := Cashier new.
	
	cashier checkout: cart withCard: 1111.
	! !

!testRun: #CashierTest #test03CheckoutOnACartWithManyProductsShouldNotRaiseError stamp: 'mp 6/8/2023 20:21:20'!
PASSED!

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/8/2023 20:21:20'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 20:21:20'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnACartWithManyProductsShouldNotRaiseError stamp: 'mp 6/8/2023 20:21:20'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 20:22:04'!
_test02CheckoutOnACartWithOneProductShouldNotRaiseError
	|cart cashier|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	cashier := Cashier new.
	
	cashier checkout: cart withCard: 1111.
	! !

!methodRemoval: CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 20:22:04'!
test02CheckoutOnACartWithOneProductShouldNotRaiseError
	|cart cashier|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	cashier := Cashier new.
	
	cashier checkout: cart withCard: 1111.
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 20:22:09'!
_test03CheckoutOnACartWithManyProductsShouldNotRaiseError
	|cart cashier|
	
	cart := self createCart.
	cart add: 3 of: self itemSellByTheStore .
	
	cashier := Cashier new.
	
	cashier checkout: cart withCard: 1111.
	! !

!methodRemoval: CashierTest #test03CheckoutOnACartWithManyProductsShouldNotRaiseError stamp: 'mp 6/8/2023 20:22:09'!
test03CheckoutOnACartWithManyProductsShouldNotRaiseError
	|cart cashier|
	
	cart := self createCart.
	cart add: 3 of: self itemSellByTheStore .
	
	cashier := Cashier new.
	
	cashier checkout: cart withCard: 1111.
	!
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 20:08:38' prior: 50622935!
checkout: aCart withCard: aCreditCard

	self error: self class canNotCheckoutAnEmptyCartErrorDescription ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 20:23:34'!
test02CheckoutOnACartWithOneProductShouldNotRaiseError
	|cart cashier|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	cashier := Cashier new.
	
	cashier checkout: cart withCard: 1111.
	! !

!methodRemoval: CashierTest #_test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 20:23:37'!
_test02CheckoutOnACartWithOneProductShouldNotRaiseError
	|cart cashier|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	cashier := Cashier new.
	
	cashier checkout: cart withCard: 1111.
	!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 20:25:20'!
test04CheckoutOnAExpiredCardShouldRaiseError
	|cart cashier|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	cashier := Cashier new.
	
	cashier checkout: cart withCard: 1111.
	! !

May, 2020!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 20:27:55' prior: 50623047!
test04CheckoutOnAExpiredCardShouldRaiseError
	|cart cashier expiredDate|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	cashier := Cashier new.
	expiredDate:= May, 2020.
	
	self 
	should: [cashier checkout: cart withCard: expiredDate] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: 'Expired credit card' equals: anError messageText ]
	
	! !

!testRun: #CashierTest #test04CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/8/2023 20:28:01'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 20:28:56' prior: 50623021!
checkout: aCart withCard: aCreditCard

	aCart  ifEmpty: [self error: self class canNotCheckoutAnEmptyCartErrorDescription ]! !

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/8/2023 20:28:59'!
FAILURE!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 20:28:59'!
ERROR!

!testRun: #CashierTest #test04CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/8/2023 20:28:59'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 20:29:27' prior: 50623076!
checkout: aCart withCard: aCreditCard

	aCart  isEmpty ifTrue: [self error: self class canNotCheckoutAnEmptyCartErrorDescription ].
	
	! !

Date today > May,2020!
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 20:31:46' prior: 50623094!
checkout: aCart withCard: aCreditCard

	aCart  isEmpty ifTrue: [self error: self class canNotCheckoutAnEmptyCartErrorDescription ].
	
	(June, 2023 > aCreditCard ) ifTrue:[self error: 'Expired Credit Card'].! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 20:32:40' prior: 50623102!
checkout: aCart withCard: aCreditCard

	aCart  isEmpty ifTrue: [self error: self class canNotCheckoutAnEmptyCartErrorDescription ].
	
	(June, 2023 > aCreditCard ) ifTrue:[self error: 'Expired credit card'].! !

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/8/2023 20:32:43'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 20:32:43'!
ERROR!

!testRun: #CashierTest #test04CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/8/2023 20:32:43'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 20:32:43'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:19:20'!
test03CheckoutOnAExpiredCardShouldRaiseError
	|cart cashier expiredDate|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	cashier := Cashier new.
	expiredDate:= May, 2020.
	
	self 
	should: [cashier checkout: cart withCard: expiredDate] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: 'Expired credit card' equals: anError messageText ]
	
	! !

!methodRemoval: CashierTest #test04CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/8/2023 21:19:20'!
test04CheckoutOnAExpiredCardShouldRaiseError
	|cart cashier expiredDate|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	cashier := Cashier new.
	expiredDate:= May, 2020.
	
	self 
	should: [cashier checkout: cart withCard: expiredDate] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: 'Expired credit card' equals: anError messageText ]
	
	!

!methodRemoval: CashierTest #_test03CheckoutOnACartWithManyProductsShouldNotRaiseError stamp: 'mp 6/8/2023 21:19:28'!
_test03CheckoutOnACartWithManyProductsShouldNotRaiseError
	|cart cashier|
	
	cart := self createCart.
	cart add: 3 of: self itemSellByTheStore .
	
	cashier := Cashier new.
	
	cashier checkout: cart withCard: 1111.
	!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/8/2023 21:19:38'!
PASSED!

Date today class!

Date today !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:24:17' prior: 50623136!
test03CheckoutOnAExpiredCardShouldRaiseError
	|cart cashier expiredDate|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	cashier := Cashier onDate: June,2023.
	expiredDate:= May, 2020.
	
	self 
	should: [cashier checkout: cart withCard: expiredDate] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: 'Expired credit card' equals: anError messageText ]
	
	! !
!Cashier class methodsFor: 'nil' stamp: 'mp 6/8/2023 21:25:40'!
onDate: aMonthOfAYear

	^self new initializeWith: aMonthOfAYear 
	
	! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'mp 6/8/2023 21:26:16'!
Object subclass: #Cashier
	instanceVariableNames: 'currentDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:26:14'!
initializeWith: aMonthOfAYear

	currentDate:= aMonthOfAYear .! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:26:37' prior: 50623112!
checkout: aCart withCard: aCreditCard

	aCart  isEmpty ifTrue: [self error: self class canNotCheckoutAnEmptyCartErrorDescription ].
	
	(currentDate > aCreditCard ) ifTrue:[self error: 'Expired credit card'].! !

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/8/2023 21:26:43'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 21:26:44'!
ERROR!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/8/2023 21:26:44'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 21:26:44'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:27:00' prior: 50623181!
test03CheckoutOnAExpiredCardShouldRaiseError
	|cart cashier expiredDate|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	cashier := Cashier onDate: June, 2023.
	expiredDate:= May, 2020.
	
	self 
	should: [cashier checkout: cart withCard: expiredDate] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: 'Expired credit card' equals: anError messageText ]
	
	! !

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/8/2023 21:27:01'!
PASSED!

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/8/2023 21:27:02'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 21:27:02'!
ERROR!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/8/2023 21:27:02'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 21:27:02'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:27:42' prior: 50623237!
test03CheckoutOnAExpiredCardShouldRaiseError
	|cart cashier expiredDate|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	cashier := Cashier onDate: June, 2023.
	expiredDate:= May, 2020.
	
	self 
	should: [cashier checkout: cart withCard: expiredDate] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: 'Expired credit card' equals: anError messageText ]
	
	! !

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/8/2023 21:27:43'!
PASSED!

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/8/2023 21:27:43'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 21:27:43'!
ERROR!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/8/2023 21:27:43'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 21:27:43'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:28:04' prior: 50623027!
test02CheckoutOnACartWithOneProductShouldNotRaiseError
	|cart cashier|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	cashier := Cashier new.
	
	cashier checkout: cart withCard: June, 2023.
	! !

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 21:28:06'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:28:31' prior: 50623303!
test02CheckoutOnACartWithOneProductShouldNotRaiseError
	|cart cashier|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	cashier := Cashier onDate: May, 2020.
	
	cashier checkout: cart withCard: June, 2023.
	! !

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 21:28:32'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/8/2023 21:28:34'!
PASSED!

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/8/2023 21:28:34'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 21:28:34'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/8/2023 21:28:34'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:33:37'!
test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook
	|cart cashier expiredDate salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	salesBook:= OrderedCollection new.
	
	cashier := Cashier onDate: June, 2023.
	expiredDate:= May, 2020.
	
	self 
	should: [cashier checkout: cart withCard: expiredDate] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: 'Expired credit card' equals: anError messageText ]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:36:47' prior: 50623345!
test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook
	|cart cashier expiredDate salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	salesBook:= OrderedCollection new.
	
	cashier := Cashier onDate: June, 2023.
	expiredDate:= May, 2024.
	
	cashier checkout: cart withCard: expiredDate.
	
	self deny: salesBook isEmpty.
	! !

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/8/2023 21:36:49'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:37:31' prior: 50623363!
test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook
	|cart cashier expiredDate salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	salesBook:= OrderedCollection new.
	
	cashier := Cashier onDate: June, 2023 withSalesBook: salesBook.
	expiredDate:= May, 2024.
	
	cashier checkout: cart withCard: expiredDate.
	
	self deny: salesBook isEmpty.
	! !
!Cashier class methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:38:42'!
onDate: aMonthOfAYear withSalesBook: aSalesBook

	^self new initializeWithMonth: aMonthOfAYear andSalesBook:aSalesBook .
	
	! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'mp 6/8/2023 21:39:19'!
Object subclass: #Cashier
	instanceVariableNames: 'currentDate salesBook'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:39:17'!
initializeWithMonth: aMonthOfAYear andSalesBook: aSalesBook

	currentDate:= aMonthOfAYear .
	salesBook := aSalesBook ! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:39:43' prior: 50623213!
checkout: aCart withCard: aCreditCard

	aCart  isEmpty ifTrue: [self error: self class canNotCheckoutAnEmptyCartErrorDescription ].
	
	(currentDate > aCreditCard ) ifTrue:[self error: 'Expired credit card'].
	
	salesBook add: ''.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:39:46' prior: 50623418!
checkout: aCart withCard: aCreditCard

	aCart  isEmpty ifTrue: [self error: self class canNotCheckoutAnEmptyCartErrorDescription ].
	
	(currentDate > aCreditCard ) ifTrue:[self error: 'Expired credit card'].
	
	salesBook add: 'ok'.! !

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/8/2023 21:39:55'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 21:39:55'!
ERROR!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/8/2023 21:39:55'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/8/2023 21:39:55'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 21:39:55'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:41:20'!
cashierOnJuneWithSalesBook: salesBook

	^ Cashier onDate: June, 2023 withSalesBook: salesBook! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:41:20' prior: 50623382!
test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook
	|cart cashier expiredDate salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	salesBook:= OrderedCollection new.
	
	cashier := self cashierOnJuneWithSalesBook: salesBook.
	expiredDate:= May, 2024.
	
	cashier checkout: cart withCard: expiredDate.
	
	self deny: salesBook isEmpty.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:42:22' prior: 50622854!
test01CheckoutOnEmptyCartShouldRiseError
	|cart cashier salesBook|
	
	cart := self createCart.
	salesBook:= OrderedCollection new.
	
	cashier := self cashierOnJuneWithSalesBook: salesBook.
	
	self 
	should: [cashier checkout: cart withCard: 1111] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: Cashier canNotCheckoutAnEmptyCartErrorDescription equals: anError messageText ]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:42:45' prior: 50623317!
test02CheckoutOnACartWithOneProductShouldNotRaiseError
	|cart cashier salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	salesBook:= OrderedCollection new.
	
	cashier := Cashier onDate: May, 2020.
	
	cashier checkout: cart withCard: June, 2023.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:43:23' prior: 50623494!
test02CheckoutOnACartWithOneProductShouldNotRaiseError
	|cart cashier salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	salesBook:= OrderedCollection new.
	
	cashier := self cashierOnJuneWithSalesBook: salesBook.
	
	cashier checkout: cart withCard: June, 2023.
	! !

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 21:43:24'!
PASSED!

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/8/2023 21:43:24'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 21:43:24'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/8/2023 21:43:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/8/2023 21:43:24'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:44:07' prior: 50623478!
test01CheckoutOnEmptyCartShouldRiseError
	|cart cashier salesBook|
	
	cart := self createCart.
	salesBook:= OrderedCollection new.
	
	cashier := self cashierOnJuneWithSalesBook: salesBook.
	
	self 
	should: [cashier checkout: cart withCard: 1111] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: Cashier canNotCheckoutAnEmptyCartErrorDescription equals: anError messageText.
			self assert: salesBook isEmpty ]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/8/2023 21:44:55' prior: 50623270!
test03CheckoutOnAExpiredCardShouldRaiseError
	|cart cashier expiredDate salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithSalesBook: salesBook.
	expiredDate:= May, 2020.
	
	self 
	should: [cashier checkout: cart withCard: expiredDate] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: 'Expired credit card' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/8/2023 21:45:33'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/8/2023 21:45:33'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/8/2023 21:45:33'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/8/2023 21:45:33'!
PASSED!

----SNAPSHOT----(8 June 2023 21:45:46) CuisUniversity-5819.image priorSource: 9309100!

----QUIT----(8 June 2023 21:46:19) CuisUniversity-5819.image priorSource: 9341945!

----STARTUP---- (11 June 2023 19:24:15) as F:\Manuel\Trabajos\EXACTAS\Ingenieria de Software I\CuisUniversity 29-05-23\tusLibros\windows64\CuisUniversity-5819.image!


!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 19:32:48'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 19:32:48'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 19:32:48'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 19:32:48'!
PASSED!

Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #MerchantProcessorSimulator category: 'TusLibros' stamp: 'mp 6/11/2023 19:41:32'!
Object subclass: #MerchantProcessorSimulator
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 19:45:05'!
test05CheckoutOnAStolenCardShouldRaiseError
	|cart cashier expiredDate salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithSalesBook: salesBook.
	expiredDate:= May, 2020.
	
	self 
	should: [cashier checkout: cart withCard: expiredDate] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: 'Expired credit card' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 19:45:08' prior: 50623624!
test05CheckoutOnAStolenCardShouldRaiseError
	|cart cashier expiredDate salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithSalesBook: salesBook.
	expiredDate:= May, 2020.
	
	self 
	should: [cashier checkout: cart withCard: expiredDate] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: 'Expired credit card' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 19:48:57' prior: 50623643!
test05CheckoutOnAStolenCardShouldRaiseError
	|cart cashier stolenCard salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithSalesBook: salesBook.
	stolenCard := 1111.
	
	self 
	should: [cashier checkout: cart withCard: stolenCard] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: 'Stolen credit card' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 19:49:01'!
FAILURE!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 19:49:19'!
FAILURE!

Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'mp 6/11/2023 19:50:10'!
Object subclass: #CreditCard
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard class methodsFor: 'nil' stamp: 'mp 6/11/2023 19:53:06'!
withNumber: aCreditCardNumber expiredOn: anExpiredDate

	^ self new initializeWithNumber: aCreditCardNumber expiredOn: anExpiredDate ! !

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'mp 6/11/2023 19:54:25'!
Object subclass: #CreditCard
	instanceVariableNames: 'number'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #CreditCard category: 'TusLibros' stamp: 'mp 6/11/2023 19:54:26'!
Object subclass: #CreditCard
	instanceVariableNames: 'number expirationDate'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CreditCard methodsFor: 'nil' stamp: 'mp 6/11/2023 19:54:23'!
initializeWithNumber: aCreditCardNumber expiredOn: anExpiredDate 
	
	number := aCreditCardNumber .
	expirationDate := anExpiredDate ! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 19:55:04'!
number
	^number ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 19:58:29' prior: 50623662!
test05CheckoutOnAStolenCardShouldRaiseError
	|cart cashier stolenCard salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithSalesBook: salesBook.
	stolenCard := CreditCard withNumber: 1111 expiredOn: July, 2030.
	
	self 
	should: [cashier checkout: cart withCard: stolenCard] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: 'Stolen credit card' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:00:05' prior: 50623554!
test03CheckoutOnAExpiredCardShouldRaiseError
	|cart cashier expiredDate salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithSalesBook: salesBook.
	expiredDate:= CreditCard withNumber: 1000 expiredOn: May, 2020.
	
	self 
	should: [cashier checkout: cart withCard: expiredDate] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: 'Expired credit card' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:00:25' prior: 50623506!
test02CheckoutOnACartWithOneProductShouldNotRaiseError
	|cart cashier salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	salesBook:= OrderedCollection new.
	
	cashier := self cashierOnJuneWithSalesBook: salesBook.
	
	cashier checkout: cart withCard: (CreditCard withNumber: 1111 expiredOn: July, 2030).
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:00:42' prior: 50623537!
test01CheckoutOnEmptyCartShouldRiseError
	|cart cashier salesBook|
	
	cart := self createCart.
	salesBook:= OrderedCollection new.
	
	cashier := self cashierOnJuneWithSalesBook: salesBook.
	
	self 
	should: [cashier checkout: cart withCard: (CreditCard withNumber: 1000 expiredOn: July, 2030)] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: Cashier canNotCheckoutAnEmptyCartErrorDescription equals: anError messageText.
			self assert: salesBook isEmpty ]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:00:58' prior: 50623463!
test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook
	|cart cashier expiredDate salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	salesBook:= OrderedCollection new.
	
	cashier := self cashierOnJuneWithSalesBook: salesBook.
	expiredDate:= CreditCard withNumber: 1000 expiredOn: July, 2030.
	
	cashier checkout: cart withCard: expiredDate.
	
	self deny: salesBook isEmpty.
	! !

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 20:01:04'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 20:01:04'!
ERROR!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 20:01:04'!
FAILURE!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 20:01:04'!
ERROR!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 20:01:04'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:01:20' prior: 50623429!
checkout: aCart withCard: aCreditCard

	aCart  isEmpty ifTrue: [self error: self class canNotCheckoutAnEmptyCartErrorDescription ].
	
	(currentDate > aCreditCard expirationDate) ifTrue:[self error: 'Expired credit card'].
	
	salesBook add: 'ok'.! !
!CreditCard methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:01:33'!
expirationDate
	^expirationDate ! !

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 20:01:54'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 20:01:54'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 20:01:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 20:01:54'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 20:01:54'!
FAILURE!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 20:01:54'!
FAILURE!
!Cashier class methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:04:27'!
onDate: aMonthOfAYear withSalesBook: aSalesBook andMerchantProcessor: aMerchantProcessor

	^self new initializeWithMonth: aMonthOfAYear andSalesBook:aSalesBook andMerchantProcessor: aMerchantProcessor.
	
	! !

!classDefinition: #Cashier category: 'TusLibros' stamp: 'mp 6/11/2023 20:05:20'!
Object subclass: #Cashier
	instanceVariableNames: 'currentDate salesBook merchantProcessor'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:05:18'!
initializeWithMonth: aMonthOfAYear andSalesBook: aSalesBook andMerchantProcessor: aMerchantProcessor

	currentDate:= aMonthOfAYear .
	salesBook := aSalesBook.
	merchantProcessor := aMerchantProcessor. ! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:06:31' prior: 50623457!
cashierOnJuneWithSalesBook: salesBook

	^ Cashier onDate: June, 2023 withSalesBook: salesBook andMerchantProcessor: MerchantProcessorSimulator new.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:07:45' prior: 50623899!
cashierOnJuneWithSalesBook: salesBook

	^ Cashier onDate: June, 2023 withSalesBook: salesBook andMerchantProcessor: MerchantProcessorSimulator new.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:08:00'!
cashierOnJuneWithMerchantProcessorSiimulatorWithSalesBook: salesBook

	^ Cashier onDate: June, 2023 withSalesBook: salesBook andMerchantProcessor: MerchantProcessorSimulator new.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:08:00' prior: 50623769!
test02CheckoutOnACartWithOneProductShouldNotRaiseError
	|cart cashier salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	salesBook:= OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSiimulatorWithSalesBook: salesBook.
	
	cashier checkout: cart withCard: (CreditCard withNumber: 1111 expiredOn: July, 2030).
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:08:00' prior: 50623749!
test03CheckoutOnAExpiredCardShouldRaiseError
	|cart cashier expiredDate salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSiimulatorWithSalesBook: salesBook.
	expiredDate:= CreditCard withNumber: 1000 expiredOn: May, 2020.
	
	self 
	should: [cashier checkout: cart withCard: expiredDate] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: 'Expired credit card' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:08:00' prior: 50623729!
test05CheckoutOnAStolenCardShouldRaiseError
	|cart cashier stolenCard salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSiimulatorWithSalesBook: salesBook.
	stolenCard := CreditCard withNumber: 1111 expiredOn: July, 2030.
	
	self 
	should: [cashier checkout: cart withCard: stolenCard] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: 'Stolen credit card' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:08:00' prior: 50623783!
test01CheckoutOnEmptyCartShouldRiseError
	|cart cashier salesBook|
	
	cart := self createCart.
	salesBook:= OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSiimulatorWithSalesBook: salesBook.
	
	self 
	should: [cashier checkout: cart withCard: (CreditCard withNumber: 1000 expiredOn: July, 2030)] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: Cashier canNotCheckoutAnEmptyCartErrorDescription equals: anError messageText.
			self assert: salesBook isEmpty ]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:08:00' prior: 50623801!
test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook
	|cart cashier expiredDate salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	salesBook:= OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSiimulatorWithSalesBook: salesBook.
	expiredDate:= CreditCard withNumber: 1000 expiredOn: July, 2030.
	
	cashier checkout: cart withCard: expiredDate.
	
	self deny: salesBook isEmpty.
	! !

!methodRemoval: CashierTest #cashierOnJuneWithSalesBook: stamp: 'mp 6/11/2023 20:08:01'!
cashierOnJuneWithSalesBook: salesBook

	^ Cashier onDate: June, 2023 withSalesBook: salesBook andMerchantProcessor: MerchantProcessorSimulator new.!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:08:22'!
cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook

	^ Cashier onDate: June, 2023 withSalesBook: salesBook andMerchantProcessor: MerchantProcessorSimulator new.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:08:22' prior: 50623981!
test01CheckoutOnEmptyCartShouldRiseError
	|cart cashier salesBook|
	
	cart := self createCart.
	salesBook:= OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	
	self 
	should: [cashier checkout: cart withCard: (CreditCard withNumber: 1000 expiredOn: July, 2030)] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: Cashier canNotCheckoutAnEmptyCartErrorDescription equals: anError messageText.
			self assert: salesBook isEmpty ]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:08:22' prior: 50623939!
test03CheckoutOnAExpiredCardShouldRaiseError
	|cart cashier expiredDate salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	expiredDate:= CreditCard withNumber: 1000 expiredOn: May, 2020.
	
	self 
	should: [cashier checkout: cart withCard: expiredDate] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: 'Expired credit card' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:08:22' prior: 50623960!
test05CheckoutOnAStolenCardShouldRaiseError
	|cart cashier stolenCard salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	stolenCard := CreditCard withNumber: 1111 expiredOn: July, 2030.
	
	self 
	should: [cashier checkout: cart withCard: stolenCard] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: 'Stolen credit card' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:08:22' prior: 50624000!
test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook
	|cart cashier expiredDate salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	salesBook:= OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	expiredDate:= CreditCard withNumber: 1000 expiredOn: July, 2030.
	
	cashier checkout: cart withCard: expiredDate.
	
	self deny: salesBook isEmpty.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:08:22' prior: 50623924!
test02CheckoutOnACartWithOneProductShouldNotRaiseError
	|cart cashier salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	salesBook:= OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	
	cashier checkout: cart withCard: (CreditCard withNumber: 1111 expiredOn: July, 2030).
	! !

!methodRemoval: CashierTest #cashierOnJuneWithMerchantProcessorSiimulatorWithSalesBook: stamp: 'mp 6/11/2023 20:08:22'!
cashierOnJuneWithMerchantProcessorSiimulatorWithSalesBook: salesBook

	^ Cashier onDate: June, 2023 withSalesBook: salesBook andMerchantProcessor: MerchantProcessorSimulator new.!
!MerchantProcessorSimulator methodsFor: 'nil' stamp: 'mp 6/11/2023 20:14:59'!
checkout: aCreditCard

	(aCreditCard number = 1111) ifTrue: [self error: 'Stolen credit card']! !

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 20:34:07'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 20:34:07'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 20:34:07'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 20:34:07'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 20:34:07'!
FAILURE!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 20:34:07'!
FAILURE!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 20:35:21'!
FAILURE!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 20:35:46'!
FAILURE!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 20:35:46'!
FAILURE!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 20:36:25'!
FAILURE!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 20:37:31'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 20:37:33'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 20:37:35'!
FAILURE!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 20:37:35'!
FAILURE!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:38:22' prior: 50624024!
cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook

	^ Cashier onDate: June, 2023 withSalesBook: salesBook andMerchantProcessor: (MerchantProcessorSimulator new).! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:40:51' prior: 50623835!
checkout: aCart withCard: aCreditCard

	aCart  isEmpty ifTrue: [self error: self class canNotCheckoutAnEmptyCartErrorDescription ].
	
	(currentDate > aCreditCard expirationDate) ifTrue:[self error: 'Expired credit card'].
	
	merchantProcessor checkout: aCreditCard.
	
	salesBook add: 'ok'.! !

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 20:41:54'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 20:41:54'!
ERROR!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 20:41:54'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 20:41:54'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 20:41:54'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 20:41:54'!
ERROR!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:42:19' prior: 50624111!
test02CheckoutOnACartWithOneProductShouldNotRaiseError
	|cart cashier salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	salesBook:= OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	
	cashier checkout: cart withCard: (CreditCard withNumber: 1000 expiredOn: July, 2030).
	! !

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 20:42:28'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 20:42:28'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 20:42:28'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 20:42:28'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 20:42:28'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:48:04'!
test06CheckoutOnACardWithInsufficientFundsShouldRaiseError
	|cart cashier insuficientFundsCard salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	insuficientFundsCard := CreditCard withNumber: 2222 expiredOn: July, 2030.
	
	self 
	should: [cashier checkout: cart withCard: insuficientFundsCard] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: 'The account has insufficient funds' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 20:48:29'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 20:48:29'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 20:48:29'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 20:48:29'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 20:48:29'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 20:48:30'!
FAILURE!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 20:48:30'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:49:29' prior: 50624135!
checkout: aCreditCard

	(aCreditCard number = 1111) ifTrue: [self error: 'Stolen credit card'].
	
	(aCreditCard number = 2222) ifTrue: [self error: 'The account has insufficient funds']! !

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 20:49:33'!
PASSED!

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 20:49:33'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 20:49:33'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 20:49:33'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 20:49:33'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 20:49:33'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 20:49:33'!
PASSED!
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 20:56:09' prior: 50624200!
checkout: aCart withCard: aCreditCard

	aCart  isEmpty ifTrue: [self error: self class canNotCheckoutAnEmptyCartErrorDescription ].
	
	(currentDate > aCreditCard expirationDate) ifTrue:[self error: 'Expired credit card'].
	
	merchantProcessor checkout: aCreditCard.
	
	salesBook add: 'ok'.! !
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:00:01' prior: 50624315!
checkout: aCreditCard

	(aCreditCard number = 1111) ifTrue: [self error: 'Stolen credit card'].
	
	(aCreditCard number = 2222) ifTrue: [self error: 'The account has insufficient funds'].
	! !

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 21:11:42'!
PASSED!

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 21:11:44'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 21:11:44'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 21:11:45'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 21:11:45'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 21:11:45'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 21:11:45'!
PASSED!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:16:44'!
test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook
	|cart cashier aCreditCard salesBook|
	
	cart := self createCart.
	cart add: self itemSellByTheStore .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	aCreditCard := CreditCard withNumber: 2222 expiredOn: July, 2030.
	
	self 
	should: [cashier checkout: cart withCard: aCreditCard] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: 'The account has insufficient funds' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:31:06'!
defaultPriceCatalog
	|catalog|
	catalog := Dictionary new .
	catalog at: self itemSellByTheStore put: 2000.
	
	^ catalog! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:31:49' prior: 50624419!
defaultPriceCatalog
	|catalog|
	catalog := Dictionary new .
	catalog at: self itemSellByTheStore put: 2000 * peso.
	
	^ catalog! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:32:35' prior: 50622776!
createCart
	
	^Cart acceptingItemsOf: self defaultPriceCatalog ! !

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 21:32:39'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 21:32:39'!
ERROR!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 21:32:39'!
ERROR!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 21:32:39'!
ERROR!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 21:32:39'!
ERROR!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 21:32:39'!
ERROR!

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 21:32:40'!
ERROR!
!Cart methodsFor: 'assertions' stamp: 'mp 6/11/2023 21:35:50' prior: 50622595!
assertIsValidItem: anItem

	(catalog includesKey: anItem) ifFalse: [ self error: self invalidItemErrorMessage ]! !

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 21:35:55'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 21:35:55'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 21:35:55'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 21:35:55'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 21:35:55'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 21:35:55'!
PASSED!

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 21:35:55'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mp 6/11/2023 21:36:13'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mp 6/11/2023 21:36:13'!
ERROR!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mp 6/11/2023 21:36:13'!
ERROR!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mp 6/11/2023 21:36:13'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mp 6/11/2023 21:36:13'!
ERROR!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mp 6/11/2023 21:36:13'!
ERROR!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mp 6/11/2023 21:36:13'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mp 6/11/2023 21:36:13'!
ERROR!

Object subclass: #TusLibrosTestFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!

!classDefinition: #TusLibrosTestFactory category: 'TusLibros' stamp: 'mp 6/11/2023 21:38:12'!
Object subclass: #TusLibrosTestFactory
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!TusLibrosTestFactory methodsFor: 'nil' stamp: 'mp 6/11/2023 21:38:36'!
defaultPriceCatalog
	|catalog|
	catalog := Dictionary new .
	catalog at: self itemSellByTheStore put: 2000 * peso.
	
	^ catalog! !
!TusLibrosTestFactory methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:38:54'!
itemNotSellByTheStore
	
	^'invalidBook'! !
!TusLibrosTestFactory methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:39:04'!
itemSellByTheStore
	
	^ 'validBook'! !
!TusLibrosTestFactory methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:39:20'!
createCart
	
	^Cart acceptingItemsOf: self defaultPriceCatalog ! !

!classDefinition: #CashierTest category: 'TusLibros' stamp: 'mp 6/11/2023 21:41:08'!
TestCase subclass: #CashierTest
	instanceVariableNames: 'testFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:41:06' overrides: 16961394!
setUp
	
	testFactory := TusLibrosTestFactory new.! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:42:09' prior: 50624434!
createCart
	
	^testFactory createCart ! !

----SNAPSHOT----(11 June 2023 21:42:53) CuisUniversity-5819.image priorSource: 9342033!

!methodRemoval: CashierTest #createCart stamp: 'mp 6/11/2023 21:43:19'!
createCart
	
	^testFactory createCart !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:43:19' prior: 50624234!
test02CheckoutOnACartWithOneProductShouldNotRaiseError
	|cart cashier salesBook|
	
	cart := testFactory createCart .
	cart add: self itemSellByTheStore .
	
	salesBook:= OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	
	cashier checkout: cart withCard: (CreditCard withNumber: 1000 expiredOn: July, 2030).
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:43:19' prior: 50624073!
test05CheckoutOnAStolenCardShouldRaiseError
	|cart cashier stolenCard salesBook|
	
	cart := testFactory createCart .
	cart add: self itemSellByTheStore .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	stolenCard := CreditCard withNumber: 1111 expiredOn: July, 2030.
	
	self 
	should: [cashier checkout: cart withCard: stolenCard] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: 'Stolen credit card' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:43:19' prior: 50624033!
test01CheckoutOnEmptyCartShouldRiseError
	|cart cashier salesBook|
	
	cart := testFactory createCart .
	salesBook:= OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	
	self 
	should: [cashier checkout: cart withCard: (CreditCard withNumber: 1000 expiredOn: July, 2030)] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: Cashier canNotCheckoutAnEmptyCartErrorDescription equals: anError messageText.
			self assert: salesBook isEmpty ]
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:43:19' prior: 50624052!
test03CheckoutOnAExpiredCardShouldRaiseError
	|cart cashier expiredDate salesBook|
	
	cart := testFactory createCart .
	cart add: self itemSellByTheStore .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	expiredDate:= CreditCard withNumber: 1000 expiredOn: May, 2020.
	
	self 
	should: [cashier checkout: cart withCard: expiredDate] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: 'Expired credit card' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:43:19' prior: 50624094!
test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook
	|cart cashier expiredDate salesBook|
	
	cart := testFactory createCart .
	cart add: self itemSellByTheStore .
	salesBook:= OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	expiredDate:= CreditCard withNumber: 1000 expiredOn: July, 2030.
	
	cashier checkout: cart withCard: expiredDate.
	
	self deny: salesBook isEmpty.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:43:19' prior: 50624397!
test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook
	|cart cashier aCreditCard salesBook|
	
	cart := testFactory createCart .
	cart add: self itemSellByTheStore .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	aCreditCard := CreditCard withNumber: 2222 expiredOn: July, 2030.
	
	self 
	should: [cashier checkout: cart withCard: aCreditCard] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: 'The account has insufficient funds' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:43:19' prior: 50624266!
test06CheckoutOnACardWithInsufficientFundsShouldRaiseError
	|cart cashier insuficientFundsCard salesBook|
	
	cart := testFactory createCart .
	cart add: self itemSellByTheStore .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	insuficientFundsCard := CreditCard withNumber: 2222 expiredOn: July, 2030.
	
	self 
	should: [cashier checkout: cart withCard: insuficientFundsCard] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: 'The account has insufficient funds' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 21:43:33'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 21:43:33'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 21:43:33'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 21:43:34'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 21:43:34'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 21:43:34'!
PASSED!

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 21:43:34'!
PASSED!

!classDefinition: #CartTest category: 'TusLibros' stamp: 'mp 6/11/2023 21:44:13'!
TestCase subclass: #CartTest
	instanceVariableNames: 'testFactory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TusLibros'!
!CartTest methodsFor: 'support' stamp: 'mp 6/11/2023 21:44:12' overrides: 16961394!
setUp

	testFactory := TusLibrosTestFactory new! !
!CartTest methodsFor: 'support' stamp: 'mp 6/11/2023 21:44:35' prior: 50622741!
createCart
	
	^testFactory createCart! !

!methodRemoval: CartTest #createCart stamp: 'mp 6/11/2023 21:44:46'!
createCart
	
	^testFactory createCart!
!CartTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:44:46' prior: 50622687!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testFactory createCart.
	
	cart add: 2 of: self itemSellByTheStore.
	self assert: (cart occurrencesOf: self itemSellByTheStore) = 2! !
!CartTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:44:46' prior: 50622701!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testFactory createCart.
	
	cart add: self itemSellByTheStore.
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:44:46' prior: 50622709!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testFactory createCart.
	
	self deny: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:44:46' prior: 50622661!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testFactory createCart.
	
	self 
		should: [cart add: 0 of: self itemSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:44:46' prior: 50622716!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testFactory createCart.
	
	self 
		should: [cart add: 2 of: self itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:44:46' prior: 50622674!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testFactory createCart.
	
	self 
		should: [ cart add: self itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:44:46' prior: 50622729!
test06CartRemembersAddedItems

	| cart |
	
	cart := testFactory createCart.
	
	cart add: self itemSellByTheStore.
	self assert: (cart includes: self itemSellByTheStore)! !
!CartTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:44:46' prior: 50622696!
test01NewCartsAreCreatedEmpty

	self assert: (testFactory createCart) isEmpty! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mp 6/11/2023 21:45:03'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mp 6/11/2023 21:45:03'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mp 6/11/2023 21:45:03'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mp 6/11/2023 21:45:03'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mp 6/11/2023 21:45:03'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mp 6/11/2023 21:45:03'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mp 6/11/2023 21:45:03'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mp 6/11/2023 21:45:03'!
PASSED!

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 21:45:07'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 21:45:07'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 21:45:07'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 21:45:07'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 21:45:07'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 21:45:07'!
PASSED!

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 21:45:07'!
PASSED!

!methodRemoval: CashierTest #defaultCatalog stamp: 'mp 6/11/2023 21:45:16'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!

!methodRemoval: CashierTest #defaultPriceCatalog stamp: 'mp 6/11/2023 21:45:50'!
defaultPriceCatalog
	|catalog|
	catalog := Dictionary new .
	catalog at: self itemSellByTheStore put: 2000 * peso.
	
	^ catalog!

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 21:45:52'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 21:45:52'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 21:45:52'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 21:45:52'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 21:45:52'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 21:45:52'!
PASSED!

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 21:45:52'!
PASSED!
!CartTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:46:29' prior: 50624803!
test05CanNotAddMoreThanOneItemNotSellByTheStore

	| cart |
	
	cart := testFactory createCart.
	
	self 
		should: [cart add: 2 of: testFactory itemNotSellByTheStore  ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:46:34' prior: 50624816!
test02CanNotAddItemsThatDoNotBelongToStore

	| cart |
	
	cart := testFactory createCart.
	
	self 
		should: [ cart add: testFactory itemNotSellByTheStore ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidItemErrorMessage.
			self assert: cart isEmpty ]! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:47:11' prior: 50622790!
itemSellByTheStore
	
	^ testFactory itemSellByTheStore ! !

!methodRemoval: CashierTest #itemSellByTheStore stamp: 'mp 6/11/2023 21:47:22'!
itemSellByTheStore
	
	^ testFactory itemSellByTheStore !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:47:22' prior: 50624674!
test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook
	|cart cashier aCreditCard salesBook|
	
	cart := testFactory createCart .
	cart add: ( testFactory itemSellByTheStore ) .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	aCreditCard := CreditCard withNumber: 2222 expiredOn: July, 2030.
	
	self 
	should: [cashier checkout: cart withCard: aCreditCard] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: 'The account has insufficient funds' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:47:22' prior: 50624635!
test03CheckoutOnAExpiredCardShouldRaiseError
	|cart cashier expiredDate salesBook|
	
	cart := testFactory createCart .
	cart add: ( testFactory itemSellByTheStore ) .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	expiredDate:= CreditCard withNumber: 1000 expiredOn: May, 2020.
	
	self 
	should: [cashier checkout: cart withCard: expiredDate] 
		raise: Error
		withExceptionDo: [:anError |
			self assert: 'Expired credit card' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:47:22' prior: 50624656!
test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook
	|cart cashier expiredDate salesBook|
	
	cart := testFactory createCart .
	cart add: ( testFactory itemSellByTheStore ) .
	salesBook:= OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	expiredDate:= CreditCard withNumber: 1000 expiredOn: July, 2030.
	
	cashier checkout: cart withCard: expiredDate.
	
	self deny: salesBook isEmpty.
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:47:22' prior: 50624697!
test06CheckoutOnACardWithInsufficientFundsShouldRaiseError
	|cart cashier insuficientFundsCard salesBook|
	
	cart := testFactory createCart .
	cart add: ( testFactory itemSellByTheStore ) .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	insuficientFundsCard := CreditCard withNumber: 2222 expiredOn: July, 2030.
	
	self 
	should: [cashier checkout: cart withCard: insuficientFundsCard] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: 'The account has insufficient funds' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:47:22' prior: 50624594!
test05CheckoutOnAStolenCardShouldRaiseError
	|cart cashier stolenCard salesBook|
	
	cart := testFactory createCart .
	cart add: ( testFactory itemSellByTheStore ) .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	stolenCard := CreditCard withNumber: 1111 expiredOn: July, 2030.
	
	self 
	should: [cashier checkout: cart withCard: stolenCard] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: 'Stolen credit card' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !
!CashierTest methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:47:22' prior: 50624579!
test02CheckoutOnACartWithOneProductShouldNotRaiseError
	|cart cashier salesBook|
	
	cart := testFactory createCart .
	cart add: ( testFactory itemSellByTheStore ) .
	
	salesBook:= OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	
	cashier checkout: cart withCard: (CreditCard withNumber: 1000 expiredOn: July, 2030).
	! !

!methodRemoval: CashierTest #itemNotSellByTheStore stamp: 'mp 6/11/2023 21:47:32'!
itemNotSellByTheStore
	
	^'invalidBook'!

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 21:47:33'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 21:47:33'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 21:47:33'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 21:47:33'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 21:47:33'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 21:47:33'!
PASSED!

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 21:47:33'!
PASSED!

!methodRemoval: CartTest #defaultCatalog stamp: 'mp 6/11/2023 21:47:40'!
defaultCatalog
	
	^ Array with: self itemSellByTheStore!
!CartTest methodsFor: 'support' stamp: 'mp 6/11/2023 21:48:32' prior: 50622751!
itemSellByTheStore
	
	^ testFactory itemSellByTheStore ! !

!methodRemoval: CartTest #itemSellByTheStore stamp: 'mp 6/11/2023 21:48:40'!
itemSellByTheStore
	
	^ testFactory itemSellByTheStore !
!CartTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:48:40' prior: 50624829!
test06CartRemembersAddedItems

	| cart |
	
	cart := testFactory createCart.
	
	cart add: ( testFactory itemSellByTheStore ).
	self assert: (cart includes: ( testFactory itemSellByTheStore ))! !
!CartTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:48:40' prior: 50624783!
test07CartDoesNotHoldNotAddedItems

	| cart |
	
	cart := testFactory createCart.
	
	self deny: (cart includes: ( testFactory itemSellByTheStore ))! !
!CartTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:48:40' prior: 50624775!
test03AfterAddingAnItemTheCartIsNotEmptyAnymore

	| cart |
	
	cart := testFactory createCart.
	
	cart add: ( testFactory itemSellByTheStore ).
	self deny: cart isEmpty ! !
!CartTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:48:40' prior: 50624790!
test04CanNotAddNonPositiveNumberOfItems

	| cart |
	
	cart := testFactory createCart.
	
	self 
		should: [cart add: 0 of: ( testFactory itemSellByTheStore ) ]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [ :anError |
			self assert: anError messageText = cart invalidQuantityErrorMessage.
			self assert: cart isEmpty ]! !
!CartTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:48:40' prior: 50624766!
test08CartRemembersTheNumberOfAddedItems

	| cart |
	
	cart := testFactory createCart.
	
	cart add: 2 of: ( testFactory itemSellByTheStore ).
	self assert: (cart occurrencesOf: ( testFactory itemSellByTheStore )) = 2! !

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mp 6/11/2023 21:48:44'!
PASSED!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mp 6/11/2023 21:48:47'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mp 6/11/2023 21:48:47'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mp 6/11/2023 21:48:47'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mp 6/11/2023 21:48:47'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mp 6/11/2023 21:48:47'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mp 6/11/2023 21:48:47'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mp 6/11/2023 21:48:47'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mp 6/11/2023 21:48:47'!
PASSED!

!methodRemoval: CartTest #itemNotSellByTheStore stamp: 'mp 6/11/2023 21:48:52'!
itemNotSellByTheStore
	
	^'invalidBook'!

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mp 6/11/2023 21:48:54'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mp 6/11/2023 21:48:54'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mp 6/11/2023 21:48:54'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mp 6/11/2023 21:48:54'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mp 6/11/2023 21:48:54'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mp 6/11/2023 21:48:54'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mp 6/11/2023 21:48:54'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mp 6/11/2023 21:48:54'!
PASSED!

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 21:50:19'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 21:50:19'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 21:50:19'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 21:50:19'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 21:50:19'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 21:50:19'!
PASSED!

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 21:50:19'!
PASSED!

----SNAPSHOT----(11 June 2023 21:50:23) CuisUniversity-5819.image priorSource: 9373481!
!CashierTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:50:42'!
_test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook
	|cart cashier aCreditCard salesBook|
	
	cart := testFactory createCart .
	cart add: ( testFactory itemSellByTheStore ) .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	aCreditCard := CreditCard withNumber: 2222 expiredOn: July, 2030.
	
	self 
	should: [cashier checkout: cart withCard: aCreditCard] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: 'The account has insufficient funds' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !

!methodRemoval: CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 21:50:46'!
test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook
	|cart cashier aCreditCard salesBook|
	
	cart := testFactory createCart .
	cart add: ( testFactory itemSellByTheStore ) .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	aCreditCard := CreditCard withNumber: 2222 expiredOn: July, 2030.
	
	self 
	should: [cashier checkout: cart withCard: aCreditCard] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: 'The account has insufficient funds' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	!
!CashierTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:51:01'!
test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook
	|cart cashier aCreditCard salesBook|
	
	cart := testFactory createCart .
	cart add: ( testFactory itemSellByTheStore ) .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	aCreditCard := CreditCard withNumber: 2222 expiredOn: July, 2030.
	
	self 
	should: [cashier checkout: cart withCard: aCreditCard] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: 'The account has insufficient funds' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !

!methodRemoval: CashierTest #_test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 21:51:01'!
_test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook
	|cart cashier aCreditCard salesBook|
	
	cart := testFactory createCart .
	cart add: ( testFactory itemSellByTheStore ) .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	aCreditCard := CreditCard withNumber: 2222 expiredOn: July, 2030.
	
	self 
	should: [cashier checkout: cart withCard: aCreditCard] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: 'The account has insufficient funds' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	!
!TusLibrosTestFactory methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:52:59' prior: 50624534!
defaultPriceCatalog
	|catalog|
	catalog := Dictionary new .
	catalog at: self itemSellByTheStore put: 2000 * peso.
	catalog at: self anotherItemSellByTheStore put: 700 * peso.
	
	^ catalog! !
!TusLibrosTestFactory methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:53:19'!
anotherItemSellByTheStore
	
	^ 'another validBook'! !
!TusLibrosTestFactory methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:53:31' prior: 50625371!
anotherItemSellByTheStore
	
	^ 'anotherValidBook'! !
!CashierTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:54:53' prior: 50625315!
test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook
	|cart cashier aCreditCard salesBook|
	
	cart := testFactory createCart .
	cart add: 3 of: ( testFactory itemSellByTheStore ) .	
	cart add: 2 of: ( testFactory anotherItemSellByTheStore ) .
	
	salesBook := OrderedCollection new.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	aCreditCard := CreditCard withNumber: 2222 expiredOn: July, 2030.
	
	self 
	should: [cashier checkout: cart withCard: aCreditCard] 
		raise: Error 
		withExceptionDo: [:anError |
			self assert: 'The account has insufficient funds' equals: anError messageText.
			self assert: salesBook isEmpty  ]
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:56:43' prior: 50625381!
test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook
	|cart cashier aCreditCard salesBook expectedSalesBook|
	
	cart := testFactory createCart .
	cart add: 3 of: ( testFactory itemSellByTheStore ) .	
	cart add: 2 of: ( testFactory anotherItemSellByTheStore ) .
	
	salesBook := OrderedCollection new.
	expectedSalesBook := OrderedCollection with: 7400 * peso.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	aCreditCard := CreditCard withNumber: 1000 expiredOn: July, 2030.
	
	cashier checkout: cart withCard: aCreditCard.
	
	! !
!CashierTest methodsFor: 'tests' stamp: 'mp 6/11/2023 21:57:38' prior: 50625406!
test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook
	|cart cashier aCreditCard salesBook expectedSalesBook|
	
	cart := testFactory createCart .
	cart add: 3 of: ( testFactory itemSellByTheStore ) .	
	cart add: 2 of: ( testFactory anotherItemSellByTheStore ) .
	
	salesBook := OrderedCollection new.
	expectedSalesBook := OrderedCollection with: 7400 * peso.
	
	cashier := self cashierOnJuneWithMerchantProcessorSimulatorWithSalesBook: salesBook.
	aCreditCard := CreditCard withNumber: 1000 expiredOn: July, 2030.
	
	cashier checkout: cart withCard: aCreditCard.
	
	self assert: cashier salesBook equals: expectedSalesBook .
	
	! !

!methodRemoval: Cashier #initializeWith: stamp: 'mp 6/11/2023 21:58:16'!
initializeWith: aMonthOfAYear

	currentDate:= aMonthOfAYear .!

!methodRemoval: Cashier #initializeWithMonth:andSalesBook: stamp: 'mp 6/11/2023 21:58:33'!
initializeWithMonth: aMonthOfAYear andSalesBook: aSalesBook

	currentDate:= aMonthOfAYear .
	salesBook := aSalesBook !

!methodRemoval: Cashier class #onDate: stamp: 'mp 6/11/2023 21:58:38'!
onDate: aMonthOfAYear

	^self new initializeWith: aMonthOfAYear 
	
	!

!methodRemoval: Cashier class #onDate:withSalesBook: stamp: 'mp 6/11/2023 21:58:39'!
onDate: aMonthOfAYear withSalesBook: aSalesBook

	^self new initializeWithMonth: aMonthOfAYear andSalesBook:aSalesBook .
	
	!

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 21:58:56'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 21:58:56'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 21:58:56'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 21:58:56'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 21:58:56'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 21:58:56'!
PASSED!

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 21:58:56'!
ERROR!

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 21:58:56'!
ERROR!

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 21:59:07'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 21:59:07'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 21:59:07'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 21:59:07'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 21:59:07'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 21:59:08'!
PASSED!

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 21:59:08'!
ERROR!

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 21:59:08'!
ERROR!
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:59:14'!
salesBook
	self shouldBeImplemented.
	^salesBook! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:59:21' prior: 50625533!
salesBook
	^salesBook! !

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 21:59:25'!
FAILURE!
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:59:47' prior: 50625538!
salesBook
	^salesBook copy! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 21:59:52' prior: 50625546!
salesBook

	^salesBook copy! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 22:01:46' prior: 50624350!
checkout: aCart withCard: aCreditCard

	aCart  isEmpty ifTrue: [self error: self class canNotCheckoutAnEmptyCartErrorDescription ].
	
	(currentDate > aCreditCard expirationDate) ifTrue:[self error: 'Expired credit card'].
	
	merchantProcessor checkout: aCreditCard.
	
	salesBook add: aCart balance.! !
!Cashier methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 22:02:58' prior: 50625554!
checkout: aCart withCard: aCreditCard

	aCart  isEmpty ifTrue: [self error: self class canNotCheckoutAnEmptyCartErrorDescription ].
	
	(currentDate > aCreditCard expirationDate) ifTrue:[self error: 'Expired credit card'].
	
	merchantProcessor checkout: (aCart balance) with: aCreditCard.
	
	salesBook add: aCart balance.! !
!Cart methodsFor: 'balance' stamp: 'mp 6/11/2023 22:06:08'!
balance
	
	^items sum: [:product  | catalog at: product ]! !

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 22:06:29'!
ERROR!

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 22:06:29'!
ERROR!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 22:07:36'!
checkout: anAmmount with: aCreditCard

	(aCreditCard number = 1111) ifTrue: [self error: 'Stolen credit card'].
	
	(aCreditCard number = 2222) ifTrue: [self error: 'The account has insufficient funds'].
	! !

!methodRemoval: MerchantProcessorSimulator #checkout: stamp: 'mp 6/11/2023 22:07:39'!
checkout: aCreditCard

	(aCreditCard number = 1111) ifTrue: [self error: 'Stolen credit card'].
	
	(aCreditCard number = 2222) ifTrue: [self error: 'The account has insufficient funds'].
	!

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 22:07:43'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 22:07:43'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 22:07:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 22:07:43'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 22:07:43'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 22:07:43'!
PASSED!

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 22:07:44'!
PASSED!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 22:08:37' prior: 50625593!
checkout: anAmmount with: aCreditCard

	(aCreditCard number = 1111) ifTrue: [self error: 'Stolen credit card'].
	
	(aCreditCard number = 2222 and: [anAmmount > 150*peso]) ifTrue: [self error: 'The account has insufficient funds'].
	! !

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 22:08:43'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 22:08:43'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 22:08:43'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 22:08:43'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 22:08:43'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 22:08:43'!
FAILURE!

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 22:08:43'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 22:08:43'!
FAILURE!

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 22:09:24'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 22:09:24'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 22:09:24'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 22:09:24'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 22:09:24'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 22:09:24'!
FAILURE!

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 22:09:25'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 22:09:25'!
FAILURE!

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 22:09:38'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 22:10:20'!
FAILURE!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 22:11:10'!
FAILURE!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 22:11:17'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 22:12:04' prior: 50625638!
checkout: anAmmount with: aCreditCard

	(aCreditCard number = 1111) ifTrue: [self error: 'Stolen credit card'].
	
	(aCreditCard number = 2222 and: [anAmmount > 150 * peso]) ifTrue: [self error: 'The account has insufficient funds'].
	! !

!testRun: #CartTest #test01NewCartsAreCreatedEmpty stamp: 'mp 6/11/2023 22:13:38'!
PASSED!

!testRun: #CartTest #test02CanNotAddItemsThatDoNotBelongToStore stamp: 'mp 6/11/2023 22:13:38'!
PASSED!

!testRun: #CartTest #test03AfterAddingAnItemTheCartIsNotEmptyAnymore stamp: 'mp 6/11/2023 22:13:38'!
PASSED!

!testRun: #CartTest #test04CanNotAddNonPositiveNumberOfItems stamp: 'mp 6/11/2023 22:13:38'!
PASSED!

!testRun: #CartTest #test05CanNotAddMoreThanOneItemNotSellByTheStore stamp: 'mp 6/11/2023 22:13:38'!
PASSED!

!testRun: #CartTest #test06CartRemembersAddedItems stamp: 'mp 6/11/2023 22:13:38'!
PASSED!

!testRun: #CartTest #test07CartDoesNotHoldNotAddedItems stamp: 'mp 6/11/2023 22:13:38'!
PASSED!

!testRun: #CartTest #test08CartRemembersTheNumberOfAddedItems stamp: 'mp 6/11/2023 22:13:38'!
PASSED!

TusLibrosTestFactory new createCart balance!
!Cart methodsFor: 'balance' stamp: 'mp 6/11/2023 22:15:38' prior: 50625579!
balance
	
	^items sum: [:product  | catalog at: product ] ifEmpty: [^0].! !

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 22:15:44'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 22:15:44'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 22:15:44'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 22:15:44'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 22:15:44'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 22:15:44'!
FAILURE!

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 22:15:44'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 22:15:44'!
FAILURE!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 22:16:16'!
FAILURE!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 22:16:16'!
FAILURE!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 22:16:55'!
FAILURE!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 22:17:18'!
FAILURE!
!MerchantProcessorSimulator methodsFor: 'as yet unclassified' stamp: 'mp 6/11/2023 22:19:28' prior: 50625725!
checkout: anAmmount with: aCreditCard

	(aCreditCard number = 1111) ifTrue: [self error: 'Stolen credit card'].
	
	(aCreditCard number = 2222 and: [anAmmount > (150 * peso)]) ifTrue: [self error: 'The account has insufficient funds'].
	! !

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 22:19:36'!
PASSED!

!testRun: #CashierTest #test01CheckoutOnEmptyCartShouldRiseError stamp: 'mp 6/11/2023 22:19:36'!
PASSED!

!testRun: #CashierTest #test02CheckoutOnACartWithOneProductShouldNotRaiseError stamp: 'mp 6/11/2023 22:19:36'!
PASSED!

!testRun: #CashierTest #test03CheckoutOnAExpiredCardShouldRaiseError stamp: 'mp 6/11/2023 22:19:36'!
PASSED!

!testRun: #CashierTest #test04CheckoutOnACartWithAProductShouldBeRegisteredOnSalesBook stamp: 'mp 6/11/2023 22:19:36'!
PASSED!

!testRun: #CashierTest #test05CheckoutOnAStolenCardShouldRaiseError stamp: 'mp 6/11/2023 22:19:36'!
PASSED!

!testRun: #CashierTest #test06CheckoutOnACardWithInsufficientFundsShouldRaiseError stamp: 'mp 6/11/2023 22:19:36'!
PASSED!

!testRun: #CashierTest #test07CheckoutOnAValidCardAndCartShouldRegisterTheAmmountOnTheSalesBook stamp: 'mp 6/11/2023 22:19:36'!
PASSED!

----SNAPSHOT----(11 June 2023 22:20:10) CuisUniversity-5819.image priorSource: 9395700!

----SNAPSHOT----(11 June 2023 22:21:27) CuisUniversity-5819.image priorSource: 9414509!